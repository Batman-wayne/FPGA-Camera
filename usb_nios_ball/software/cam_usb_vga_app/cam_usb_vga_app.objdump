
cam_usb_vga_app.elf:     file format elf32-littlenios2
cam_usb_vga_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012690 memsz 0x00012690 flags r-x
    LOAD off    0x000136b0 vaddr 0x000126b0 paddr 0x0001419c align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015c88 vaddr 0x00015c88 paddr 0x00015c88 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000119ec  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a94  00011c1c  00011c1c  00012c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  000126b0  0001419c  000136b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  00015c88  00015c88  00015c88  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00015dec  00015dec  0001519c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001519c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f18  00000000  00000000  000151c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000237ef  00000000  00000000  000160d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000090fe  00000000  00000000  000398c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b8d4  00000000  00000000  000429c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002384  00000000  00000000  0004e29c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003a53  00000000  00000000  00050620  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001786c  00000000  00000000  00054073  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006b8e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d0  00000000  00000000  0006b920  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007050d  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00070510  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007051c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007051d  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007051e  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00070522  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00070526  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0007052a  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00070535  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00070540  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000019  00000000  00000000  0007054b  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  00070564  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0008492c  00000000  00000000  0007059c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00011c1c l    d  .rodata	00000000 .rodata
000126b0 l    d  .rwdata	00000000 .rwdata
00015c88 l    d  .bss	00000000 .bss
00015dec l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cam_usb_vga_app_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
00015c88 l     O .bss	00000002 ctl_reg.3589
00015c8a l     O .bss	00000002 no_device.3590
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000123f6 l     O .rodata	00000010 zeroes.4404
0000498c l     F .text	000000bc __sbprintf
00012406 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004b9c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000066f4 l     F .text	00000008 __fp_unlock
00006708 l     F .text	0000019c __sinit.part.1
000068a4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000126b0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00012af4 l     O .rwdata	00000020 lc_ctype_charset
00012ad4 l     O .rwdata	00000020 lc_message_charset
00012b14 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00012438 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009d78 l     F .text	000000fc __sprint_r.part.0
0001255c l     O .rodata	00000010 zeroes.4349
0000b3b4 l     F .text	000000bc __sbprintf
0001256c l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f3fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f510 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f53c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f630 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f718 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f804 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f9e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001418c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000fc84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000fdc0 l     F .text	00000034 alt_dev_reg
000130fc l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001009c l     F .text	0000020c altera_avalon_jtag_uart_irq
000102a8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010b84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010fe4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011144 l     F .text	0000003c alt_get_errno
00011180 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015cc0 g     O .bss	00000004 alt_instruction_exception_handler
000093bc g     F .text	00000074 _mprec_log10
000094a8 g     F .text	0000008c __any_on
0000b968 g     F .text	00000054 _isatty_r
00012444 g     O .rodata	00000028 __mprec_tinytens
0000f91c g     F .text	0000007c alt_main
00002528 g     F .text	000000c0 _puts_r
00015cec g     O .bss	00000100 alt_irq
0000b9bc g     F .text	00000060 _lseek_r
0001419c g       *ABS*	00000000 __flash_rwdata_start
0000ddd4 g     F .text	00000088 .hidden __eqdf2
00015dec g       *ABS*	00000000 __alt_heap_start
000024ec g     F .text	0000003c printf
0000bbd4 g     F .text	0000009c _wcrtomb_r
00009c38 g     F .text	0000005c __sseek
00006a54 g     F .text	00000010 __sinit
0000ba7c g     F .text	00000140 __swbuf_r
00007528 g     F .text	0000007c _setlocale_r
000068ac g     F .text	00000078 __sfmoreglue
0000f9bc g     F .text	00000024 __malloc_unlock
000023bc g     F .text	00000080 UsbGetRetryCnt
000081f8 g     F .text	0000015c memmove
0000026c g     F .text	000000b0 IO_init
00006a3c g     F .text	00000018 _cleanup
0000847c g     F .text	000000a8 _Balloc
0000de5c g     F .text	000000dc .hidden __gtdf2
0001156c g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000b90c g     F .text	0000005c _fstat_r
00015ca4 g     O .bss	00000004 errno
00009bb4 g     F .text	00000008 __seofread
00015cac g     O .bss	00000004 alt_argv
0001c15c g       *ABS*	00000000 _gp
0000fc54 g     F .text	00000030 usleep
00012f7c g     O .rwdata	00000180 alt_fd_list
00011590 g     F .text	00000090 alt_find_dev
000080b0 g     F .text	00000148 memcpy
000066fc g     F .text	0000000c _cleanup_r
0000f214 g     F .text	000000dc .hidden __floatsidf
000110c8 g     F .text	0000007c alt_io_redirect
0000df38 g     F .text	000000f4 .hidden __ltdf2
00011c1c g       *ABS*	00000000 __DTOR_END__
000025e8 g     F .text	00000014 puts
000117ec g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009a98 g     F .text	00000074 __fpclassifyd
00009318 g     F .text	000000a4 __ratio
0000b398 g     F .text	0000001c __vfiprintf_internal
000104a0 g     F .text	0000021c altera_avalon_jtag_uart_read
000024bc g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000ca74 g     F .text	00000064 .hidden __udivsi3
0000f66c g     F .text	000000ac isatty
00012494 g     O .rodata	000000c8 __mprec_tens
000075a4 g     F .text	0000000c __locale_charset
00015ca0 g     O .bss	00000004 __malloc_top_pad
00001a48 g     F .text	00000268 UsbGetConfigDesc2
00014164 g     O .rwdata	00000004 __mb_cur_max
000075d4 g     F .text	0000000c _localeconv_r
000088b0 g     F .text	0000003c __i2b
00006ed8 g     F .text	000004c8 __sfvwrite_r
00009b0c g     F .text	00000054 _sbrk_r
0000ba1c g     F .text	00000060 _read_r
00014184 g     O .rwdata	00000004 alt_max_fd
0000b600 g     F .text	000000f0 _fclose_r
000066c4 g     F .text	00000030 fflush
00015c9c g     O .bss	00000004 __malloc_max_sbrked_mem
0000cb58 g     F .text	000008ac .hidden __adddf3
000090c0 g     F .text	0000010c __b2d
0000c3b8 g     F .text	000005c4 .hidden __umoddi3
0000f840 g     F .text	000000dc lseek
0001415c g     O .rwdata	00000004 _global_impure_ptr
00009534 g     F .text	00000564 _realloc_r
00015dec g       *ABS*	00000000 __bss_end
00010ef4 g     F .text	000000f0 alt_iic_isr_register
00011464 g     F .text	00000108 alt_tick
0000bdbc g     F .text	000005fc .hidden __udivdi3
0000b868 g     F .text	00000024 _fputwc_r
0001246c g     O .rodata	00000028 __mprec_bigtens
00008694 g     F .text	00000104 __s2b
0000f2f0 g     F .text	000000a8 .hidden __floatunsidf
00008e00 g     F .text	00000060 __mcmp
00001498 g     F .text	00000100 UsbSetAddress
00006a74 g     F .text	00000018 __fp_lock_all
00010ea8 g     F .text	0000004c alt_ic_irq_enabled
000113c8 g     F .text	0000009c alt_alarm_stop
00015cb4 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012f54 g     O .rwdata	00000028 alt_dev_null
00010b64 g     F .text	00000020 alt_dcache_flush_all
00008798 g     F .text	00000068 __hi0bits
000003b4 g     F .text	000000a0 IO_read
0000f194 g     F .text	00000080 .hidden __fixdfsi
0001419c g       *ABS*	00000000 __ram_rwdata_end
0001417c g     O .rwdata	00000008 alt_dev_list
0000fcc0 g     F .text	00000100 write
000126b0 g       *ABS*	00000000 __ram_rodata_end
0000f578 g     F .text	000000b8 fstat
0000df38 g     F .text	000000f4 .hidden __ledf2
0000243c g     F .text	00000080 UsbPrintMem
00008b78 g     F .text	00000140 __pow5mult
00009e8c g     F .text	0000150c ___vfiprintf_internal_r
00015c94 g     O .bss	00000004 __nlocale_changed
0000cad8 g     F .text	00000058 .hidden __umodsi3
00015dec g       *ABS*	00000000 end
0000ffdc g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00011c1c g       *ABS*	00000000 __CTOR_LIST__
00019000 g       *ABS*	00000000 __alt_stack_pointer
0000f398 g     F .text	00000064 .hidden __clzsi2
000106bc g     F .text	00000224 altera_avalon_jtag_uart_write
00006a64 g     F .text	00000004 __sfp_lock_acquire
00007fcc g     F .text	000000e4 memchr
00002694 g     F .text	000022dc ___vfprintf_internal_r
00001db0 g     F .text	00000100 UsbClassRequest
00006bc8 g     F .text	00000310 _free_r
000075b0 g     F .text	00000010 __locale_mb_cur_max
00011a68 g     F .text	00000180 __call_exitprocs
00015c90 g     O .bss	00000004 __mlocale_changed
00014168 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00015cb8 g     O .bss	00000004 _alt_tick_rate
00008cb8 g     F .text	00000148 __lshift
00015cbc g     O .bss	00000004 _alt_nticks
0000fa1c g     F .text	00000104 read
0000fe2c g     F .text	0000004c alt_sys_init
00011950 g     F .text	00000118 __register_exitproc
000088ec g     F .text	0000028c __multiply
00010348 g     F .text	00000068 altera_avalon_jtag_uart_close
0000cb30 g     F .text	00000028 .hidden __mulsi3
000126b0 g       *ABS*	00000000 __ram_rwdata_start
00011c1c g       *ABS*	00000000 __ram_rodata_start
00015cc4 g     O .bss	00000028 __malloc_current_mallinfo
000091cc g     F .text	0000014c __d2b
00001598 g     F .text	00000148 UsbGetDeviceDesc1
0000fe78 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00011728 g     F .text	000000c4 alt_get_fd
00010a0c g     F .text	00000158 alt_busy_sleep
0000b4d0 g     F .text	00000054 _close_r
000118d4 g     F .text	0000007c memcmp
0000ff38 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015dec g       *ABS*	00000000 __alt_stack_base
0000ff88 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004a48 g     F .text	00000154 __swsetup_r
0000d404 g     F .text	000009d0 .hidden __divdf3
00006924 g     F .text	00000118 __sfp
00009430 g     F .text	00000078 __copybits
00012b4c g     O .rwdata	00000408 __malloc_av_
00006a70 g     F .text	00000004 __sinit_lock_release
0000e02c g     F .text	0000086c .hidden __muldf3
00009b60 g     F .text	00000054 __sread
00002338 g     F .text	00000084 UsbWaitTDListDone
00011620 g     F .text	00000108 alt_find_file
00010bc0 g     F .text	000000a4 alt_dev_llist_insert
0000f998 g     F .text	00000024 __malloc_lock
0000fba4 g     F .text	000000b0 sbrk
00006668 g     F .text	0000005c _fflush_r
0000b524 g     F .text	000000dc _calloc_r
00015c88 g       *ABS*	00000000 __bss_start
00008354 g     F .text	00000128 memset
00000454 g     F .text	00000eec main
00015cb0 g     O .bss	00000004 alt_envp
00015c98 g     O .bss	00000004 __malloc_max_total_mem
0000fed8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00001cb0 g     F .text	00000100 UsbSetConfig
0000bbbc g     F .text	00000018 __swbuf
00009c94 g     F .text	00000008 __sclose
00019000 g       *ABS*	00000000 __alt_heap_limit
0000b6f0 g     F .text	00000014 fclose
00004dc4 g     F .text	00001688 _dtoa_r
000077c0 g     F .text	0000080c _malloc_r
0000bd30 g     F .text	00000030 __ascii_wctomb
00014188 g     O .rwdata	00000004 alt_errno
000073a0 g     F .text	000000c4 _fwalk
0000c97c g     F .text	00000084 .hidden __divsi3
00006aa4 g     F .text	00000124 _malloc_trim_r
00001eb0 g     F .text	00000148 UsbGetHidDesc
00011c1c g       *ABS*	00000000 __CTOR_END__
00009c9c g     F .text	000000dc strcmp
00011c1c g       *ABS*	00000000 __flash_rodata_start
00011c1c g       *ABS*	00000000 __DTOR_LIST__
0000ddd4 g     F .text	00000088 .hidden __nedf2
00001398 g     F .text	0000004c UsbRead
0000fdf4 g     F .text	00000038 alt_irq_init
0000fb20 g     F .text	00000084 alt_release_fd
0001257c g     O .rodata	00000100 .hidden __clz_tab
00015c8c g     O .bss	00000004 _PathLocale
00011888 g     F .text	00000014 atexit
0000b470 g     F .text	00000060 _write_r
000075e0 g     F .text	00000018 setlocale
00014160 g     O .rwdata	00000004 _impure_ptr
00015ca8 g     O .bss	00000004 alt_argc
0000644c g     F .text	0000021c __sflush_r
00010cc4 g     F .text	00000060 _do_dtors
000075cc g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000905c g     F .text	00000064 __ulp
00006a8c g     F .text	00000018 __fp_unlock_all
00014174 g     O .rwdata	00000008 alt_fs_list
00001ff8 g     F .text	00000340 UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000075f8 g     F .text	0000000c localeconv
00010d44 g     F .text	00000050 alt_ic_isr_register
0001419c g       *ABS*	00000000 _edata
00015dec g       *ABS*	00000000 _end
00001340 g     F .text	00000058 UsbWrite
0000b704 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
000103b0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00010e1c g     F .text	0000008c alt_ic_irq_disable
00009bbc g     F .text	0000007c __swrite
0001416c g     O .rwdata	00000004 __malloc_trim_threshold
000075c0 g     F .text	0000000c __locale_msgcharset
0001189c g     F .text	00000038 exit
00007464 g     F .text	000000c4 _fwalk_reent
00008e60 g     F .text	000001fc __mdiff
0000ca00 g     F .text	00000074 .hidden __modsi3
00019000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006a68 g     F .text	00000004 __sfp_lock_release
0000031c g     F .text	00000098 IO_write
00011be8 g     F .text	00000034 _exit
000108e0 g     F .text	0000012c alt_alarm_start
00007604 g     F .text	000001bc __smakebuf_r
000025fc g     F .text	00000098 strlen
0001126c g     F .text	0000015c open
0000de5c g     F .text	000000dc .hidden __gedf2
00014170 g     O .rwdata	00000004 __wctomb
00009e74 g     F .text	00000018 __sprint_r
00010d24 g     F .text	00000020 alt_icache_flush_all
00014190 g     O .rwdata	00000004 alt_priority_mask
00010d94 g     F .text	00000088 alt_ic_irq_enable
00004970 g     F .text	0000001c __vfprintf_internal
0000bd60 g     F .text	0000005c _wctomb_r
0000e898 g     F .text	000008fc .hidden __subdf3
00008800 g     F .text	000000b0 __lo0bits
000018b8 g     F .text	00000190 UsbGetConfigDesc1
00014194 g     O .rwdata	00000008 alt_alarm_list
00010c64 g     F .text	00000060 _do_ctors
000013e4 g     F .text	000000b4 UsbSoftReset
0000bc70 g     F .text	000000c0 wcrtomb
0000f438 g     F .text	000000d8 close
000016e0 g     F .text	000001d8 UsbGetDeviceDesc2
0000f780 g     F .text	00000084 alt_load
0000b88c g     F .text	00000080 fputwc
00006a6c g     F .text	00000004 __sinit_lock_acquire
0000854c g     F .text	00000148 __multadd
00008524 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10973b04 	addi	r2,r2,23788
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10973b04 	addi	r2,r2,23788
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <_gp+0xfffe3fd0>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <_gp+0xfffe3fc4>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6d917 	ldw	r2,-25756(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6d917 	ldw	r2,-25756(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dee40014 	ori	sp,sp,36864
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6b05714 	ori	gp,gp,49500
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	10972214 	ori	r2,r2,23688

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18d77b14 	ori	r3,r3,24044

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <_gp+0xfffe40f8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000f7800 	call	f780 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000f91c0 	call	f91c <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <_gp+0xfffe410c>

0000026c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
     26c:	deffff04 	addi	sp,sp,-4
     270:	df000015 	stw	fp,0(sp)
     274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
     278:	008000b4 	movhi	r2,2
     27c:	10842004 	addi	r2,r2,4224
     280:	00c00044 	movi	r3,1
     284:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     288:	008000b4 	movhi	r2,2
     28c:	10842404 	addi	r2,r2,4240
     290:	00c00044 	movi	r3,1
     294:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
     298:	008000b4 	movhi	r2,2
     29c:	10842c04 	addi	r2,r2,4272
     2a0:	00c00044 	movi	r3,1
     2a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     2a8:	008000b4 	movhi	r2,2
     2ac:	10842804 	addi	r2,r2,4256
     2b0:	00c00044 	movi	r3,1
     2b4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2b8:	008000b4 	movhi	r2,2
     2bc:	10843404 	addi	r2,r2,4304
     2c0:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2c4:	008000b4 	movhi	r2,2
     2c8:	10843004 	addi	r2,r2,4288
     2cc:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
     2d0:	008000b4 	movhi	r2,2
     2d4:	10842404 	addi	r2,r2,4240
     2d8:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
     2dc:	008000b4 	movhi	r2,2
     2e0:	10842004 	addi	r2,r2,4224
     2e4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
     2e8:	008000b4 	movhi	r2,2
     2ec:	10842004 	addi	r2,r2,4224
     2f0:	00c00044 	movi	r3,1
     2f4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     2f8:	008000b4 	movhi	r2,2
     2fc:	10842404 	addi	r2,r2,4240
     300:	00c00044 	movi	r3,1
     304:	10c00005 	stb	r3,0(r2)
}
     308:	0001883a 	nop
     30c:	e037883a 	mov	sp,fp
     310:	df000017 	ldw	fp,0(sp)
     314:	dec00104 	addi	sp,sp,4
     318:	f800283a 	ret

0000031c <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     31c:	defffd04 	addi	sp,sp,-12
     320:	df000215 	stw	fp,8(sp)
     324:	df000204 	addi	fp,sp,8
     328:	2007883a 	mov	r3,r4
     32c:	2805883a 	mov	r2,r5
     330:	e0fffe05 	stb	r3,-8(fp)
     334:	e0bfff0d 	sth	r2,-4(fp)
	//Before tcyc
	*otg_hpi_address = Address; 
     338:	008000b4 	movhi	r2,2
     33c:	10843404 	addi	r2,r2,4304
     340:	e0fffe03 	ldbu	r3,-8(fp)
     344:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0; 
     348:	008000b4 	movhi	r2,2
     34c:	10842404 	addi	r2,r2,4240
     350:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 1; 
     354:	008000b4 	movhi	r2,2
     358:	10842c04 	addi	r2,r2,4272
     35c:	00c00044 	movi	r3,1
     360:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 0;
     364:	008000b4 	movhi	r2,2
     368:	10842804 	addi	r2,r2,4256
     36c:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data; 
     370:	008000b4 	movhi	r2,2
     374:	10843004 	addi	r2,r2,4288
     378:	e0ffff0b 	ldhu	r3,-4(fp)
     37c:	10c00015 	stw	r3,0(r2)

	//Need a delay? 
	*otg_hpi_w = 1;
     380:	008000b4 	movhi	r2,2
     384:	10842804 	addi	r2,r2,4256
     388:	00c00044 	movi	r3,1
     38c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     390:	008000b4 	movhi	r2,2
     394:	10842404 	addi	r2,r2,4240
     398:	00c00044 	movi	r3,1
     39c:	10c00005 	stb	r3,0(r2)
}
     3a0:	0001883a 	nop
     3a4:	e037883a 	mov	sp,fp
     3a8:	df000017 	ldw	fp,0(sp)
     3ac:	dec00104 	addi	sp,sp,4
     3b0:	f800283a 	ret

000003b4 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     3b4:	defffd04 	addi	sp,sp,-12
     3b8:	df000215 	stw	fp,8(sp)
     3bc:	df000204 	addi	fp,sp,8
     3c0:	2005883a 	mov	r2,r4
     3c4:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;

	*otg_hpi_address = Address; 
     3c8:	008000b4 	movhi	r2,2
     3cc:	10843404 	addi	r2,r2,4304
     3d0:	e0ffff03 	ldbu	r3,-4(fp)
     3d4:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     3d8:	008000b4 	movhi	r2,2
     3dc:	10842404 	addi	r2,r2,4240
     3e0:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 1;
     3e4:	008000b4 	movhi	r2,2
     3e8:	10842c04 	addi	r2,r2,4272
     3ec:	00c00044 	movi	r3,1
     3f0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     3f4:	008000b4 	movhi	r2,2
     3f8:	10842804 	addi	r2,r2,4256
     3fc:	00c00044 	movi	r3,1
     400:	10c00005 	stb	r3,0(r2)

	//Need a delay? 
	*otg_hpi_r = 0;
     404:	008000b4 	movhi	r2,2
     408:	10842c04 	addi	r2,r2,4272
     40c:	10000005 	stb	zero,0(r2)

	//Potentially another delay 
	temp = *otg_hpi_data;
     410:	008000b4 	movhi	r2,2
     414:	10843004 	addi	r2,r2,4288
     418:	10800017 	ldw	r2,0(r2)
     41c:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     420:	008000b4 	movhi	r2,2
     424:	10842c04 	addi	r2,r2,4272
     428:	00c00044 	movi	r3,1
     42c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     430:	008000b4 	movhi	r2,2
     434:	10842404 	addi	r2,r2,4240
     438:	00c00044 	movi	r3,1
     43c:	10c00005 	stb	r3,0(r2)


	//printf("%x\n",temp);
	return temp;
     440:	e0bffe0b 	ldhu	r2,-8(fp)
}
     444:	e037883a 	mov	sp,fp
     448:	df000017 	ldw	fp,0(sp)
     44c:	dec00104 	addi	sp,sp,4
     450:	f800283a 	ret

00000454 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
     454:	defff604 	addi	sp,sp,-40
     458:	dfc00915 	stw	ra,36(sp)
     45c:	df000815 	stw	fp,32(sp)
     460:	df000804 	addi	fp,sp,32
	IO_init();
     464:	000026c0 	call	26c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
     468:	e03ffb0d 	sth	zero,-20(fp)
	int keycode = 0;
     46c:	e03ffc15 	stw	zero,-16(fp)
	alt_u8 toggle = 0;
     470:	e03ff885 	stb	zero,-30(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	alt_u16 px = 320;
     474:	00805004 	movi	r2,320
     478:	e0bff90d 	sth	r2,-28(fp)
	alt_u16 py = 240;
     47c:	00803c04 	movi	r2,240
     480:	e0bff98d 	sth	r2,-26(fp)
	signed char  dx = 0;
     484:	e03ffa05 	stb	zero,-24(fp)
	signed char  dy = 0;
     488:	e03ffa45 	stb	zero,-23(fp)
	signed char  currXVel = 0;
     48c:	e03ffa85 	stb	zero,-22(fp)
	signed char  currYVel = 0;
     490:	e03ffac5 	stb	zero,-21(fp)
	alt_u8  pbutton = 0;
     494:	e03ffd05 	stb	zero,-12(fp)

	printf("USB keyboard setup...\n\n");
     498:	01000074 	movhi	r4,1
     49c:	21070704 	addi	r4,r4,7196
     4a0:	00025e80 	call	25e8 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     4a4:	00013e40 	call	13e4 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     4a8:	000b883a 	mov	r5,zero
     4ac:	01005104 	movi	r4,324
     4b0:	00013400 	call	1340 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     4b4:	017fffd4 	movui	r5,65535
     4b8:	01302414 	movui	r4,49296
     4bc:	00013400 	call	1340 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     4c0:	01409604 	movi	r5,600
     4c4:	01006d04 	movi	r4,436
     4c8:	00013400 	call	1340 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     4cc:	00811004 	movi	r2,1088
     4d0:	e0bff80d 	sth	r2,-32(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     4d4:	e0bff80b 	ldhu	r2,-32(fp)
     4d8:	100b883a 	mov	r5,r2
     4dc:	01005084 	movi	r4,322
     4e0:	00013400 	call	1340 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     4e4:	00808404 	movi	r2,528
     4e8:	e0bffd8d 	sth	r2,-10(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     4ec:	e0bffd8b 	ldhu	r2,-10(fp)
     4f0:	100b883a 	mov	r5,r2
     4f4:	01302314 	movui	r4,49292
     4f8:	00013400 	call	1340 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     4fc:	000b883a 	mov	r5,zero
     500:	01007104 	movi	r4,452
     504:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     508:	000b883a 	mov	r5,zero
     50c:	01007184 	movi	r4,454
     510:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     514:	000b883a 	mov	r5,zero
     518:	01007204 	movi	r4,456
     51c:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     520:	000b883a 	mov	r5,zero
     524:	01007284 	movi	r4,458
     528:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     52c:	000b883a 	mov	r5,zero
     530:	01007304 	movi	r4,460
     534:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     538:	000b883a 	mov	r5,zero
     53c:	01007384 	movi	r4,462
     540:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     544:	000b883a 	mov	r5,zero
     548:	01007404 	movi	r4,464
     54c:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     550:	000b883a 	mov	r5,zero
     554:	01007484 	movi	r4,466
     558:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     55c:	000b883a 	mov	r5,zero
     560:	01007504 	movi	r4,468
     564:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     568:	000b883a 	mov	r5,zero
     56c:	01007584 	movi	r4,470
     570:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     574:	000b883a 	mov	r5,zero
     578:	01007604 	movi	r4,472
     57c:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     580:	000b883a 	mov	r5,zero
     584:	01007684 	movi	r4,474
     588:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     58c:	000b883a 	mov	r5,zero
     590:	01007704 	movi	r4,476
     594:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     598:	000b883a 	mov	r5,zero
     59c:	01007784 	movi	r4,478
     5a0:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     5a4:	01401c84 	movi	r5,114
     5a8:	01007084 	movi	r4,450
     5ac:	00013400 	call	1340 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     5b0:	01738054 	movui	r5,52737
     5b4:	01000044 	movi	r4,1
     5b8:	000031c0 	call	31c <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     5bc:	0001883a 	nop
     5c0:	010000c4 	movi	r4,3
     5c4:	00003b40 	call	3b4 <IO_read>
     5c8:	10bfffcc 	andi	r2,r2,65535
     5cc:	103ffc26 	beq	r2,zero,5c0 <_gp+0xfffe4464>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     5d0:	00000806 	br	5f4 <main+0x1a0>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     5d4:	01000044 	movi	r4,1
     5d8:	00003b40 	call	3b4 <IO_read>
     5dc:	10bfffcc 	andi	r2,r2,65535
     5e0:	100b883a 	mov	r5,r2
     5e4:	01000074 	movhi	r4,1
     5e8:	21070d04 	addi	r4,r4,7220
     5ec:	00024ec0 	call	24ec <printf>
		goto USB_HOT_PLUG;
     5f0:	003fac06 	br	4a4 <_gp+0xfffe4348>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     5f4:	01000044 	movi	r4,1
     5f8:	00003b40 	call	3b4 <IO_read>
     5fc:	10bfffcc 	andi	r2,r2,65535
     600:	1083fb58 	cmpnei	r2,r2,4077
     604:	103ff31e 	bne	r2,zero,5d4 <_gp+0xfffe4478>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     608:	01000074 	movhi	r4,1
     60c:	21071604 	addi	r4,r4,7256
     610:	00024ec0 	call	24ec <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     614:	01401d04 	movi	r5,116
     618:	01007084 	movi	r4,450
     61c:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     620:	01400f04 	movi	r5,60
     624:	01007104 	movi	r4,452
     628:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     62c:	000b883a 	mov	r5,zero
     630:	01007184 	movi	r4,454
     634:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     638:	000b883a 	mov	r5,zero
     63c:	01007204 	movi	r4,456
     640:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     644:	000b883a 	mov	r5,zero
     648:	01007284 	movi	r4,458
     64c:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     650:	000b883a 	mov	r5,zero
     654:	01007304 	movi	r4,460
     658:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     65c:	000b883a 	mov	r5,zero
     660:	01007384 	movi	r4,462
     664:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     668:	000b883a 	mov	r5,zero
     66c:	01007404 	movi	r4,464
     670:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     674:	000b883a 	mov	r5,zero
     678:	01007484 	movi	r4,466
     67c:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     680:	000b883a 	mov	r5,zero
     684:	01007504 	movi	r4,468
     688:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     68c:	000b883a 	mov	r5,zero
     690:	01007584 	movi	r4,470
     694:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     698:	000b883a 	mov	r5,zero
     69c:	01007604 	movi	r4,472
     6a0:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     6a4:	000b883a 	mov	r5,zero
     6a8:	01007684 	movi	r4,474
     6ac:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     6b0:	000b883a 	mov	r5,zero
     6b4:	01007704 	movi	r4,476
     6b8:	00013400 	call	1340 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     6bc:	000b883a 	mov	r5,zero
     6c0:	01007784 	movi	r4,478
     6c4:	00013400 	call	1340 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     6c8:	01738054 	movui	r5,52737
     6cc:	01000044 	movi	r4,1
     6d0:	000031c0 	call	31c <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     6d4:	0001883a 	nop
     6d8:	01000044 	movi	r4,1
     6dc:	00003b40 	call	3b4 <IO_read>
     6e0:	10bfffcc 	andi	r2,r2,65535
     6e4:	1083fb58 	cmpnei	r2,r2,4077
     6e8:	10000826 	beq	r2,zero,70c <main+0x2b8>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     6ec:	01000044 	movi	r4,1
     6f0:	00003b40 	call	3b4 <IO_read>
     6f4:	10bfffcc 	andi	r2,r2,65535
     6f8:	100b883a 	mov	r5,r2
     6fc:	01000074 	movhi	r4,1
     700:	21070d04 	addi	r4,r4,7220
     704:	00024ec0 	call	24ec <printf>
		goto USB_HOT_PLUG;
     708:	003f6606 	br	4a4 <_gp+0xfffe4348>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     70c:	00b02284 	movi	r2,-16246
     710:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     714:	008c0004 	movi	r2,12288
     718:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
     71c:	00880004 	movi	r2,8192
     720:	e0bffb0d 	sth	r2,-20(fp)
	usb_ctl_val = UsbRead(ctl_reg);
     724:	d0a6cb0b 	ldhu	r2,-25812(gp)
     728:	10bfffcc 	andi	r2,r2,65535
     72c:	1009883a 	mov	r4,r2
     730:	00013980 	call	1398 <UsbRead>
     734:	e0bff80d 	sth	r2,-32(fp)
//	printf("usb_ctl_val is: %x\n", usb_ctl_val);
//	printf("no_device is: %x\n", no_device);
	if (!(usb_ctl_val & no_device))
     738:	d0a6cb8b 	ldhu	r2,-25810(gp)
     73c:	e0fff80b 	ldhu	r3,-32(fp)
     740:	1884703a 	and	r2,r3,r2
     744:	10bfffcc 	andi	r2,r2,65535
     748:	1000351e 	bne	r2,zero,820 <main+0x3cc>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     74c:	e03ff8c5 	stb	zero,-29(fp)
     750:	00000f06 	br	790 <main+0x33c>
		{
			usleep(5*1000);
     754:	0104e204 	movi	r4,5000
     758:	000fc540 	call	fc54 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     75c:	d0a6cb0b 	ldhu	r2,-25812(gp)
     760:	10bfffcc 	andi	r2,r2,65535
     764:	1009883a 	mov	r4,r2
     768:	00013980 	call	1398 <UsbRead>
     76c:	e0bff80d 	sth	r2,-32(fp)
			if(usb_ctl_val & no_device) break;
     770:	d0a6cb8b 	ldhu	r2,-25810(gp)
     774:	e0fff80b 	ldhu	r3,-32(fp)
     778:	1884703a 	and	r2,r3,r2
     77c:	10bfffcc 	andi	r2,r2,65535
     780:	1000071e 	bne	r2,zero,7a0 <main+0x34c>
	usb_ctl_val = UsbRead(ctl_reg);
//	printf("usb_ctl_val is: %x\n", usb_ctl_val);
//	printf("no_device is: %x\n", no_device);
	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     784:	e0bff8c3 	ldbu	r2,-29(fp)
     788:	10800044 	addi	r2,r2,1
     78c:	e0bff8c5 	stb	r2,-29(fp)
     790:	e0bff8c3 	ldbu	r2,-29(fp)
     794:	10800170 	cmpltui	r2,r2,5
     798:	103fee1e 	bne	r2,zero,754 <_gp+0xfffe45f8>
     79c:	00000106 	br	7a4 <main+0x350>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     7a0:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     7a4:	d0a6cb8b 	ldhu	r2,-25810(gp)
     7a8:	e0fff80b 	ldhu	r3,-32(fp)
     7ac:	1884703a 	and	r2,r3,r2
     7b0:	10bfffcc 	andi	r2,r2,65535
     7b4:	1000261e 	bne	r2,zero,850 <main+0x3fc>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
     7b8:	01000074 	movhi	r4,1
     7bc:	21071a04 	addi	r4,r4,7272
     7c0:	00025e80 	call	25e8 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
     7c4:	01000074 	movhi	r4,1
     7c8:	21072404 	addi	r4,r4,7312
     7cc:	00025e80 	call	25e8 <puts>
			while (!(usb_ctl_val & no_device))
     7d0:	00000d06 	br	808 <main+0x3b4>
			{
				usb_ctl_val = UsbRead(ctl_reg);
     7d4:	d0a6cb0b 	ldhu	r2,-25812(gp)
     7d8:	10bfffcc 	andi	r2,r2,65535
     7dc:	1009883a 	mov	r4,r2
     7e0:	00013980 	call	1398 <UsbRead>
     7e4:	e0bff80d 	sth	r2,-32(fp)
				if(usb_ctl_val & no_device)
     7e8:	d0a6cb8b 	ldhu	r2,-25810(gp)
     7ec:	e0fff80b 	ldhu	r3,-32(fp)
     7f0:	1884703a 	and	r2,r3,r2
     7f4:	10bfffcc 	andi	r2,r2,65535
     7f8:	10000126 	beq	r2,zero,800 <main+0x3ac>
					goto USB_HOT_PLUG;
     7fc:	003f2906 	br	4a4 <_gp+0xfffe4348>

				usleep(2000);
     800:	0101f404 	movi	r4,2000
     804:	000fc540 	call	fc54 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
     808:	d0a6cb8b 	ldhu	r2,-25810(gp)
     80c:	e0fff80b 	ldhu	r3,-32(fp)
     810:	1884703a 	and	r2,r3,r2
     814:	10bfffcc 	andi	r2,r2,65535
     818:	103fee26 	beq	r2,zero,7d4 <_gp+0xfffe4678>
     81c:	00000c06 	br	850 <main+0x3fc>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     820:	e0fff80b 	ldhu	r3,-32(fp)
     824:	e0bffb0b 	ldhu	r2,-20(fp)
     828:	1884703a 	and	r2,r3,r2
     82c:	10bfffcc 	andi	r2,r2,65535
     830:	10000426 	beq	r2,zero,844 <main+0x3f0>
		{
			printf("[INFO]: full speed device\n");
     834:	01000074 	movhi	r4,1
     838:	21073004 	addi	r4,r4,7360
     83c:	00025e80 	call	25e8 <puts>
     840:	00000306 	br	850 <main+0x3fc>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     844:	01000074 	movhi	r4,1
     848:	21073704 	addi	r4,r4,7388
     84c:	00025e80 	call	25e8 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     850:	00014980 	call	1498 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     854:	00000306 	br	864 <main+0x410>
	{
		UsbSetAddress();
     858:	00014980 	call	1498 <UsbSetAddress>
		usleep(10*1000);
     85c:	0109c404 	movi	r4,10000
     860:	000fc540 	call	fc54 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     864:	010000c4 	movi	r4,3
     868:	00003b40 	call	3b4 <IO_read>
     86c:	10bfffcc 	andi	r2,r2,65535
     870:	1080040c 	andi	r2,r2,16
     874:	103ff826 	beq	r2,zero,858 <_gp+0xfffe46fc>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     878:	00023380 	call	2338 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     87c:	01414184 	movi	r5,1286
     880:	01000084 	movi	r4,2
     884:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     888:	0009883a 	mov	r4,zero
     88c:	00003b40 	call	3b4 <IO_read>
     890:	10bfffcc 	andi	r2,r2,65535
     894:	100b883a 	mov	r5,r2
     898:	01000074 	movhi	r4,1
     89c:	21073e04 	addi	r4,r4,7416
     8a0:	00024ec0 	call	24ec <printf>

	IO_write(HPI_ADDR,0x0508); // n
     8a4:	01414204 	movi	r5,1288
     8a8:	01000084 	movi	r4,2
     8ac:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     8b0:	0009883a 	mov	r4,zero
     8b4:	00003b40 	call	3b4 <IO_read>
     8b8:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     8bc:	e0bff80b 	ldhu	r2,-32(fp)
     8c0:	100b883a 	mov	r5,r2
     8c4:	01000074 	movhi	r4,1
     8c8:	21074904 	addi	r4,r4,7460
     8cc:	00024ec0 	call	24ec <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     8d0:	e0bff80b 	ldhu	r2,-32(fp)
     8d4:	108000e0 	cmpeqi	r2,r2,3
     8d8:	1000031e 	bne	r2,zero,8e8 <main+0x494>
	{
		usb_ctl_val = UsbGetRetryCnt();
     8dc:	00023bc0 	call	23bc <UsbGetRetryCnt>
     8e0:	e0bff80d 	sth	r2,-32(fp)

		goto USB_HOT_PLUG;
     8e4:	003eef06 	br	4a4 <_gp+0xfffe4348>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     8e8:	01000074 	movhi	r4,1
     8ec:	21075504 	addi	r4,r4,7508
     8f0:	00025e80 	call	25e8 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     8f4:	00015980 	call	1598 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     8f8:	00000306 	br	908 <main+0x4b4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     8fc:	00015980 	call	1598 <UsbGetDeviceDesc1>
		usleep(10*1000);
     900:	0109c404 	movi	r4,10000
     904:	000fc540 	call	fc54 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     908:	010000c4 	movi	r4,3
     90c:	00003b40 	call	3b4 <IO_read>
     910:	10bfffcc 	andi	r2,r2,65535
     914:	1080040c 	andi	r2,r2,16
     918:	103ff826 	beq	r2,zero,8fc <_gp+0xfffe47a0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     91c:	00023380 	call	2338 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     920:	01414184 	movi	r5,1286
     924:	01000084 	movi	r4,2
     928:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     92c:	0009883a 	mov	r4,zero
     930:	00003b40 	call	3b4 <IO_read>
     934:	10bfffcc 	andi	r2,r2,65535
     938:	100b883a 	mov	r5,r2
     93c:	01000074 	movhi	r4,1
     940:	21076404 	addi	r4,r4,7568
     944:	00024ec0 	call	24ec <printf>

	IO_write(HPI_ADDR,0x0508);
     948:	01414204 	movi	r5,1288
     94c:	01000084 	movi	r4,2
     950:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     954:	0009883a 	mov	r4,zero
     958:	00003b40 	call	3b4 <IO_read>
     95c:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     960:	e0bff80b 	ldhu	r2,-32(fp)
     964:	100b883a 	mov	r5,r2
     968:	01000074 	movhi	r4,1
     96c:	21076f04 	addi	r4,r4,7612
     970:	00024ec0 	call	24ec <printf>
	while (usb_ctl_val != 0x03)
     974:	00000206 	br	980 <main+0x52c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     978:	00023bc0 	call	23bc <UsbGetRetryCnt>
     97c:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     980:	e0bff80b 	ldhu	r2,-32(fp)
     984:	108000d8 	cmpnei	r2,r2,3
     988:	103ffb1e 	bne	r2,zero,978 <_gp+0xfffe481c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     98c:	01000074 	movhi	r4,1
     990:	21077b04 	addi	r4,r4,7660
     994:	00025e80 	call	25e8 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     998:	00016e00 	call	16e0 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     99c:	00000306 	br	9ac <main+0x558>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     9a0:	00016e00 	call	16e0 <UsbGetDeviceDesc2>
		usleep(10*1000);
     9a4:	0109c404 	movi	r4,10000
     9a8:	000fc540 	call	fc54 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     9ac:	010000c4 	movi	r4,3
     9b0:	00003b40 	call	3b4 <IO_read>
     9b4:	10bfffcc 	andi	r2,r2,65535
     9b8:	1080040c 	andi	r2,r2,16
     9bc:	103ff826 	beq	r2,zero,9a0 <_gp+0xfffe4844>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     9c0:	00023380 	call	2338 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     9c4:	01414184 	movi	r5,1286
     9c8:	01000084 	movi	r4,2
     9cc:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     9d0:	0009883a 	mov	r4,zero
     9d4:	00003b40 	call	3b4 <IO_read>
     9d8:	10bfffcc 	andi	r2,r2,65535
     9dc:	100b883a 	mov	r5,r2
     9e0:	01000074 	movhi	r4,1
     9e4:	21076404 	addi	r4,r4,7568
     9e8:	00024ec0 	call	24ec <printf>

	IO_write(HPI_ADDR,0x0508);
     9ec:	01414204 	movi	r5,1288
     9f0:	01000084 	movi	r4,2
     9f4:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     9f8:	0009883a 	mov	r4,zero
     9fc:	00003b40 	call	3b4 <IO_read>
     a00:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     a04:	e0bff80b 	ldhu	r2,-32(fp)
     a08:	100b883a 	mov	r5,r2
     a0c:	01000074 	movhi	r4,1
     a10:	21076f04 	addi	r4,r4,7612
     a14:	00024ec0 	call	24ec <printf>
	while (usb_ctl_val != 0x03)
     a18:	00000206 	br	a24 <main+0x5d0>
	{
		usb_ctl_val = UsbGetRetryCnt();
     a1c:	00023bc0 	call	23bc <UsbGetRetryCnt>
     a20:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     a24:	e0bff80b 	ldhu	r2,-32(fp)
     a28:	108000d8 	cmpnei	r2,r2,3
     a2c:	103ffb1e 	bne	r2,zero,a1c <_gp+0xfffe48c0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     a30:	01000074 	movhi	r4,1
     a34:	21078f04 	addi	r4,r4,7740
     a38:	00025e80 	call	25e8 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     a3c:	00018b80 	call	18b8 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a40:	00000306 	br	a50 <main+0x5fc>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     a44:	00018b80 	call	18b8 <UsbGetConfigDesc1>
		usleep(10*1000);
     a48:	0109c404 	movi	r4,10000
     a4c:	000fc540 	call	fc54 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a50:	010000c4 	movi	r4,3
     a54:	00003b40 	call	3b4 <IO_read>
     a58:	10bfffcc 	andi	r2,r2,65535
     a5c:	1080040c 	andi	r2,r2,16
     a60:	103ff826 	beq	r2,zero,a44 <_gp+0xfffe48e8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     a64:	00023380 	call	2338 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     a68:	01414184 	movi	r5,1286
     a6c:	01000084 	movi	r4,2
     a70:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     a74:	0009883a 	mov	r4,zero
     a78:	00003b40 	call	3b4 <IO_read>
     a7c:	10bfffcc 	andi	r2,r2,65535
     a80:	100b883a 	mov	r5,r2
     a84:	01000074 	movhi	r4,1
     a88:	2107a104 	addi	r4,r4,7812
     a8c:	00024ec0 	call	24ec <printf>

	IO_write(HPI_ADDR,0x0508);
     a90:	01414204 	movi	r5,1288
     a94:	01000084 	movi	r4,2
     a98:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     a9c:	0009883a 	mov	r4,zero
     aa0:	00003b40 	call	3b4 <IO_read>
     aa4:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     aa8:	e0bff80b 	ldhu	r2,-32(fp)
     aac:	100b883a 	mov	r5,r2
     ab0:	01000074 	movhi	r4,1
     ab4:	2107ac04 	addi	r4,r4,7856
     ab8:	00024ec0 	call	24ec <printf>
	while (usb_ctl_val != 0x03)
     abc:	00000206 	br	ac8 <main+0x674>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ac0:	00023bc0 	call	23bc <UsbGetRetryCnt>
     ac4:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     ac8:	e0bff80b 	ldhu	r2,-32(fp)
     acc:	108000d8 	cmpnei	r2,r2,3
     ad0:	103ffb1e 	bne	r2,zero,ac0 <_gp+0xfffe4964>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     ad4:	01000074 	movhi	r4,1
     ad8:	2107b804 	addi	r4,r4,7904
     adc:	00025e80 	call	25e8 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     ae0:	0001a480 	call	1a48 <UsbGetConfigDesc2>

	usleep(100*1000);
     ae4:	010000b4 	movhi	r4,2
     ae8:	2121a804 	addi	r4,r4,-31072
     aec:	000fc540 	call	fc54 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     af0:	00000306 	br	b00 <main+0x6ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     af4:	0001a480 	call	1a48 <UsbGetConfigDesc2>
		usleep(10*1000);
     af8:	0109c404 	movi	r4,10000
     afc:	000fc540 	call	fc54 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b00:	010000c4 	movi	r4,3
     b04:	00003b40 	call	3b4 <IO_read>
     b08:	10bfffcc 	andi	r2,r2,65535
     b0c:	1080040c 	andi	r2,r2,16
     b10:	103ff826 	beq	r2,zero,af4 <_gp+0xfffe4998>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     b14:	00023380 	call	2338 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     b18:	01414184 	movi	r5,1286
     b1c:	01000084 	movi	r4,2
     b20:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     b24:	0009883a 	mov	r4,zero
     b28:	00003b40 	call	3b4 <IO_read>
     b2c:	10bfffcc 	andi	r2,r2,65535
     b30:	100b883a 	mov	r5,r2
     b34:	01000074 	movhi	r4,1
     b38:	2107cb04 	addi	r4,r4,7980
     b3c:	00024ec0 	call	24ec <printf>

	IO_write(HPI_ADDR,0x0508);
     b40:	01414204 	movi	r5,1288
     b44:	01000084 	movi	r4,2
     b48:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     b4c:	0009883a 	mov	r4,zero
     b50:	00003b40 	call	3b4 <IO_read>
     b54:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     b58:	e0bff80b 	ldhu	r2,-32(fp)
     b5c:	100b883a 	mov	r5,r2
     b60:	01000074 	movhi	r4,1
     b64:	2107d604 	addi	r4,r4,8024
     b68:	00024ec0 	call	24ec <printf>
	while (usb_ctl_val != 0x03)
     b6c:	00000206 	br	b78 <main+0x724>
	{
		usb_ctl_val = UsbGetRetryCnt();
     b70:	00023bc0 	call	23bc <UsbGetRetryCnt>
     b74:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     b78:	e0bff80b 	ldhu	r2,-32(fp)
     b7c:	108000d8 	cmpnei	r2,r2,3
     b80:	103ffb1e 	bne	r2,zero,b70 <_gp+0xfffe4a14>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     b84:	01000074 	movhi	r4,1
     b88:	2107e204 	addi	r4,r4,8072
     b8c:	00025e80 	call	25e8 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     b90:	01415b04 	movi	r5,1388
     b94:	01000084 	movi	r4,2
     b98:	000031c0 	call	31c <IO_write>
	code = IO_read(HPI_DATA);
     b9c:	0009883a 	mov	r4,zero
     ba0:	00003b40 	call	3b4 <IO_read>
     ba4:	e0bffe0d 	sth	r2,-8(fp)
	code = code & 0x003;
     ba8:	e0bffe0b 	ldhu	r2,-8(fp)
     bac:	108000cc 	andi	r2,r2,3
     bb0:	e0bffe0d 	sth	r2,-8(fp)
	printf("\ncode = %x\n", code);
     bb4:	e0bffe0b 	ldhu	r2,-8(fp)
     bb8:	100b883a 	mov	r5,r2
     bbc:	01000074 	movhi	r4,1
     bc0:	2107f504 	addi	r4,r4,8148
     bc4:	00024ec0 	call	24ec <printf>

	if (code == 0x01)
     bc8:	e0bffe0b 	ldhu	r2,-8(fp)
     bcc:	10800058 	cmpnei	r2,r2,1
     bd0:	1000041e 	bne	r2,zero,be4 <main+0x790>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     bd4:	01000074 	movhi	r4,1
     bd8:	2107f804 	addi	r4,r4,8160
     bdc:	00025e80 	call	25e8 <puts>
     be0:	00000306 	br	bf0 <main+0x79c>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     be4:	01000074 	movhi	r4,1
     be8:	21080704 	addi	r4,r4,8220
     bec:	00025e80 	call	25e8 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     bf0:	01415d84 	movi	r5,1398
     bf4:	01000084 	movi	r4,2
     bf8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x073F);
     bfc:	0141cfc4 	movi	r5,1855
     c00:	0009883a 	mov	r4,zero
     c04:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x8105);
     c08:	01604154 	movui	r5,33029
     c0c:	0009883a 	mov	r4,zero
     c10:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0003);
     c14:	014000c4 	movi	r5,3
     c18:	0009883a 	mov	r4,zero
     c1c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);
     c20:	01400204 	movi	r5,8
     c24:	0009883a 	mov	r4,zero
     c28:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     c2c:	016b0294 	movui	r5,44042
     c30:	0009883a 	mov	r4,zero
     c34:	000031c0 	call	31c <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     c38:	01415d84 	movi	r5,1398
     c3c:	01006c04 	movi	r4,432
     c40:	00013400 	call	1340 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     c44:	01415f04 	movi	r5,1404
     c48:	01000084 	movi	r4,2
     c4c:	000031c0 	call	31c <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     c50:	0009883a 	mov	r4,zero
     c54:	00003b40 	call	3b4 <IO_read>
     c58:	e0bffe85 	stb	r2,-6(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     c5c:	e0bffe83 	ldbu	r2,-6(fp)
     c60:	100b883a 	mov	r5,r2
     c64:	01000074 	movhi	r4,1
     c68:	21081004 	addi	r4,r4,8256
     c6c:	00024ec0 	call	24ec <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     c70:	0001cb00 	call	1cb0 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c74:	00000306 	br	c84 <main+0x830>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     c78:	0001cb00 	call	1cb0 <UsbSetConfig>
		usleep(10*1000);
     c7c:	0109c404 	movi	r4,10000
     c80:	000fc540 	call	fc54 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c84:	010000c4 	movi	r4,3
     c88:	00003b40 	call	3b4 <IO_read>
     c8c:	10bfffcc 	andi	r2,r2,65535
     c90:	1080040c 	andi	r2,r2,16
     c94:	103ff826 	beq	r2,zero,c78 <_gp+0xfffe4b1c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     c98:	00023380 	call	2338 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     c9c:	01414184 	movi	r5,1286
     ca0:	01000084 	movi	r4,2
     ca4:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     ca8:	0009883a 	mov	r4,zero
     cac:	00003b40 	call	3b4 <IO_read>
     cb0:	10bfffcc 	andi	r2,r2,65535
     cb4:	100b883a 	mov	r5,r2
     cb8:	01000074 	movhi	r4,1
     cbc:	21081a04 	addi	r4,r4,8296
     cc0:	00024ec0 	call	24ec <printf>

	IO_write(HPI_ADDR,0x0508);
     cc4:	01414204 	movi	r5,1288
     cc8:	01000084 	movi	r4,2
     ccc:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     cd0:	0009883a 	mov	r4,zero
     cd4:	00003b40 	call	3b4 <IO_read>
     cd8:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
     cdc:	e0bff80b 	ldhu	r2,-32(fp)
     ce0:	100b883a 	mov	r5,r2
     ce4:	01000074 	movhi	r4,1
     ce8:	21082504 	addi	r4,r4,8340
     cec:	00024ec0 	call	24ec <printf>
	while (usb_ctl_val != 0x03)
     cf0:	00000206 	br	cfc <main+0x8a8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     cf4:	00023bc0 	call	23bc <UsbGetRetryCnt>
     cf8:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     cfc:	e0bff80b 	ldhu	r2,-32(fp)
     d00:	108000d8 	cmpnei	r2,r2,3
     d04:	103ffb1e 	bne	r2,zero,cf4 <_gp+0xfffe4b98>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
     d08:	01000074 	movhi	r4,1
     d0c:	21083104 	addi	r4,r4,8388
     d10:	00025e80 	call	25e8 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
     d14:	0001db00 	call	1db0 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d18:	00000306 	br	d28 <main+0x8d4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
     d1c:	0001db00 	call	1db0 <UsbClassRequest>
		usleep(10*1000);
     d20:	0109c404 	movi	r4,10000
     d24:	000fc540 	call	fc54 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d28:	010000c4 	movi	r4,3
     d2c:	00003b40 	call	3b4 <IO_read>
     d30:	10bfffcc 	andi	r2,r2,65535
     d34:	1080040c 	andi	r2,r2,16
     d38:	103ff826 	beq	r2,zero,d1c <_gp+0xfffe4bc0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     d3c:	00023380 	call	2338 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     d40:	01414184 	movi	r5,1286
     d44:	01000084 	movi	r4,2
     d48:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     d4c:	0009883a 	mov	r4,zero
     d50:	00003b40 	call	3b4 <IO_read>
     d54:	10bfffcc 	andi	r2,r2,65535
     d58:	100b883a 	mov	r5,r2
     d5c:	01000074 	movhi	r4,1
     d60:	21084304 	addi	r4,r4,8460
     d64:	00024ec0 	call	24ec <printf>

	IO_write(HPI_ADDR,0x0508);
     d68:	01414204 	movi	r5,1288
     d6c:	01000084 	movi	r4,2
     d70:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     d74:	0009883a 	mov	r4,zero
     d78:	00003b40 	call	3b4 <IO_read>
     d7c:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     d80:	e0bff80b 	ldhu	r2,-32(fp)
     d84:	100b883a 	mov	r5,r2
     d88:	01000074 	movhi	r4,1
     d8c:	21084e04 	addi	r4,r4,8504
     d90:	00024ec0 	call	24ec <printf>
	while (usb_ctl_val != 0x03)
     d94:	00000206 	br	da0 <main+0x94c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     d98:	00023bc0 	call	23bc <UsbGetRetryCnt>
     d9c:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     da0:	e0bff80b 	ldhu	r2,-32(fp)
     da4:	108000d8 	cmpnei	r2,r2,3
     da8:	103ffb1e 	bne	r2,zero,d98 <_gp+0xfffe4c3c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
     dac:	01000074 	movhi	r4,1
     db0:	21085a04 	addi	r4,r4,8552
     db4:	00025e80 	call	25e8 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
     db8:	0001eb00 	call	1eb0 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     dbc:	00000306 	br	dcc <main+0x978>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
     dc0:	0001eb00 	call	1eb0 <UsbGetHidDesc>
		usleep(10*1000);
     dc4:	0109c404 	movi	r4,10000
     dc8:	000fc540 	call	fc54 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     dcc:	010000c4 	movi	r4,3
     dd0:	00003b40 	call	3b4 <IO_read>
     dd4:	10bfffcc 	andi	r2,r2,65535
     dd8:	1080040c 	andi	r2,r2,16
     ddc:	103ff826 	beq	r2,zero,dc0 <_gp+0xfffe4c64>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     de0:	00023380 	call	2338 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     de4:	01414184 	movi	r5,1286
     de8:	01000084 	movi	r4,2
     dec:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     df0:	0009883a 	mov	r4,zero
     df4:	00003b40 	call	3b4 <IO_read>
     df8:	10bfffcc 	andi	r2,r2,65535
     dfc:	100b883a 	mov	r5,r2
     e00:	01000074 	movhi	r4,1
     e04:	21084304 	addi	r4,r4,8460
     e08:	00024ec0 	call	24ec <printf>

	IO_write(HPI_ADDR,0x0508);
     e0c:	01414204 	movi	r5,1288
     e10:	01000084 	movi	r4,2
     e14:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e18:	0009883a 	mov	r4,zero
     e1c:	00003b40 	call	3b4 <IO_read>
     e20:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     e24:	e0bff80b 	ldhu	r2,-32(fp)
     e28:	100b883a 	mov	r5,r2
     e2c:	01000074 	movhi	r4,1
     e30:	21084e04 	addi	r4,r4,8504
     e34:	00024ec0 	call	24ec <printf>
	while (usb_ctl_val != 0x03)
     e38:	00000206 	br	e44 <main+0x9f0>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e3c:	00023bc0 	call	23bc <UsbGetRetryCnt>
     e40:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     e44:	e0bff80b 	ldhu	r2,-32(fp)
     e48:	108000d8 	cmpnei	r2,r2,3
     e4c:	103ffb1e 	bne	r2,zero,e3c <_gp+0xfffe4ce0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
     e50:	01000074 	movhi	r4,1
     e54:	21086c04 	addi	r4,r4,8624
     e58:	00025e80 	call	25e8 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
     e5c:	0001ff80 	call	1ff8 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e60:	00000306 	br	e70 <main+0xa1c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
     e64:	0001ff80 	call	1ff8 <UsbGetReportDesc>
		usleep(10*1000);
     e68:	0109c404 	movi	r4,10000
     e6c:	000fc540 	call	fc54 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e70:	010000c4 	movi	r4,3
     e74:	00003b40 	call	3b4 <IO_read>
     e78:	10bfffcc 	andi	r2,r2,65535
     e7c:	1080040c 	andi	r2,r2,16
     e80:	103ff826 	beq	r2,zero,e64 <_gp+0xfffe4d08>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e84:	00023380 	call	2338 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e88:	01414184 	movi	r5,1286
     e8c:	01000084 	movi	r4,2
     e90:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e94:	0009883a 	mov	r4,zero
     e98:	00003b40 	call	3b4 <IO_read>
     e9c:	10bfffcc 	andi	r2,r2,65535
     ea0:	100b883a 	mov	r5,r2
     ea4:	01000074 	movhi	r4,1
     ea8:	21088004 	addi	r4,r4,8704
     eac:	00024ec0 	call	24ec <printf>

	IO_write(HPI_ADDR,0x0508);
     eb0:	01414204 	movi	r5,1288
     eb4:	01000084 	movi	r4,2
     eb8:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     ebc:	0009883a 	mov	r4,zero
     ec0:	00003b40 	call	3b4 <IO_read>
     ec4:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
     ec8:	e0bff80b 	ldhu	r2,-32(fp)
     ecc:	100b883a 	mov	r5,r2
     ed0:	01000074 	movhi	r4,1
     ed4:	21088c04 	addi	r4,r4,8752
     ed8:	00024ec0 	call	24ec <printf>
	while (usb_ctl_val != 0x03)
     edc:	00000206 	br	ee8 <main+0xa94>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ee0:	00023bc0 	call	23bc <UsbGetRetryCnt>
     ee4:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     ee8:	e0bff80b 	ldhu	r2,-32(fp)
     eec:	108000d8 	cmpnei	r2,r2,3
     ef0:	103ffb1e 	bne	r2,zero,ee0 <_gp+0xfffe4d84>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
     ef4:	01000074 	movhi	r4,1
     ef8:	21089804 	addi	r4,r4,8800
     efc:	00025e80 	call	25e8 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
     f00:	0109c404 	movi	r4,10000
     f04:	000fc540 	call	fc54 <usleep>
	while(1)
	{
		toggle++;
     f08:	e0bff883 	ldbu	r2,-30(fp)
     f0c:	10800044 	addi	r2,r2,1
     f10:	e0bff885 	stb	r2,-30(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
     f14:	01414004 	movi	r5,1280
     f18:	01000084 	movi	r4,2
     f1c:	000031c0 	call	31c <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
     f20:	01414704 	movi	r5,1308
     f24:	0009883a 	mov	r4,zero
     f28:	000031c0 	call	31c <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
     f2c:	e0bffe83 	ldbu	r2,-6(fp)
     f30:	108003cc 	andi	r2,r2,15
     f34:	100b883a 	mov	r5,r2
     f38:	0009883a 	mov	r4,zero
     f3c:	000031c0 	call	31c <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     f40:	0140a444 	movi	r5,657
     f44:	0009883a 	mov	r4,zero
     f48:	000031c0 	call	31c <IO_write>
		if(toggle%2)
     f4c:	e0bff883 	ldbu	r2,-30(fp)
     f50:	1080004c 	andi	r2,r2,1
     f54:	10803fcc 	andi	r2,r2,255
     f58:	10000426 	beq	r2,zero,f6c <main+0xb18>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
     f5c:	01400044 	movi	r5,1
     f60:	0009883a 	mov	r4,zero
     f64:	000031c0 	call	31c <IO_write>
     f68:	00000306 	br	f78 <main+0xb24>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
     f6c:	01401044 	movi	r5,65
     f70:	0009883a 	mov	r4,zero
     f74:	000031c0 	call	31c <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
     f78:	014004c4 	movi	r5,19
     f7c:	0009883a 	mov	r4,zero
     f80:	000031c0 	call	31c <IO_write>
		IO_write(HPI_DATA,0x0000);//a
     f84:	000b883a 	mov	r5,zero
     f88:	0009883a 	mov	r4,zero
     f8c:	000031c0 	call	31c <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     f90:	01414004 	movi	r5,1280
     f94:	01006c04 	movi	r4,432
     f98:	00013400 	call	1340 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f9c:	00002406 	br	1030 <main+0xbdc>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
     fa0:	01414004 	movi	r5,1280
     fa4:	01000084 	movi	r4,2
     fa8:	000031c0 	call	31c <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
     fac:	01414704 	movi	r5,1308
     fb0:	0009883a 	mov	r4,zero
     fb4:	000031c0 	call	31c <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
     fb8:	e0bffe83 	ldbu	r2,-6(fp)
     fbc:	108003cc 	andi	r2,r2,15
     fc0:	100b883a 	mov	r5,r2
     fc4:	0009883a 	mov	r4,zero
     fc8:	000031c0 	call	31c <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     fcc:	0140a444 	movi	r5,657
     fd0:	0009883a 	mov	r4,zero
     fd4:	000031c0 	call	31c <IO_write>
			if(toggle%2)
     fd8:	e0bff883 	ldbu	r2,-30(fp)
     fdc:	1080004c 	andi	r2,r2,1
     fe0:	10803fcc 	andi	r2,r2,255
     fe4:	10000426 	beq	r2,zero,ff8 <main+0xba4>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
     fe8:	01400044 	movi	r5,1
     fec:	0009883a 	mov	r4,zero
     ff0:	000031c0 	call	31c <IO_write>
     ff4:	00000306 	br	1004 <main+0xbb0>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
     ff8:	01401044 	movi	r5,65
     ffc:	0009883a 	mov	r4,zero
    1000:	000031c0 	call	31c <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
    1004:	014004c4 	movi	r5,19
    1008:	0009883a 	mov	r4,zero
    100c:	000031c0 	call	31c <IO_write>
			IO_write(HPI_DATA,0x0000);//
    1010:	000b883a 	mov	r5,zero
    1014:	0009883a 	mov	r4,zero
    1018:	000031c0 	call	31c <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    101c:	01414004 	movi	r5,1280
    1020:	01006c04 	movi	r4,432
    1024:	00013400 	call	1340 <UsbWrite>
			usleep(10*1000);
    1028:	0109c404 	movi	r4,10000
    102c:	000fc540 	call	fc54 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1030:	010000c4 	movi	r4,3
    1034:	00003b40 	call	3b4 <IO_read>
    1038:	10bfffcc 	andi	r2,r2,65535
    103c:	1080040c 	andi	r2,r2,16
    1040:	103fd726 	beq	r2,zero,fa0 <_gp+0xfffe4e44>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
    1044:	00023380 	call	2338 <UsbWaitTDListDone>
    1048:	e0bff80d 	sth	r2,-32(fp)


		//printf("\njohn: %04x %04x %04x", UsbRead(0x051e), UsbRead(0x051d), UsbRead(0x051c));

		/*--- Button press ---*/
		if (UsbRead(0x051C) & 0x01){
    104c:	01014704 	movi	r4,1308
    1050:	00013980 	call	1398 <UsbRead>
    1054:	10bfffcc 	andi	r2,r2,65535
    1058:	1080004c 	andi	r2,r2,1
    105c:	10000426 	beq	r2,zero,1070 <main+0xc1c>
			printf("Left click!\n");
    1060:	01000074 	movhi	r4,1
    1064:	2108ac04 	addi	r4,r4,8880
    1068:	00025e80 	call	25e8 <puts>
    106c:	00001106 	br	10b4 <main+0xc60>
		}
		else if (UsbRead(0x051C) & 0x02){
    1070:	01014704 	movi	r4,1308
    1074:	00013980 	call	1398 <UsbRead>
    1078:	10bfffcc 	andi	r2,r2,65535
    107c:	1080008c 	andi	r2,r2,2
    1080:	10000426 	beq	r2,zero,1094 <main+0xc40>
			printf("Right click!\n");
    1084:	01000074 	movhi	r4,1
    1088:	2108af04 	addi	r4,r4,8892
    108c:	00025e80 	call	25e8 <puts>
    1090:	00000806 	br	10b4 <main+0xc60>
		}
		else if (UsbRead(0x051C) & 0x04){
    1094:	01014704 	movi	r4,1308
    1098:	00013980 	call	1398 <UsbRead>
    109c:	10bfffcc 	andi	r2,r2,65535
    10a0:	1080010c 	andi	r2,r2,4
    10a4:	10000326 	beq	r2,zero,10b4 <main+0xc60>
			printf("Middle click!\n");
    10a8:	01000074 	movhi	r4,1
    10ac:	2108b304 	addi	r4,r4,8908
    10b0:	00025e80 	call	25e8 <puts>
		}

		/*--- Coordinate output ---*/
		signed char xread = (UsbRead(0x051D) & 0xFF00) >> 8;
    10b4:	01014744 	movi	r4,1309
    10b8:	00013980 	call	1398 <UsbRead>
    10bc:	10bfffcc 	andi	r2,r2,65535
    10c0:	1004d23a 	srli	r2,r2,8
    10c4:	e0bffec5 	stb	r2,-5(fp)
		signed char yread = (UsbRead(0x051E) & 0xFF);
    10c8:	01014784 	movi	r4,1310
    10cc:	00013980 	call	1398 <UsbRead>
    10d0:	e0bfff05 	stb	r2,-4(fp)

//		printf("Current read: %02x %02x\n", xread, yread);

		/*--- Velocity ---*/

		if (currXVel != xread) {
    10d4:	e0fffa87 	ldb	r3,-22(fp)
    10d8:	e0bffec7 	ldb	r2,-5(fp)
    10dc:	18800326 	beq	r3,r2,10ec <main+0xc98>
//			printf("x different!\n");
			dx = xread;
    10e0:	e0bffec3 	ldbu	r2,-5(fp)
    10e4:	e0bffa05 	stb	r2,-24(fp)
    10e8:	00000106 	br	10f0 <main+0xc9c>
		}
		else
			dx = 0;
    10ec:	e03ffa05 	stb	zero,-24(fp)

		if (currYVel != yread) {
    10f0:	e0fffac7 	ldb	r3,-21(fp)
    10f4:	e0bfff07 	ldb	r2,-4(fp)
    10f8:	18800426 	beq	r3,r2,110c <main+0xcb8>
//			printf("y different!\n");
			dy = yread*-1;
    10fc:	e0bfff03 	ldbu	r2,-4(fp)
    1100:	0085c83a 	sub	r2,zero,r2
    1104:	e0bffa45 	stb	r2,-23(fp)
    1108:	00000106 	br	1110 <main+0xcbc>
		}
		else
			dy = 0;
    110c:	e03ffa45 	stb	zero,-23(fp)

		/*--- Position ---*/

		if(px+dx >= 639)
    1110:	e0fff90b 	ldhu	r3,-28(fp)
    1114:	e0bffa07 	ldb	r2,-24(fp)
    1118:	1885883a 	add	r2,r3,r2
    111c:	10809fd0 	cmplti	r2,r2,639
    1120:	1000031e 	bne	r2,zero,1130 <main+0xcdc>
			px = 639;
    1124:	00809fc4 	movi	r2,639
    1128:	e0bff90d 	sth	r2,-28(fp)
    112c:	00000a06 	br	1158 <main+0xd04>
		else if (px+dx <= 0)
    1130:	e0fff90b 	ldhu	r3,-28(fp)
    1134:	e0bffa07 	ldb	r2,-24(fp)
    1138:	1885883a 	add	r2,r3,r2
    113c:	00800216 	blt	zero,r2,1148 <main+0xcf4>
			px = 0;
    1140:	e03ff90d 	sth	zero,-28(fp)
    1144:	00000406 	br	1158 <main+0xd04>
		else
			px = px+dx;
    1148:	e0fffa07 	ldb	r3,-24(fp)
    114c:	e0bff90b 	ldhu	r2,-28(fp)
    1150:	1885883a 	add	r2,r3,r2
    1154:	e0bff90d 	sth	r2,-28(fp)

		if(py-dy >= 479)
    1158:	e0fff98b 	ldhu	r3,-26(fp)
    115c:	e0bffa47 	ldb	r2,-23(fp)
    1160:	1885c83a 	sub	r2,r3,r2
    1164:	108077d0 	cmplti	r2,r2,479
    1168:	1000031e 	bne	r2,zero,1178 <main+0xd24>
			py = 479;
    116c:	008077c4 	movi	r2,479
    1170:	e0bff98d 	sth	r2,-26(fp)
    1174:	00000a06 	br	11a0 <main+0xd4c>
		else if (py-dy <= 0)
    1178:	e0fff98b 	ldhu	r3,-26(fp)
    117c:	e0bffa47 	ldb	r2,-23(fp)
    1180:	1885c83a 	sub	r2,r3,r2
    1184:	00800216 	blt	zero,r2,1190 <main+0xd3c>
			py = 0;
    1188:	e03ff98d 	sth	zero,-26(fp)
    118c:	00000406 	br	11a0 <main+0xd4c>
		else
			py = py-dy;
    1190:	e0bffa47 	ldb	r2,-23(fp)
    1194:	e0fff98b 	ldhu	r3,-26(fp)
    1198:	1885c83a 	sub	r2,r3,r2
    119c:	e0bff98d 	sth	r2,-26(fp)

		currXVel = xread;
    11a0:	e0bffec3 	ldbu	r2,-5(fp)
    11a4:	e0bffa85 	stb	r2,-22(fp)
		currYVel = yread;
    11a8:	e0bfff03 	ldbu	r2,-4(fp)
    11ac:	e0bffac5 	stb	r2,-21(fp)
//		scanf("%s", str1);
//		char c;
//		printf("Enter character: ");
//		c = getchar();

		printf("\n[MOUSE XY]:%d, %d", px, py);
    11b0:	e0bff90b 	ldhu	r2,-28(fp)
    11b4:	e0fff98b 	ldhu	r3,-26(fp)
    11b8:	180d883a 	mov	r6,r3
    11bc:	100b883a 	mov	r5,r2
    11c0:	01000074 	movhi	r4,1
    11c4:	2108b704 	addi	r4,r4,8924
    11c8:	00024ec0 	call	24ec <printf>


		/*--- Sending XY Pos to PIOs ---*/
//		*keycode_base = keycode & 0xff;
		*mouse_x_base = (px+145) & 0x0fff;
    11cc:	008000b4 	movhi	r2,2
    11d0:	10841c04 	addi	r2,r2,4208
    11d4:	e0fff90b 	ldhu	r3,-28(fp)
    11d8:	18c02444 	addi	r3,r3,145
    11dc:	18c3ffcc 	andi	r3,r3,4095
    11e0:	10c00015 	stw	r3,0(r2)
		*mouse_y_base = (py+38) & 0x0fff;
    11e4:	008000b4 	movhi	r2,2
    11e8:	10841804 	addi	r2,r2,4192
    11ec:	e0fff98b 	ldhu	r3,-26(fp)
    11f0:	18c00984 	addi	r3,r3,38
    11f4:	18c3ffcc 	andi	r3,r3,4095
    11f8:	10c00015 	stw	r3,0(r2)


		usleep(200);//usleep(5000);
    11fc:	01003204 	movi	r4,200
    1200:	000fc540 	call	fc54 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
    1204:	d0a6cb0b 	ldhu	r2,-25812(gp)
    1208:	10bfffcc 	andi	r2,r2,65535
    120c:	1009883a 	mov	r4,r2
    1210:	00013980 	call	1398 <UsbRead>
    1214:	e0bff80d 	sth	r2,-32(fp)

		if(!(usb_ctl_val & no_device))
    1218:	d0a6cb8b 	ldhu	r2,-25810(gp)
    121c:	e0fff80b 	ldhu	r3,-32(fp)
    1220:	1884703a 	and	r2,r3,r2
    1224:	10bfffcc 	andi	r2,r2,65535
    1228:	10003f1e 	bne	r2,zero,1328 <main+0xed4>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
    122c:	e03ff8c5 	stb	zero,-29(fp)
    1230:	00000f06 	br	1270 <main+0xe1c>
			{
				usleep(5*1000);
    1234:	0104e204 	movi	r4,5000
    1238:	000fc540 	call	fc54 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
    123c:	d0a6cb0b 	ldhu	r2,-25812(gp)
    1240:	10bfffcc 	andi	r2,r2,65535
    1244:	1009883a 	mov	r4,r2
    1248:	00013980 	call	1398 <UsbRead>
    124c:	e0bff80d 	sth	r2,-32(fp)
				if(usb_ctl_val & no_device) break;
    1250:	d0a6cb8b 	ldhu	r2,-25810(gp)
    1254:	e0fff80b 	ldhu	r3,-32(fp)
    1258:	1884703a 	and	r2,r3,r2
    125c:	10bfffcc 	andi	r2,r2,65535
    1260:	1000071e 	bne	r2,zero,1280 <main+0xe2c>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
    1264:	e0bff8c3 	ldbu	r2,-29(fp)
    1268:	10800044 	addi	r2,r2,1
    126c:	e0bff8c5 	stb	r2,-29(fp)
    1270:	e0bff8c3 	ldbu	r2,-29(fp)
    1274:	108001f0 	cmpltui	r2,r2,7
    1278:	103fee1e 	bne	r2,zero,1234 <_gp+0xfffe50d8>
    127c:	00000106 	br	1284 <main+0xe30>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
    1280:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
    1284:	d0a6cb8b 	ldhu	r2,-25810(gp)
    1288:	e0fff80b 	ldhu	r3,-32(fp)
    128c:	1884703a 	and	r2,r3,r2
    1290:	10bfffcc 	andi	r2,r2,65535
    1294:	1000241e 	bne	r2,zero,1328 <main+0xed4>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
    1298:	01000074 	movhi	r4,1
    129c:	2108bc04 	addi	r4,r4,8944
    12a0:	00025e80 	call	25e8 <puts>
				printf("[INFO]: please insert again!!! \n");
    12a4:	01000074 	movhi	r4,1
    12a8:	2108c704 	addi	r4,r4,8988
    12ac:	00025e80 	call	25e8 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
    12b0:	00001d06 	br	1328 <main+0xed4>
		{

			usb_ctl_val = UsbRead(ctl_reg);
    12b4:	d0a6cb0b 	ldhu	r2,-25812(gp)
    12b8:	10bfffcc 	andi	r2,r2,65535
    12bc:	1009883a 	mov	r4,r2
    12c0:	00013980 	call	1398 <UsbRead>
    12c4:	e0bff80d 	sth	r2,-32(fp)
			usleep(5*1000);
    12c8:	0104e204 	movi	r4,5000
    12cc:	000fc540 	call	fc54 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
    12d0:	d0a6cb0b 	ldhu	r2,-25812(gp)
    12d4:	10bfffcc 	andi	r2,r2,65535
    12d8:	1009883a 	mov	r4,r2
    12dc:	00013980 	call	1398 <UsbRead>
    12e0:	e0bff80d 	sth	r2,-32(fp)
			usleep(5*1000);
    12e4:	0104e204 	movi	r4,5000
    12e8:	000fc540 	call	fc54 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
    12ec:	d0a6cb0b 	ldhu	r2,-25812(gp)
    12f0:	10bfffcc 	andi	r2,r2,65535
    12f4:	1009883a 	mov	r4,r2
    12f8:	00013980 	call	1398 <UsbRead>
    12fc:	e0bff80d 	sth	r2,-32(fp)
			usleep(5*1000);
    1300:	0104e204 	movi	r4,5000
    1304:	000fc540 	call	fc54 <usleep>

			if(usb_ctl_val & no_device)
    1308:	d0a6cb8b 	ldhu	r2,-25810(gp)
    130c:	e0fff80b 	ldhu	r3,-32(fp)
    1310:	1884703a 	and	r2,r3,r2
    1314:	10bfffcc 	andi	r2,r2,65535
    1318:	10000126 	beq	r2,zero,1320 <main+0xecc>
				goto USB_HOT_PLUG;
    131c:	003c6106 	br	4a4 <_gp+0xfffe4348>

			usleep(200);
    1320:	01003204 	movi	r4,200
    1324:	000fc540 	call	fc54 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
    1328:	d0a6cb8b 	ldhu	r2,-25810(gp)
    132c:	e0fff80b 	ldhu	r3,-32(fp)
    1330:	1884703a 	and	r2,r3,r2
    1334:	10bfffcc 	andi	r2,r2,65535
    1338:	103fde26 	beq	r2,zero,12b4 <_gp+0xfffe5158>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
    133c:	003ef206 	br	f08 <_gp+0xfffe4dac>

00001340 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    1340:	defffc04 	addi	sp,sp,-16
    1344:	dfc00315 	stw	ra,12(sp)
    1348:	df000215 	stw	fp,8(sp)
    134c:	df000204 	addi	fp,sp,8
    1350:	2007883a 	mov	r3,r4
    1354:	2805883a 	mov	r2,r5
    1358:	e0fffe0d 	sth	r3,-8(fp)
    135c:	e0bfff0d 	sth	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//

	IO_write(0b10, Address);
    1360:	e0bffe0b 	ldhu	r2,-8(fp)
    1364:	100b883a 	mov	r5,r2
    1368:	01000084 	movi	r4,2
    136c:	000031c0 	call	31c <IO_write>
	IO_write(0b00, Data);
    1370:	e0bfff0b 	ldhu	r2,-4(fp)
    1374:	100b883a 	mov	r5,r2
    1378:	0009883a 	mov	r4,zero
    137c:	000031c0 	call	31c <IO_write>
}
    1380:	0001883a 	nop
    1384:	e037883a 	mov	sp,fp
    1388:	dfc00117 	ldw	ra,4(sp)
    138c:	df000017 	ldw	fp,0(sp)
    1390:	dec00204 	addi	sp,sp,8
    1394:	f800283a 	ret

00001398 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    1398:	defffc04 	addi	sp,sp,-16
    139c:	dfc00315 	stw	ra,12(sp)
    13a0:	df000215 	stw	fp,8(sp)
    13a4:	df000204 	addi	fp,sp,8
    13a8:	2005883a 	mov	r2,r4
    13ac:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(0b10, Address);
    13b0:	e0bfff0b 	ldhu	r2,-4(fp)
    13b4:	100b883a 	mov	r5,r2
    13b8:	01000084 	movi	r4,2
    13bc:	000031c0 	call	31c <IO_write>
	alt_u16 out = IO_read(0b00);
    13c0:	0009883a 	mov	r4,zero
    13c4:	00003b40 	call	3b4 <IO_read>
    13c8:	e0bffe0d 	sth	r2,-8(fp)
	return out;
    13cc:	e0bffe0b 	ldhu	r2,-8(fp)
}
    13d0:	e037883a 	mov	sp,fp
    13d4:	dfc00117 	ldw	ra,4(sp)
    13d8:	df000017 	ldw	fp,0(sp)
    13dc:	dec00204 	addi	sp,sp,8
    13e0:	f800283a 	ret

000013e4 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    13e4:	defffe04 	addi	sp,sp,-8
    13e8:	dfc00115 	stw	ra,4(sp)
    13ec:	df000015 	stw	fp,0(sp)
    13f0:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    13f4:	017e9414 	movui	r5,64080
    13f8:	01000044 	movi	r4,1
    13fc:	000031c0 	call	31c <IO_write>
	usleep(100000);
    1400:	010000b4 	movhi	r4,2
    1404:	2121a804 	addi	r4,r4,-31072
    1408:	000fc540 	call	fc54 <usleep>
	printf("[USB INIT]:reset finished!\n");
    140c:	01000074 	movhi	r4,1
    1410:	2108cf04 	addi	r4,r4,9020
    1414:	00025e80 	call	25e8 <puts>

	usleep(500000);
    1418:	01000234 	movhi	r4,8
    141c:	21284804 	addi	r4,r4,-24288
    1420:	000fc540 	call	fc54 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    1424:	01000074 	movhi	r4,1
    1428:	2108d604 	addi	r4,r4,9048
    142c:	00025e80 	call	25e8 <puts>
	IO_read(HPI_MAILBOX);
    1430:	01000044 	movi	r4,1
    1434:	00003b40 	call	3b4 <IO_read>
	IO_read(HPI_STATUS);
    1438:	010000c4 	movi	r4,3
    143c:	00003b40 	call	3b4 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    1440:	01005104 	movi	r4,324
    1444:	00013980 	call	1398 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    1448:	000b883a 	mov	r5,zero
    144c:	01005104 	movi	r4,324
    1450:	00013400 	call	1340 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    1454:	01005204 	movi	r4,328
    1458:	00013980 	call	1398 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    145c:	000b883a 	mov	r5,zero
    1460:	01005204 	movi	r4,328
    1464:	00013400 	call	1340 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    1468:	017fffd4 	movui	r5,65535
    146c:	01302414 	movui	r4,49296
    1470:	00013400 	call	1340 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    1474:	017fffd4 	movui	r5,65535
    1478:	01302c14 	movui	r4,49328
    147c:	00013400 	call	1340 <UsbWrite>
}
    1480:	0001883a 	nop
    1484:	e037883a 	mov	sp,fp
    1488:	dfc00117 	ldw	ra,4(sp)
    148c:	df000017 	ldw	fp,0(sp)
    1490:	dec00204 	addi	sp,sp,8
    1494:	f800283a 	ret

00001498 <UsbSetAddress>:


void UsbSetAddress()
{
    1498:	defffe04 	addi	sp,sp,-8
    149c:	dfc00115 	stw	ra,4(sp)
    14a0:	df000015 	stw	fp,0(sp)
    14a4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    14a8:	01414004 	movi	r5,1280
    14ac:	01000084 	movi	r4,2
    14b0:	000031c0 	call	31c <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    14b4:	01414304 	movi	r5,1292
    14b8:	0009883a 	mov	r4,zero
    14bc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    14c0:	01400204 	movi	r5,8
    14c4:	0009883a 	mov	r4,zero
    14c8:	000031c0 	call	31c <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    14cc:	01403404 	movi	r5,208
    14d0:	0009883a 	mov	r4,zero
    14d4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    14d8:	01400044 	movi	r5,1
    14dc:	0009883a 	mov	r4,zero
    14e0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    14e4:	014004c4 	movi	r5,19
    14e8:	0009883a 	mov	r4,zero
    14ec:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    14f0:	01414504 	movi	r5,1300
    14f4:	0009883a 	mov	r4,zero
    14f8:	000031c0 	call	31c <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    14fc:	01414004 	movi	r5,1280
    1500:	0009883a 	mov	r4,zero
    1504:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0002);
    1508:	01400084 	movi	r5,2
    150c:	0009883a 	mov	r4,zero
    1510:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1514:	000b883a 	mov	r5,zero
    1518:	0009883a 	mov	r4,zero
    151c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1520:	000b883a 	mov	r5,zero
    1524:	0009883a 	mov	r4,zero
    1528:	000031c0 	call	31c <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    152c:	000b883a 	mov	r5,zero
    1530:	0009883a 	mov	r4,zero
    1534:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//
    1538:	000b883a 	mov	r5,zero
    153c:	0009883a 	mov	r4,zero
    1540:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0090);//
    1544:	01402404 	movi	r5,144
    1548:	0009883a 	mov	r4,zero
    154c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);
    1550:	01401044 	movi	r5,65
    1554:	0009883a 	mov	r4,zero
    1558:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    155c:	014004c4 	movi	r5,19
    1560:	0009883a 	mov	r4,zero
    1564:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1568:	000b883a 	mov	r5,zero
    156c:	0009883a 	mov	r4,zero
    1570:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1574:	01414004 	movi	r5,1280
    1578:	01006c04 	movi	r4,432
    157c:	00013400 	call	1340 <UsbWrite>
}
    1580:	0001883a 	nop
    1584:	e037883a 	mov	sp,fp
    1588:	dfc00117 	ldw	ra,4(sp)
    158c:	df000017 	ldw	fp,0(sp)
    1590:	dec00204 	addi	sp,sp,8
    1594:	f800283a 	ret

00001598 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    1598:	defffe04 	addi	sp,sp,-8
    159c:	dfc00115 	stw	ra,4(sp)
    15a0:	df000015 	stw	fp,0(sp)
    15a4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    15a8:	01414004 	movi	r5,1280
    15ac:	01000084 	movi	r4,2
    15b0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    15b4:	01414304 	movi	r5,1292
    15b8:	0009883a 	mov	r4,zero
    15bc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    15c0:	01400204 	movi	r5,8
    15c4:	0009883a 	mov	r4,zero
    15c8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    15cc:	0140b404 	movi	r5,720
    15d0:	0009883a 	mov	r4,zero
    15d4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    15d8:	01400044 	movi	r5,1
    15dc:	0009883a 	mov	r4,zero
    15e0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    15e4:	014004c4 	movi	r5,19
    15e8:	0009883a 	mov	r4,zero
    15ec:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    15f0:	01414504 	movi	r5,1300
    15f4:	0009883a 	mov	r4,zero
    15f8:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    15fc:	0141a004 	movi	r5,1664
    1600:	0009883a 	mov	r4,zero
    1604:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    1608:	01404004 	movi	r5,256
    160c:	0009883a 	mov	r4,zero
    1610:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1614:	000b883a 	mov	r5,zero
    1618:	0009883a 	mov	r4,zero
    161c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);
    1620:	01400204 	movi	r5,8
    1624:	0009883a 	mov	r4,zero
    1628:	000031c0 	call	31c <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    162c:	01414b04 	movi	r5,1324
    1630:	0009883a 	mov	r4,zero
    1634:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//
    1638:	01400204 	movi	r5,8
    163c:	0009883a 	mov	r4,zero
    1640:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//
    1644:	0140a404 	movi	r5,656
    1648:	0009883a 	mov	r4,zero
    164c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);
    1650:	01401044 	movi	r5,65
    1654:	0009883a 	mov	r4,zero
    1658:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    165c:	014004c4 	movi	r5,19
    1660:	0009883a 	mov	r4,zero
    1664:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);
    1668:	01414804 	movi	r5,1312
    166c:	0009883a 	mov	r4,zero
    1670:	000031c0 	call	31c <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    1674:	000b883a 	mov	r5,zero
    1678:	0009883a 	mov	r4,zero
    167c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1680:	000b883a 	mov	r5,zero
    1684:	0009883a 	mov	r4,zero
    1688:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    168c:	01408404 	movi	r5,528
    1690:	0009883a 	mov	r4,zero
    1694:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);
    1698:	01401044 	movi	r5,65
    169c:	0009883a 	mov	r4,zero
    16a0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    16a4:	014004c4 	movi	r5,19
    16a8:	0009883a 	mov	r4,zero
    16ac:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    16b0:	000b883a 	mov	r5,zero
    16b4:	0009883a 	mov	r4,zero
    16b8:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    16bc:	01414004 	movi	r5,1280
    16c0:	01006c04 	movi	r4,432
    16c4:	00013400 	call	1340 <UsbWrite>
}
    16c8:	0001883a 	nop
    16cc:	e037883a 	mov	sp,fp
    16d0:	dfc00117 	ldw	ra,4(sp)
    16d4:	df000017 	ldw	fp,0(sp)
    16d8:	dec00204 	addi	sp,sp,8
    16dc:	f800283a 	ret

000016e0 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    16e0:	defffe04 	addi	sp,sp,-8
    16e4:	dfc00115 	stw	ra,4(sp)
    16e8:	df000015 	stw	fp,0(sp)
    16ec:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    16f0:	01414004 	movi	r5,1280
    16f4:	01000084 	movi	r4,2
    16f8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    16fc:	01414304 	movi	r5,1292
    1700:	0009883a 	mov	r4,zero
    1704:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1708:	01400204 	movi	r5,8
    170c:	0009883a 	mov	r4,zero
    1710:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1714:	0140b404 	movi	r5,720
    1718:	0009883a 	mov	r4,zero
    171c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    1720:	01400044 	movi	r5,1
    1724:	0009883a 	mov	r4,zero
    1728:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    172c:	014004c4 	movi	r5,19
    1730:	0009883a 	mov	r4,zero
    1734:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1738:	01414504 	movi	r5,1300
    173c:	0009883a 	mov	r4,zero
    1740:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1744:	0141a004 	movi	r5,1664
    1748:	0009883a 	mov	r4,zero
    174c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    1750:	01404004 	movi	r5,256
    1754:	0009883a 	mov	r4,zero
    1758:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    175c:	000b883a 	mov	r5,zero
    1760:	0009883a 	mov	r4,zero
    1764:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    1768:	01400484 	movi	r5,18
    176c:	0009883a 	mov	r4,zero
    1770:	000031c0 	call	31c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1774:	01415104 	movi	r5,1348
    1778:	0009883a 	mov	r4,zero
    177c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1780:	01400204 	movi	r5,8
    1784:	0009883a 	mov	r4,zero
    1788:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    178c:	0140a404 	movi	r5,656
    1790:	0009883a 	mov	r4,zero
    1794:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1798:	01401044 	movi	r5,65
    179c:	0009883a 	mov	r4,zero
    17a0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    17a4:	014004c4 	movi	r5,19
    17a8:	0009883a 	mov	r4,zero
    17ac:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    17b0:	01414804 	movi	r5,1312
    17b4:	0009883a 	mov	r4,zero
    17b8:	000031c0 	call	31c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    17bc:	01415304 	movi	r5,1356
    17c0:	0009883a 	mov	r4,zero
    17c4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    17c8:	01400204 	movi	r5,8
    17cc:	0009883a 	mov	r4,zero
    17d0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    17d4:	0140a404 	movi	r5,656
    17d8:	0009883a 	mov	r4,zero
    17dc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    17e0:	01400044 	movi	r5,1
    17e4:	0009883a 	mov	r4,zero
    17e8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    17ec:	014004c4 	movi	r5,19
    17f0:	0009883a 	mov	r4,zero
    17f4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    17f8:	01414b04 	movi	r5,1324
    17fc:	0009883a 	mov	r4,zero
    1800:	000031c0 	call	31c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    1804:	01415504 	movi	r5,1364
    1808:	0009883a 	mov	r4,zero
    180c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    1810:	01400084 	movi	r5,2
    1814:	0009883a 	mov	r4,zero
    1818:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    181c:	0140a404 	movi	r5,656
    1820:	0009883a 	mov	r4,zero
    1824:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1828:	01401044 	movi	r5,65
    182c:	0009883a 	mov	r4,zero
    1830:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1834:	014004c4 	movi	r5,19
    1838:	0009883a 	mov	r4,zero
    183c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1840:	01414e04 	movi	r5,1336
    1844:	0009883a 	mov	r4,zero
    1848:	000031c0 	call	31c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    184c:	000b883a 	mov	r5,zero
    1850:	0009883a 	mov	r4,zero
    1854:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1858:	000b883a 	mov	r5,zero
    185c:	0009883a 	mov	r4,zero
    1860:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    1864:	01408404 	movi	r5,528
    1868:	0009883a 	mov	r4,zero
    186c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    1870:	01401044 	movi	r5,65
    1874:	0009883a 	mov	r4,zero
    1878:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    187c:	014004c4 	movi	r5,19
    1880:	0009883a 	mov	r4,zero
    1884:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1888:	000b883a 	mov	r5,zero
    188c:	0009883a 	mov	r4,zero
    1890:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1894:	01414004 	movi	r5,1280
    1898:	01006c04 	movi	r4,432
    189c:	00013400 	call	1340 <UsbWrite>
}
    18a0:	0001883a 	nop
    18a4:	e037883a 	mov	sp,fp
    18a8:	dfc00117 	ldw	ra,4(sp)
    18ac:	df000017 	ldw	fp,0(sp)
    18b0:	dec00204 	addi	sp,sp,8
    18b4:	f800283a 	ret

000018b8 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    18b8:	defffe04 	addi	sp,sp,-8
    18bc:	dfc00115 	stw	ra,4(sp)
    18c0:	df000015 	stw	fp,0(sp)
    18c4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    18c8:	01414004 	movi	r5,1280
    18cc:	01000084 	movi	r4,2
    18d0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    18d4:	01414304 	movi	r5,1292
    18d8:	0009883a 	mov	r4,zero
    18dc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    18e0:	01400204 	movi	r5,8
    18e4:	0009883a 	mov	r4,zero
    18e8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    18ec:	0140b404 	movi	r5,720
    18f0:	0009883a 	mov	r4,zero
    18f4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    18f8:	01400044 	movi	r5,1
    18fc:	0009883a 	mov	r4,zero
    1900:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1904:	014004c4 	movi	r5,19
    1908:	0009883a 	mov	r4,zero
    190c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1910:	01414504 	movi	r5,1300
    1914:	0009883a 	mov	r4,zero
    1918:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    191c:	0141a004 	movi	r5,1664
    1920:	0009883a 	mov	r4,zero
    1924:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1928:	01408004 	movi	r5,512
    192c:	0009883a 	mov	r4,zero
    1930:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1934:	000b883a 	mov	r5,zero
    1938:	0009883a 	mov	r4,zero
    193c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    1940:	01400244 	movi	r5,9
    1944:	0009883a 	mov	r4,zero
    1948:	000031c0 	call	31c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    194c:	01415104 	movi	r5,1348
    1950:	0009883a 	mov	r4,zero
    1954:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1958:	01400204 	movi	r5,8
    195c:	0009883a 	mov	r4,zero
    1960:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1964:	0140a404 	movi	r5,656
    1968:	0009883a 	mov	r4,zero
    196c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1970:	01401044 	movi	r5,65
    1974:	0009883a 	mov	r4,zero
    1978:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    197c:	014004c4 	movi	r5,19
    1980:	0009883a 	mov	r4,zero
    1984:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1988:	01414804 	movi	r5,1312
    198c:	0009883a 	mov	r4,zero
    1990:	000031c0 	call	31c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1994:	01415304 	movi	r5,1356
    1998:	0009883a 	mov	r4,zero
    199c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    19a0:	01400044 	movi	r5,1
    19a4:	0009883a 	mov	r4,zero
    19a8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    19ac:	0140a404 	movi	r5,656
    19b0:	0009883a 	mov	r4,zero
    19b4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    19b8:	01400044 	movi	r5,1
    19bc:	0009883a 	mov	r4,zero
    19c0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    19c4:	014004c4 	movi	r5,19
    19c8:	0009883a 	mov	r4,zero
    19cc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    19d0:	01414b04 	movi	r5,1324
    19d4:	0009883a 	mov	r4,zero
    19d8:	000031c0 	call	31c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    19dc:	000b883a 	mov	r5,zero
    19e0:	0009883a 	mov	r4,zero
    19e4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    19e8:	000b883a 	mov	r5,zero
    19ec:	0009883a 	mov	r4,zero
    19f0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    19f4:	01408404 	movi	r5,528
    19f8:	0009883a 	mov	r4,zero
    19fc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1a00:	01401044 	movi	r5,65
    1a04:	0009883a 	mov	r4,zero
    1a08:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1a0c:	014004c4 	movi	r5,19
    1a10:	0009883a 	mov	r4,zero
    1a14:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    1a18:	000b883a 	mov	r5,zero
    1a1c:	0009883a 	mov	r4,zero
    1a20:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1a24:	01414004 	movi	r5,1280
    1a28:	01006c04 	movi	r4,432
    1a2c:	00013400 	call	1340 <UsbWrite>
}
    1a30:	0001883a 	nop
    1a34:	e037883a 	mov	sp,fp
    1a38:	dfc00117 	ldw	ra,4(sp)
    1a3c:	df000017 	ldw	fp,0(sp)
    1a40:	dec00204 	addi	sp,sp,8
    1a44:	f800283a 	ret

00001a48 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    1a48:	defffe04 	addi	sp,sp,-8
    1a4c:	dfc00115 	stw	ra,4(sp)
    1a50:	df000015 	stw	fp,0(sp)
    1a54:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1a58:	01414004 	movi	r5,1280
    1a5c:	01000084 	movi	r4,2
    1a60:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    1a64:	01414304 	movi	r5,1292
    1a68:	0009883a 	mov	r4,zero
    1a6c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1a70:	01400204 	movi	r5,8
    1a74:	0009883a 	mov	r4,zero
    1a78:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1a7c:	0140b404 	movi	r5,720
    1a80:	0009883a 	mov	r4,zero
    1a84:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    1a88:	01400044 	movi	r5,1
    1a8c:	0009883a 	mov	r4,zero
    1a90:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1a94:	014004c4 	movi	r5,19
    1a98:	0009883a 	mov	r4,zero
    1a9c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1aa0:	01414504 	movi	r5,1300
    1aa4:	0009883a 	mov	r4,zero
    1aa8:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1aac:	0141a004 	movi	r5,1664
    1ab0:	0009883a 	mov	r4,zero
    1ab4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1ab8:	01408004 	movi	r5,512
    1abc:	0009883a 	mov	r4,zero
    1ac0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1ac4:	000b883a 	mov	r5,zero
    1ac8:	0009883a 	mov	r4,zero
    1acc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    1ad0:	01403fc4 	movi	r5,255
    1ad4:	0009883a 	mov	r4,zero
    1ad8:	000031c0 	call	31c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    1adc:	01415704 	movi	r5,1372
    1ae0:	0009883a 	mov	r4,zero
    1ae4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1ae8:	01400204 	movi	r5,8
    1aec:	0009883a 	mov	r4,zero
    1af0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1af4:	0140a404 	movi	r5,656
    1af8:	0009883a 	mov	r4,zero
    1afc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1b00:	01401044 	movi	r5,65
    1b04:	0009883a 	mov	r4,zero
    1b08:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1b0c:	014004c4 	movi	r5,19
    1b10:	0009883a 	mov	r4,zero
    1b14:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1b18:	01414804 	movi	r5,1312
    1b1c:	0009883a 	mov	r4,zero
    1b20:	000031c0 	call	31c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    1b24:	01415904 	movi	r5,1380
    1b28:	0009883a 	mov	r4,zero
    1b2c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1b30:	01400204 	movi	r5,8
    1b34:	0009883a 	mov	r4,zero
    1b38:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1b3c:	0140a404 	movi	r5,656
    1b40:	0009883a 	mov	r4,zero
    1b44:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1b48:	01400044 	movi	r5,1
    1b4c:	0009883a 	mov	r4,zero
    1b50:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1b54:	014004c4 	movi	r5,19
    1b58:	0009883a 	mov	r4,zero
    1b5c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1b60:	01414b04 	movi	r5,1324
    1b64:	0009883a 	mov	r4,zero
    1b68:	000031c0 	call	31c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    1b6c:	01415b04 	movi	r5,1388
    1b70:	0009883a 	mov	r4,zero
    1b74:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    1b78:	01400204 	movi	r5,8
    1b7c:	0009883a 	mov	r4,zero
    1b80:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1b84:	0140a404 	movi	r5,656
    1b88:	0009883a 	mov	r4,zero
    1b8c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1b90:	01401044 	movi	r5,65
    1b94:	0009883a 	mov	r4,zero
    1b98:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1b9c:	014004c4 	movi	r5,19
    1ba0:	0009883a 	mov	r4,zero
    1ba4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1ba8:	01414e04 	movi	r5,1336
    1bac:	0009883a 	mov	r4,zero
    1bb0:	000031c0 	call	31c <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    1bb4:	01415d04 	movi	r5,1396
    1bb8:	0009883a 	mov	r4,zero
    1bbc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    1bc0:	01400204 	movi	r5,8
    1bc4:	0009883a 	mov	r4,zero
    1bc8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    1bcc:	0140a404 	movi	r5,656
    1bd0:	0009883a 	mov	r4,zero
    1bd4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    1bd8:	01400044 	movi	r5,1
    1bdc:	0009883a 	mov	r4,zero
    1be0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1be4:	014004c4 	movi	r5,19
    1be8:	0009883a 	mov	r4,zero
    1bec:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    1bf0:	01415104 	movi	r5,1348
    1bf4:	0009883a 	mov	r4,zero
    1bf8:	000031c0 	call	31c <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    1bfc:	01415f04 	movi	r5,1404
    1c00:	0009883a 	mov	r4,zero
    1c04:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    1c08:	01400084 	movi	r5,2
    1c0c:	0009883a 	mov	r4,zero
    1c10:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1c14:	0140a404 	movi	r5,656
    1c18:	0009883a 	mov	r4,zero
    1c1c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    1c20:	01401044 	movi	r5,65
    1c24:	0009883a 	mov	r4,zero
    1c28:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1c2c:	014004c4 	movi	r5,19
    1c30:	0009883a 	mov	r4,zero
    1c34:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    1c38:	01415404 	movi	r5,1360
    1c3c:	0009883a 	mov	r4,zero
    1c40:	000031c0 	call	31c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    1c44:	000b883a 	mov	r5,zero
    1c48:	0009883a 	mov	r4,zero
    1c4c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1c50:	000b883a 	mov	r5,zero
    1c54:	0009883a 	mov	r4,zero
    1c58:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    1c5c:	01408404 	movi	r5,528
    1c60:	0009883a 	mov	r4,zero
    1c64:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    1c68:	01401044 	movi	r5,65
    1c6c:	0009883a 	mov	r4,zero
    1c70:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1c74:	014004c4 	movi	r5,19
    1c78:	0009883a 	mov	r4,zero
    1c7c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1c80:	000b883a 	mov	r5,zero
    1c84:	0009883a 	mov	r4,zero
    1c88:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1c8c:	01414004 	movi	r5,1280
    1c90:	01006c04 	movi	r4,432
    1c94:	00013400 	call	1340 <UsbWrite>
}
    1c98:	0001883a 	nop
    1c9c:	e037883a 	mov	sp,fp
    1ca0:	dfc00117 	ldw	ra,4(sp)
    1ca4:	df000017 	ldw	fp,0(sp)
    1ca8:	dec00204 	addi	sp,sp,8
    1cac:	f800283a 	ret

00001cb0 <UsbSetConfig>:

void UsbSetConfig()
{
    1cb0:	defffe04 	addi	sp,sp,-8
    1cb4:	dfc00115 	stw	ra,4(sp)
    1cb8:	df000015 	stw	fp,0(sp)
    1cbc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1cc0:	01414004 	movi	r5,1280
    1cc4:	01000084 	movi	r4,2
    1cc8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    1ccc:	01414304 	movi	r5,1292
    1cd0:	0009883a 	mov	r4,zero
    1cd4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1cd8:	01400204 	movi	r5,8
    1cdc:	0009883a 	mov	r4,zero
    1ce0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1ce4:	0140b404 	movi	r5,720
    1ce8:	0009883a 	mov	r4,zero
    1cec:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    1cf0:	01400044 	movi	r5,1
    1cf4:	0009883a 	mov	r4,zero
    1cf8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1cfc:	014004c4 	movi	r5,19
    1d00:	0009883a 	mov	r4,zero
    1d04:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1d08:	01414504 	movi	r5,1300
    1d0c:	0009883a 	mov	r4,zero
    1d10:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    1d14:	01424004 	movi	r5,2304
    1d18:	0009883a 	mov	r4,zero
    1d1c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    1d20:	01400044 	movi	r5,1
    1d24:	0009883a 	mov	r4,zero
    1d28:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1d2c:	000b883a 	mov	r5,zero
    1d30:	0009883a 	mov	r4,zero
    1d34:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1d38:	000b883a 	mov	r5,zero
    1d3c:	0009883a 	mov	r4,zero
    1d40:	000031c0 	call	31c <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    1d44:	000b883a 	mov	r5,zero
    1d48:	0009883a 	mov	r4,zero
    1d4c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1d50:	000b883a 	mov	r5,zero
    1d54:	0009883a 	mov	r4,zero
    1d58:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    1d5c:	0140a404 	movi	r5,656
    1d60:	0009883a 	mov	r4,zero
    1d64:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    1d68:	01401044 	movi	r5,65
    1d6c:	0009883a 	mov	r4,zero
    1d70:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1d74:	014004c4 	movi	r5,19
    1d78:	0009883a 	mov	r4,zero
    1d7c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1d80:	000b883a 	mov	r5,zero
    1d84:	0009883a 	mov	r4,zero
    1d88:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1d8c:	01414004 	movi	r5,1280
    1d90:	01006c04 	movi	r4,432
    1d94:	00013400 	call	1340 <UsbWrite>

}
    1d98:	0001883a 	nop
    1d9c:	e037883a 	mov	sp,fp
    1da0:	dfc00117 	ldw	ra,4(sp)
    1da4:	df000017 	ldw	fp,0(sp)
    1da8:	dec00204 	addi	sp,sp,8
    1dac:	f800283a 	ret

00001db0 <UsbClassRequest>:

void UsbClassRequest()
{
    1db0:	defffe04 	addi	sp,sp,-8
    1db4:	dfc00115 	stw	ra,4(sp)
    1db8:	df000015 	stw	fp,0(sp)
    1dbc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1dc0:	01414004 	movi	r5,1280
    1dc4:	01000084 	movi	r4,2
    1dc8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    1dcc:	01414304 	movi	r5,1292
    1dd0:	0009883a 	mov	r4,zero
    1dd4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1dd8:	01400204 	movi	r5,8
    1ddc:	0009883a 	mov	r4,zero
    1de0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1de4:	0140b404 	movi	r5,720
    1de8:	0009883a 	mov	r4,zero
    1dec:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    1df0:	01400044 	movi	r5,1
    1df4:	0009883a 	mov	r4,zero
    1df8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1dfc:	014004c4 	movi	r5,19
    1e00:	0009883a 	mov	r4,zero
    1e04:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1e08:	01414504 	movi	r5,1300
    1e0c:	0009883a 	mov	r4,zero
    1e10:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    1e14:	01428844 	movi	r5,2593
    1e18:	0009883a 	mov	r4,zero
    1e1c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    1e20:	000b883a 	mov	r5,zero
    1e24:	0009883a 	mov	r4,zero
    1e28:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1e2c:	000b883a 	mov	r5,zero
    1e30:	0009883a 	mov	r4,zero
    1e34:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1e38:	000b883a 	mov	r5,zero
    1e3c:	0009883a 	mov	r4,zero
    1e40:	000031c0 	call	31c <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    1e44:	000b883a 	mov	r5,zero
    1e48:	0009883a 	mov	r4,zero
    1e4c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    1e50:	000b883a 	mov	r5,zero
    1e54:	0009883a 	mov	r4,zero
    1e58:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    1e5c:	0140a404 	movi	r5,656
    1e60:	0009883a 	mov	r4,zero
    1e64:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    1e68:	01401044 	movi	r5,65
    1e6c:	0009883a 	mov	r4,zero
    1e70:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1e74:	014004c4 	movi	r5,19
    1e78:	0009883a 	mov	r4,zero
    1e7c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1e80:	000b883a 	mov	r5,zero
    1e84:	0009883a 	mov	r4,zero
    1e88:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1e8c:	01414004 	movi	r5,1280
    1e90:	01006c04 	movi	r4,432
    1e94:	00013400 	call	1340 <UsbWrite>
}
    1e98:	0001883a 	nop
    1e9c:	e037883a 	mov	sp,fp
    1ea0:	dfc00117 	ldw	ra,4(sp)
    1ea4:	df000017 	ldw	fp,0(sp)
    1ea8:	dec00204 	addi	sp,sp,8
    1eac:	f800283a 	ret

00001eb0 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    1eb0:	defffe04 	addi	sp,sp,-8
    1eb4:	dfc00115 	stw	ra,4(sp)
    1eb8:	df000015 	stw	fp,0(sp)
    1ebc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1ec0:	01414004 	movi	r5,1280
    1ec4:	01000084 	movi	r4,2
    1ec8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    1ecc:	01414304 	movi	r5,1292
    1ed0:	0009883a 	mov	r4,zero
    1ed4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1ed8:	01400204 	movi	r5,8
    1edc:	0009883a 	mov	r4,zero
    1ee0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1ee4:	0140b404 	movi	r5,720
    1ee8:	0009883a 	mov	r4,zero
    1eec:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    1ef0:	01400044 	movi	r5,1
    1ef4:	0009883a 	mov	r4,zero
    1ef8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1efc:	014004c4 	movi	r5,19
    1f00:	0009883a 	mov	r4,zero
    1f04:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1f08:	01414504 	movi	r5,1300
    1f0c:	0009883a 	mov	r4,zero
    1f10:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    1f14:	0141a044 	movi	r5,1665
    1f18:	0009883a 	mov	r4,zero
    1f1c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    1f20:	01484004 	movi	r5,8448
    1f24:	0009883a 	mov	r4,zero
    1f28:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1f2c:	000b883a 	mov	r5,zero
    1f30:	0009883a 	mov	r4,zero
    1f34:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    1f38:	01401ec4 	movi	r5,123
    1f3c:	0009883a 	mov	r4,zero
    1f40:	000031c0 	call	31c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1f44:	01415104 	movi	r5,1348
    1f48:	0009883a 	mov	r4,zero
    1f4c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1f50:	01400204 	movi	r5,8
    1f54:	0009883a 	mov	r4,zero
    1f58:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1f5c:	0140a404 	movi	r5,656
    1f60:	0009883a 	mov	r4,zero
    1f64:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1f68:	01401044 	movi	r5,65
    1f6c:	0009883a 	mov	r4,zero
    1f70:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1f74:	014004c4 	movi	r5,19
    1f78:	0009883a 	mov	r4,zero
    1f7c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1f80:	01414804 	movi	r5,1312
    1f84:	0009883a 	mov	r4,zero
    1f88:	000031c0 	call	31c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    1f8c:	000b883a 	mov	r5,zero
    1f90:	0009883a 	mov	r4,zero
    1f94:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    1f98:	000b883a 	mov	r5,zero
    1f9c:	0009883a 	mov	r4,zero
    1fa0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    1fa4:	01408404 	movi	r5,528
    1fa8:	0009883a 	mov	r4,zero
    1fac:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1fb0:	01401044 	movi	r5,65
    1fb4:	0009883a 	mov	r4,zero
    1fb8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1fbc:	014004c4 	movi	r5,19
    1fc0:	0009883a 	mov	r4,zero
    1fc4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    1fc8:	000b883a 	mov	r5,zero
    1fcc:	0009883a 	mov	r4,zero
    1fd0:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1fd4:	01414004 	movi	r5,1280
    1fd8:	01006c04 	movi	r4,432
    1fdc:	00013400 	call	1340 <UsbWrite>

}
    1fe0:	0001883a 	nop
    1fe4:	e037883a 	mov	sp,fp
    1fe8:	dfc00117 	ldw	ra,4(sp)
    1fec:	df000017 	ldw	fp,0(sp)
    1ff0:	dec00204 	addi	sp,sp,8
    1ff4:	f800283a 	ret

00001ff8 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    1ff8:	defffe04 	addi	sp,sp,-8
    1ffc:	dfc00115 	stw	ra,4(sp)
    2000:	df000015 	stw	fp,0(sp)
    2004:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2008:	01414004 	movi	r5,1280
    200c:	01000084 	movi	r4,2
    2010:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    2014:	01414304 	movi	r5,1292
    2018:	0009883a 	mov	r4,zero
    201c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2020:	01400204 	movi	r5,8
    2024:	0009883a 	mov	r4,zero
    2028:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    202c:	0140b404 	movi	r5,720
    2030:	0009883a 	mov	r4,zero
    2034:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    2038:	01400044 	movi	r5,1
    203c:	0009883a 	mov	r4,zero
    2040:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    2044:	014004c4 	movi	r5,19
    2048:	0009883a 	mov	r4,zero
    204c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    2050:	01414504 	movi	r5,1300
    2054:	0009883a 	mov	r4,zero
    2058:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    205c:	0141a044 	movi	r5,1665
    2060:	0009883a 	mov	r4,zero
    2064:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    2068:	01488004 	movi	r5,8704
    206c:	0009883a 	mov	r4,zero
    2070:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2074:	000b883a 	mov	r5,zero
    2078:	0009883a 	mov	r4,zero
    207c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    2080:	01401ec4 	movi	r5,123
    2084:	0009883a 	mov	r4,zero
    2088:	000031c0 	call	31c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    208c:	01416004 	movi	r5,1408
    2090:	0009883a 	mov	r4,zero
    2094:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2098:	01400204 	movi	r5,8
    209c:	0009883a 	mov	r4,zero
    20a0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    20a4:	0140a404 	movi	r5,656
    20a8:	0009883a 	mov	r4,zero
    20ac:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    20b0:	01401044 	movi	r5,65
    20b4:	0009883a 	mov	r4,zero
    20b8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    20bc:	014004c4 	movi	r5,19
    20c0:	0009883a 	mov	r4,zero
    20c4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    20c8:	01414804 	movi	r5,1312
    20cc:	0009883a 	mov	r4,zero
    20d0:	000031c0 	call	31c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    20d4:	01416204 	movi	r5,1416
    20d8:	0009883a 	mov	r4,zero
    20dc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    20e0:	01400204 	movi	r5,8
    20e4:	0009883a 	mov	r4,zero
    20e8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    20ec:	0140a404 	movi	r5,656
    20f0:	0009883a 	mov	r4,zero
    20f4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    20f8:	01400044 	movi	r5,1
    20fc:	0009883a 	mov	r4,zero
    2100:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2104:	014004c4 	movi	r5,19
    2108:	0009883a 	mov	r4,zero
    210c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2110:	01414b04 	movi	r5,1324
    2114:	0009883a 	mov	r4,zero
    2118:	000031c0 	call	31c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    211c:	01416404 	movi	r5,1424
    2120:	0009883a 	mov	r4,zero
    2124:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2128:	01400204 	movi	r5,8
    212c:	0009883a 	mov	r4,zero
    2130:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2134:	0140a404 	movi	r5,656
    2138:	0009883a 	mov	r4,zero
    213c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2140:	01401044 	movi	r5,65
    2144:	0009883a 	mov	r4,zero
    2148:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    214c:	014004c4 	movi	r5,19
    2150:	0009883a 	mov	r4,zero
    2154:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2158:	01414e04 	movi	r5,1336
    215c:	0009883a 	mov	r4,zero
    2160:	000031c0 	call	31c <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    2164:	01416604 	movi	r5,1432
    2168:	0009883a 	mov	r4,zero
    216c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2170:	01400204 	movi	r5,8
    2174:	0009883a 	mov	r4,zero
    2178:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    217c:	0140a404 	movi	r5,656
    2180:	0009883a 	mov	r4,zero
    2184:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2188:	01400044 	movi	r5,1
    218c:	0009883a 	mov	r4,zero
    2190:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2194:	014004c4 	movi	r5,19
    2198:	0009883a 	mov	r4,zero
    219c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    21a0:	01415104 	movi	r5,1348
    21a4:	0009883a 	mov	r4,zero
    21a8:	000031c0 	call	31c <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    21ac:	01416804 	movi	r5,1440
    21b0:	0009883a 	mov	r4,zero
    21b4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    21b8:	01400204 	movi	r5,8
    21bc:	0009883a 	mov	r4,zero
    21c0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    21c4:	0140a404 	movi	r5,656
    21c8:	0009883a 	mov	r4,zero
    21cc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    21d0:	01401044 	movi	r5,65
    21d4:	0009883a 	mov	r4,zero
    21d8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    21dc:	014004c4 	movi	r5,19
    21e0:	0009883a 	mov	r4,zero
    21e4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    21e8:	01415404 	movi	r5,1360
    21ec:	0009883a 	mov	r4,zero
    21f0:	000031c0 	call	31c <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    21f4:	01416a04 	movi	r5,1448
    21f8:	0009883a 	mov	r4,zero
    21fc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2200:	01400204 	movi	r5,8
    2204:	0009883a 	mov	r4,zero
    2208:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    220c:	0140a404 	movi	r5,656
    2210:	0009883a 	mov	r4,zero
    2214:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2218:	01400044 	movi	r5,1
    221c:	0009883a 	mov	r4,zero
    2220:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2224:	014004c4 	movi	r5,19
    2228:	0009883a 	mov	r4,zero
    222c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    2230:	01415704 	movi	r5,1372
    2234:	0009883a 	mov	r4,zero
    2238:	000031c0 	call	31c <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    223c:	01416c04 	movi	r5,1456
    2240:	0009883a 	mov	r4,zero
    2244:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2248:	01400204 	movi	r5,8
    224c:	0009883a 	mov	r4,zero
    2250:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    2254:	0140a404 	movi	r5,656
    2258:	0009883a 	mov	r4,zero
    225c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    2260:	01401044 	movi	r5,65
    2264:	0009883a 	mov	r4,zero
    2268:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    226c:	014004c4 	movi	r5,19
    2270:	0009883a 	mov	r4,zero
    2274:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    2278:	01415a04 	movi	r5,1384
    227c:	0009883a 	mov	r4,zero
    2280:	000031c0 	call	31c <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    2284:	01416e04 	movi	r5,1464
    2288:	0009883a 	mov	r4,zero
    228c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    2290:	014000c4 	movi	r5,3
    2294:	0009883a 	mov	r4,zero
    2298:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    229c:	0140a404 	movi	r5,656
    22a0:	0009883a 	mov	r4,zero
    22a4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    22a8:	01400044 	movi	r5,1
    22ac:	0009883a 	mov	r4,zero
    22b0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    22b4:	014004c4 	movi	r5,19
    22b8:	0009883a 	mov	r4,zero
    22bc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    22c0:	01415d04 	movi	r5,1396
    22c4:	0009883a 	mov	r4,zero
    22c8:	000031c0 	call	31c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    22cc:	000b883a 	mov	r5,zero
    22d0:	0009883a 	mov	r4,zero
    22d4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    22d8:	000b883a 	mov	r5,zero
    22dc:	0009883a 	mov	r4,zero
    22e0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    22e4:	01408404 	movi	r5,528
    22e8:	0009883a 	mov	r4,zero
    22ec:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    22f0:	01401044 	movi	r5,65
    22f4:	0009883a 	mov	r4,zero
    22f8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    22fc:	014004c4 	movi	r5,19
    2300:	0009883a 	mov	r4,zero
    2304:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2308:	000b883a 	mov	r5,zero
    230c:	0009883a 	mov	r4,zero
    2310:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2314:	01414004 	movi	r5,1280
    2318:	01006c04 	movi	r4,432
    231c:	00013400 	call	1340 <UsbWrite>

}
    2320:	0001883a 	nop
    2324:	e037883a 	mov	sp,fp
    2328:	dfc00117 	ldw	ra,4(sp)
    232c:	df000017 	ldw	fp,0(sp)
    2330:	dec00204 	addi	sp,sp,8
    2334:	f800283a 	ret

00002338 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    2338:	defffd04 	addi	sp,sp,-12
    233c:	dfc00215 	stw	ra,8(sp)
    2340:	df000115 	stw	fp,4(sp)
    2344:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    2348:	01005104 	movi	r4,324
    234c:	00013980 	call	1398 <UsbRead>
    2350:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2354:	000b883a 	mov	r5,zero
    2358:	01005104 	movi	r4,324
    235c:	00013400 	call	1340 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2360:	00000d06 	br	2398 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    2364:	e0bfff0b 	ldhu	r2,-4(fp)
    2368:	10000526 	beq	r2,zero,2380 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    236c:	e0bfff0b 	ldhu	r2,-4(fp)
    2370:	100b883a 	mov	r5,r2
    2374:	01000074 	movhi	r4,1
    2378:	2108df04 	addi	r4,r4,9084
    237c:	00024ec0 	call	24ec <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2380:	01005104 	movi	r4,324
    2384:	00013980 	call	1398 <UsbRead>
    2388:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    238c:	000b883a 	mov	r5,zero
    2390:	01005104 	movi	r4,324
    2394:	00013400 	call	1340 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2398:	e0bfff0b 	ldhu	r2,-4(fp)
    239c:	10840018 	cmpnei	r2,r2,4096
    23a0:	103ff01e 	bne	r2,zero,2364 <_gp+0xfffe6208>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    23a4:	e0bfff0b 	ldhu	r2,-4(fp)
}
    23a8:	e037883a 	mov	sp,fp
    23ac:	dfc00117 	ldw	ra,4(sp)
    23b0:	df000017 	ldw	fp,0(sp)
    23b4:	dec00204 	addi	sp,sp,8
    23b8:	f800283a 	ret

000023bc <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    23bc:	defffd04 	addi	sp,sp,-12
    23c0:	dfc00215 	stw	ra,8(sp)
    23c4:	df000115 	stw	fp,4(sp)
    23c8:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    23cc:	010000c4 	movi	r4,3
    23d0:	00003b40 	call	3b4 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    23d4:	01005104 	movi	r4,324
    23d8:	00013980 	call	1398 <UsbRead>
    23dc:	10bfffcc 	andi	r2,r2,65535
    23e0:	10840018 	cmpnei	r2,r2,4096
    23e4:	1000091e 	bne	r2,zero,240c <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    23e8:	000b883a 	mov	r5,zero
    23ec:	01005104 	movi	r4,324
    23f0:	00013400 	call	1340 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    23f4:	0001883a 	nop
    23f8:	010000c4 	movi	r4,3
    23fc:	00003b40 	call	3b4 <IO_read>
    2400:	10bfffcc 	andi	r2,r2,65535
    2404:	1080040c 	andi	r2,r2,16
    2408:	103ffb26 	beq	r2,zero,23f8 <_gp+0xfffe629c>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
    240c:	01414204 	movi	r5,1288
    2410:	01000084 	movi	r4,2
    2414:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    2418:	0009883a 	mov	r4,zero
    241c:	00003b40 	call	3b4 <IO_read>
    2420:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    2424:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2428:	e037883a 	mov	sp,fp
    242c:	dfc00117 	ldw	ra,4(sp)
    2430:	df000017 	ldw	fp,0(sp)
    2434:	dec00204 	addi	sp,sp,8
    2438:	f800283a 	ret

0000243c <UsbPrintMem>:


void UsbPrintMem()
{
    243c:	defffc04 	addi	sp,sp,-16
    2440:	dfc00315 	stw	ra,12(sp)
    2444:	df000215 	stw	fp,8(sp)
    2448:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    244c:	01414004 	movi	r5,1280
    2450:	01000084 	movi	r4,2
    2454:	000031c0 	call	31c <IO_write>
	for (i = 0; i <= 200; i += 2)
    2458:	e03ffe15 	stw	zero,-8(fp)
    245c:	00000e06 	br	2498 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    2460:	0009883a 	mov	r4,zero
    2464:	00003b40 	call	3b4 <IO_read>
    2468:	10bfffcc 	andi	r2,r2,65535
    246c:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    2470:	e0bffe17 	ldw	r2,-8(fp)
    2474:	10814004 	addi	r2,r2,1280
    2478:	e1bfff17 	ldw	r6,-4(fp)
    247c:	100b883a 	mov	r5,r2
    2480:	01000074 	movhi	r4,1
    2484:	2108e704 	addi	r4,r4,9116
    2488:	00024ec0 	call	24ec <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    248c:	e0bffe17 	ldw	r2,-8(fp)
    2490:	10800084 	addi	r2,r2,2
    2494:	e0bffe15 	stw	r2,-8(fp)
    2498:	e0bffe17 	ldw	r2,-8(fp)
    249c:	10803250 	cmplti	r2,r2,201
    24a0:	103fef1e 	bne	r2,zero,2460 <_gp+0xfffe6304>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    24a4:	0001883a 	nop
    24a8:	e037883a 	mov	sp,fp
    24ac:	dfc00117 	ldw	ra,4(sp)
    24b0:	df000017 	ldw	fp,0(sp)
    24b4:	dec00204 	addi	sp,sp,8
    24b8:	f800283a 	ret

000024bc <_printf_r>:
    24bc:	defffd04 	addi	sp,sp,-12
    24c0:	2805883a 	mov	r2,r5
    24c4:	dfc00015 	stw	ra,0(sp)
    24c8:	d9800115 	stw	r6,4(sp)
    24cc:	d9c00215 	stw	r7,8(sp)
    24d0:	21400217 	ldw	r5,8(r4)
    24d4:	d9c00104 	addi	r7,sp,4
    24d8:	100d883a 	mov	r6,r2
    24dc:	00026940 	call	2694 <___vfprintf_internal_r>
    24e0:	dfc00017 	ldw	ra,0(sp)
    24e4:	dec00304 	addi	sp,sp,12
    24e8:	f800283a 	ret

000024ec <printf>:
    24ec:	defffc04 	addi	sp,sp,-16
    24f0:	dfc00015 	stw	ra,0(sp)
    24f4:	d9400115 	stw	r5,4(sp)
    24f8:	d9800215 	stw	r6,8(sp)
    24fc:	d9c00315 	stw	r7,12(sp)
    2500:	00800074 	movhi	r2,1
    2504:	10905804 	addi	r2,r2,16736
    2508:	10800017 	ldw	r2,0(r2)
    250c:	200b883a 	mov	r5,r4
    2510:	d9800104 	addi	r6,sp,4
    2514:	11000217 	ldw	r4,8(r2)
    2518:	00049700 	call	4970 <__vfprintf_internal>
    251c:	dfc00017 	ldw	ra,0(sp)
    2520:	dec00404 	addi	sp,sp,16
    2524:	f800283a 	ret

00002528 <_puts_r>:
    2528:	defff604 	addi	sp,sp,-40
    252c:	dc000715 	stw	r16,28(sp)
    2530:	2021883a 	mov	r16,r4
    2534:	2809883a 	mov	r4,r5
    2538:	dc400815 	stw	r17,32(sp)
    253c:	dfc00915 	stw	ra,36(sp)
    2540:	2823883a 	mov	r17,r5
    2544:	00025fc0 	call	25fc <strlen>
    2548:	10c00044 	addi	r3,r2,1
    254c:	d8800115 	stw	r2,4(sp)
    2550:	00800074 	movhi	r2,1
    2554:	1088ec04 	addi	r2,r2,9136
    2558:	d8800215 	stw	r2,8(sp)
    255c:	00800044 	movi	r2,1
    2560:	d8800315 	stw	r2,12(sp)
    2564:	00800084 	movi	r2,2
    2568:	dc400015 	stw	r17,0(sp)
    256c:	d8c00615 	stw	r3,24(sp)
    2570:	dec00415 	stw	sp,16(sp)
    2574:	d8800515 	stw	r2,20(sp)
    2578:	80000226 	beq	r16,zero,2584 <_puts_r+0x5c>
    257c:	80800e17 	ldw	r2,56(r16)
    2580:	10001426 	beq	r2,zero,25d4 <_puts_r+0xac>
    2584:	81400217 	ldw	r5,8(r16)
    2588:	2880030b 	ldhu	r2,12(r5)
    258c:	10c8000c 	andi	r3,r2,8192
    2590:	1800061e 	bne	r3,zero,25ac <_puts_r+0x84>
    2594:	29001917 	ldw	r4,100(r5)
    2598:	00f7ffc4 	movi	r3,-8193
    259c:	10880014 	ori	r2,r2,8192
    25a0:	20c6703a 	and	r3,r4,r3
    25a4:	2880030d 	sth	r2,12(r5)
    25a8:	28c01915 	stw	r3,100(r5)
    25ac:	d9800404 	addi	r6,sp,16
    25b0:	8009883a 	mov	r4,r16
    25b4:	0006ed80 	call	6ed8 <__sfvwrite_r>
    25b8:	1000091e 	bne	r2,zero,25e0 <_puts_r+0xb8>
    25bc:	00800284 	movi	r2,10
    25c0:	dfc00917 	ldw	ra,36(sp)
    25c4:	dc400817 	ldw	r17,32(sp)
    25c8:	dc000717 	ldw	r16,28(sp)
    25cc:	dec00a04 	addi	sp,sp,40
    25d0:	f800283a 	ret
    25d4:	8009883a 	mov	r4,r16
    25d8:	0006a540 	call	6a54 <__sinit>
    25dc:	003fe906 	br	2584 <_gp+0xfffe6428>
    25e0:	00bfffc4 	movi	r2,-1
    25e4:	003ff606 	br	25c0 <_gp+0xfffe6464>

000025e8 <puts>:
    25e8:	00800074 	movhi	r2,1
    25ec:	10905804 	addi	r2,r2,16736
    25f0:	200b883a 	mov	r5,r4
    25f4:	11000017 	ldw	r4,0(r2)
    25f8:	00025281 	jmpi	2528 <_puts_r>

000025fc <strlen>:
    25fc:	208000cc 	andi	r2,r4,3
    2600:	10002026 	beq	r2,zero,2684 <strlen+0x88>
    2604:	20800007 	ldb	r2,0(r4)
    2608:	10002026 	beq	r2,zero,268c <strlen+0x90>
    260c:	2005883a 	mov	r2,r4
    2610:	00000206 	br	261c <strlen+0x20>
    2614:	10c00007 	ldb	r3,0(r2)
    2618:	18001826 	beq	r3,zero,267c <strlen+0x80>
    261c:	10800044 	addi	r2,r2,1
    2620:	10c000cc 	andi	r3,r2,3
    2624:	183ffb1e 	bne	r3,zero,2614 <_gp+0xfffe64b8>
    2628:	10c00017 	ldw	r3,0(r2)
    262c:	01ffbff4 	movhi	r7,65279
    2630:	39ffbfc4 	addi	r7,r7,-257
    2634:	00ca303a 	nor	r5,zero,r3
    2638:	01a02074 	movhi	r6,32897
    263c:	19c7883a 	add	r3,r3,r7
    2640:	31a02004 	addi	r6,r6,-32640
    2644:	1946703a 	and	r3,r3,r5
    2648:	1986703a 	and	r3,r3,r6
    264c:	1800091e 	bne	r3,zero,2674 <strlen+0x78>
    2650:	10800104 	addi	r2,r2,4
    2654:	10c00017 	ldw	r3,0(r2)
    2658:	19cb883a 	add	r5,r3,r7
    265c:	00c6303a 	nor	r3,zero,r3
    2660:	28c6703a 	and	r3,r5,r3
    2664:	1986703a 	and	r3,r3,r6
    2668:	183ff926 	beq	r3,zero,2650 <_gp+0xfffe64f4>
    266c:	00000106 	br	2674 <strlen+0x78>
    2670:	10800044 	addi	r2,r2,1
    2674:	10c00007 	ldb	r3,0(r2)
    2678:	183ffd1e 	bne	r3,zero,2670 <_gp+0xfffe6514>
    267c:	1105c83a 	sub	r2,r2,r4
    2680:	f800283a 	ret
    2684:	2005883a 	mov	r2,r4
    2688:	003fe706 	br	2628 <_gp+0xfffe64cc>
    268c:	0005883a 	mov	r2,zero
    2690:	f800283a 	ret

00002694 <___vfprintf_internal_r>:
    2694:	deffb804 	addi	sp,sp,-288
    2698:	dfc04715 	stw	ra,284(sp)
    269c:	ddc04515 	stw	r23,276(sp)
    26a0:	dd404315 	stw	r21,268(sp)
    26a4:	d9002d15 	stw	r4,180(sp)
    26a8:	282f883a 	mov	r23,r5
    26ac:	302b883a 	mov	r21,r6
    26b0:	d9c02e15 	stw	r7,184(sp)
    26b4:	df004615 	stw	fp,280(sp)
    26b8:	dd804415 	stw	r22,272(sp)
    26bc:	dd004215 	stw	r20,264(sp)
    26c0:	dcc04115 	stw	r19,260(sp)
    26c4:	dc804015 	stw	r18,256(sp)
    26c8:	dc403f15 	stw	r17,252(sp)
    26cc:	dc003e15 	stw	r16,248(sp)
    26d0:	00075d40 	call	75d4 <_localeconv_r>
    26d4:	10800017 	ldw	r2,0(r2)
    26d8:	1009883a 	mov	r4,r2
    26dc:	d8803415 	stw	r2,208(sp)
    26e0:	00025fc0 	call	25fc <strlen>
    26e4:	d8803715 	stw	r2,220(sp)
    26e8:	d8802d17 	ldw	r2,180(sp)
    26ec:	10000226 	beq	r2,zero,26f8 <___vfprintf_internal_r+0x64>
    26f0:	10800e17 	ldw	r2,56(r2)
    26f4:	1000fb26 	beq	r2,zero,2ae4 <___vfprintf_internal_r+0x450>
    26f8:	b880030b 	ldhu	r2,12(r23)
    26fc:	10c8000c 	andi	r3,r2,8192
    2700:	1800061e 	bne	r3,zero,271c <___vfprintf_internal_r+0x88>
    2704:	b9001917 	ldw	r4,100(r23)
    2708:	00f7ffc4 	movi	r3,-8193
    270c:	10880014 	ori	r2,r2,8192
    2710:	20c6703a 	and	r3,r4,r3
    2714:	b880030d 	sth	r2,12(r23)
    2718:	b8c01915 	stw	r3,100(r23)
    271c:	10c0020c 	andi	r3,r2,8
    2720:	1800c326 	beq	r3,zero,2a30 <___vfprintf_internal_r+0x39c>
    2724:	b8c00417 	ldw	r3,16(r23)
    2728:	1800c126 	beq	r3,zero,2a30 <___vfprintf_internal_r+0x39c>
    272c:	1080068c 	andi	r2,r2,26
    2730:	00c00284 	movi	r3,10
    2734:	10c0c626 	beq	r2,r3,2a50 <___vfprintf_internal_r+0x3bc>
    2738:	d8c00404 	addi	r3,sp,16
    273c:	05000074 	movhi	r20,1
    2740:	d9001e04 	addi	r4,sp,120
    2744:	a508fd84 	addi	r20,r20,9206
    2748:	d8c01e15 	stw	r3,120(sp)
    274c:	d8002015 	stw	zero,128(sp)
    2750:	d8001f15 	stw	zero,124(sp)
    2754:	d8003315 	stw	zero,204(sp)
    2758:	d8003615 	stw	zero,216(sp)
    275c:	d8003815 	stw	zero,224(sp)
    2760:	1811883a 	mov	r8,r3
    2764:	d8003915 	stw	zero,228(sp)
    2768:	d8003a15 	stw	zero,232(sp)
    276c:	d8002f15 	stw	zero,188(sp)
    2770:	d9002815 	stw	r4,160(sp)
    2774:	a8800007 	ldb	r2,0(r21)
    2778:	10028b26 	beq	r2,zero,31a8 <___vfprintf_internal_r+0xb14>
    277c:	00c00944 	movi	r3,37
    2780:	a823883a 	mov	r17,r21
    2784:	10c0021e 	bne	r2,r3,2790 <___vfprintf_internal_r+0xfc>
    2788:	00001406 	br	27dc <___vfprintf_internal_r+0x148>
    278c:	10c00326 	beq	r2,r3,279c <___vfprintf_internal_r+0x108>
    2790:	8c400044 	addi	r17,r17,1
    2794:	88800007 	ldb	r2,0(r17)
    2798:	103ffc1e 	bne	r2,zero,278c <_gp+0xfffe6630>
    279c:	8d61c83a 	sub	r16,r17,r21
    27a0:	80000e26 	beq	r16,zero,27dc <___vfprintf_internal_r+0x148>
    27a4:	d8c02017 	ldw	r3,128(sp)
    27a8:	d8801f17 	ldw	r2,124(sp)
    27ac:	45400015 	stw	r21,0(r8)
    27b0:	1c07883a 	add	r3,r3,r16
    27b4:	10800044 	addi	r2,r2,1
    27b8:	d8c02015 	stw	r3,128(sp)
    27bc:	44000115 	stw	r16,4(r8)
    27c0:	d8801f15 	stw	r2,124(sp)
    27c4:	00c001c4 	movi	r3,7
    27c8:	1880a916 	blt	r3,r2,2a70 <___vfprintf_internal_r+0x3dc>
    27cc:	42000204 	addi	r8,r8,8
    27d0:	d9402f17 	ldw	r5,188(sp)
    27d4:	2c0b883a 	add	r5,r5,r16
    27d8:	d9402f15 	stw	r5,188(sp)
    27dc:	88800007 	ldb	r2,0(r17)
    27e0:	1000aa26 	beq	r2,zero,2a8c <___vfprintf_internal_r+0x3f8>
    27e4:	8d400044 	addi	r21,r17,1
    27e8:	8c400047 	ldb	r17,1(r17)
    27ec:	0021883a 	mov	r16,zero
    27f0:	00bfffc4 	movi	r2,-1
    27f4:	0025883a 	mov	r18,zero
    27f8:	dc002905 	stb	r16,164(sp)
    27fc:	d8002785 	stb	zero,158(sp)
    2800:	d8002b05 	stb	zero,172(sp)
    2804:	d8802a15 	stw	r2,168(sp)
    2808:	d8003115 	stw	zero,196(sp)
    280c:	04c01604 	movi	r19,88
    2810:	05800244 	movi	r22,9
    2814:	9021883a 	mov	r16,r18
    2818:	4039883a 	mov	fp,r8
    281c:	ad400044 	addi	r21,r21,1
    2820:	88bff804 	addi	r2,r17,-32
    2824:	98833236 	bltu	r19,r2,34f0 <___vfprintf_internal_r+0xe5c>
    2828:	100490ba 	slli	r2,r2,2
    282c:	00c00034 	movhi	r3,0
    2830:	18ca1004 	addi	r3,r3,10304
    2834:	10c5883a 	add	r2,r2,r3
    2838:	10800017 	ldw	r2,0(r2)
    283c:	1000683a 	jmp	r2
    2840:	000033e8 	cmpgeui	zero,zero,207
    2844:	000034f0 	cmpltui	zero,zero,211
    2848:	000034f0 	cmpltui	zero,zero,211
    284c:	00003408 	cmpgei	zero,zero,208
    2850:	000034f0 	cmpltui	zero,zero,211
    2854:	000034f0 	cmpltui	zero,zero,211
    2858:	000034f0 	cmpltui	zero,zero,211
    285c:	000034f0 	cmpltui	zero,zero,211
    2860:	000034f0 	cmpltui	zero,zero,211
    2864:	000034f0 	cmpltui	zero,zero,211
    2868:	00002af0 	cmpltui	zero,zero,171
    286c:	000032f8 	rdprs	zero,zero,203
    2870:	000034f0 	cmpltui	zero,zero,211
    2874:	000029b4 	movhi	zero,166
    2878:	00002b14 	movui	zero,172
    287c:	000034f0 	cmpltui	zero,zero,211
    2880:	00002b64 	muli	zero,zero,173
    2884:	00002b70 	cmpltui	zero,zero,173
    2888:	00002b70 	cmpltui	zero,zero,173
    288c:	00002b70 	cmpltui	zero,zero,173
    2890:	00002b70 	cmpltui	zero,zero,173
    2894:	00002b70 	cmpltui	zero,zero,173
    2898:	00002b70 	cmpltui	zero,zero,173
    289c:	00002b70 	cmpltui	zero,zero,173
    28a0:	00002b70 	cmpltui	zero,zero,173
    28a4:	00002b70 	cmpltui	zero,zero,173
    28a8:	000034f0 	cmpltui	zero,zero,211
    28ac:	000034f0 	cmpltui	zero,zero,211
    28b0:	000034f0 	cmpltui	zero,zero,211
    28b4:	000034f0 	cmpltui	zero,zero,211
    28b8:	000034f0 	cmpltui	zero,zero,211
    28bc:	000034f0 	cmpltui	zero,zero,211
    28c0:	000034f0 	cmpltui	zero,zero,211
    28c4:	000034f0 	cmpltui	zero,zero,211
    28c8:	000034f0 	cmpltui	zero,zero,211
    28cc:	000034f0 	cmpltui	zero,zero,211
    28d0:	00002bac 	andhi	zero,zero,174
    28d4:	00002c74 	movhi	zero,177
    28d8:	000034f0 	cmpltui	zero,zero,211
    28dc:	00002c74 	movhi	zero,177
    28e0:	000034f0 	cmpltui	zero,zero,211
    28e4:	000034f0 	cmpltui	zero,zero,211
    28e8:	000034f0 	cmpltui	zero,zero,211
    28ec:	000034f0 	cmpltui	zero,zero,211
    28f0:	00002d20 	cmpeqi	zero,zero,180
    28f4:	000034f0 	cmpltui	zero,zero,211
    28f8:	000034f0 	cmpltui	zero,zero,211
    28fc:	00002d2c 	andhi	zero,zero,180
    2900:	000034f0 	cmpltui	zero,zero,211
    2904:	000034f0 	cmpltui	zero,zero,211
    2908:	000034f0 	cmpltui	zero,zero,211
    290c:	000034f0 	cmpltui	zero,zero,211
    2910:	000034f0 	cmpltui	zero,zero,211
    2914:	000031b0 	cmpltui	zero,zero,198
    2918:	000034f0 	cmpltui	zero,zero,211
    291c:	000034f0 	cmpltui	zero,zero,211
    2920:	0000321c 	xori	zero,zero,200
    2924:	000034f0 	cmpltui	zero,zero,211
    2928:	000034f0 	cmpltui	zero,zero,211
    292c:	000034f0 	cmpltui	zero,zero,211
    2930:	000034f0 	cmpltui	zero,zero,211
    2934:	000034f0 	cmpltui	zero,zero,211
    2938:	000034f0 	cmpltui	zero,zero,211
    293c:	000034f0 	cmpltui	zero,zero,211
    2940:	000034f0 	cmpltui	zero,zero,211
    2944:	000034f0 	cmpltui	zero,zero,211
    2948:	000034f0 	cmpltui	zero,zero,211
    294c:	00003494 	movui	zero,210
    2950:	00003414 	movui	zero,208
    2954:	00002c74 	movhi	zero,177
    2958:	00002c74 	movhi	zero,177
    295c:	00002c74 	movhi	zero,177
    2960:	00003434 	movhi	zero,208
    2964:	00003414 	movui	zero,208
    2968:	000034f0 	cmpltui	zero,zero,211
    296c:	000034f0 	cmpltui	zero,zero,211
    2970:	00003440 	call	344 <IO_write+0x28>
    2974:	000034f0 	cmpltui	zero,zero,211
    2978:	00003454 	movui	zero,209
    297c:	000032d8 	cmpnei	zero,zero,203
    2980:	000029c0 	call	29c <IO_init+0x30>
    2984:	00003310 	cmplti	zero,zero,204
    2988:	000034f0 	cmpltui	zero,zero,211
    298c:	0000331c 	xori	zero,zero,204
    2990:	000034f0 	cmpltui	zero,zero,211
    2994:	00003380 	call	338 <IO_write+0x1c>
    2998:	000034f0 	cmpltui	zero,zero,211
    299c:	000034f0 	cmpltui	zero,zero,211
    29a0:	000033a0 	cmpeqi	zero,zero,206
    29a4:	d8c03117 	ldw	r3,196(sp)
    29a8:	d8802e15 	stw	r2,184(sp)
    29ac:	00c7c83a 	sub	r3,zero,r3
    29b0:	d8c03115 	stw	r3,196(sp)
    29b4:	84000114 	ori	r16,r16,4
    29b8:	ac400007 	ldb	r17,0(r21)
    29bc:	003f9706 	br	281c <_gp+0xfffe66c0>
    29c0:	00800c04 	movi	r2,48
    29c4:	d8802705 	stb	r2,156(sp)
    29c8:	00801e04 	movi	r2,120
    29cc:	d8802745 	stb	r2,157(sp)
    29d0:	d9002a17 	ldw	r4,168(sp)
    29d4:	d8802e17 	ldw	r2,184(sp)
    29d8:	d8002785 	stb	zero,158(sp)
    29dc:	e011883a 	mov	r8,fp
    29e0:	10c00104 	addi	r3,r2,4
    29e4:	14c00017 	ldw	r19,0(r2)
    29e8:	002d883a 	mov	r22,zero
    29ec:	80800094 	ori	r2,r16,2
    29f0:	2002ca16 	blt	r4,zero,351c <___vfprintf_internal_r+0xe88>
    29f4:	00bfdfc4 	movi	r2,-129
    29f8:	80a4703a 	and	r18,r16,r2
    29fc:	d8c02e15 	stw	r3,184(sp)
    2a00:	94800094 	ori	r18,r18,2
    2a04:	9802b41e 	bne	r19,zero,34d8 <___vfprintf_internal_r+0xe44>
    2a08:	01400074 	movhi	r5,1
    2a0c:	2948f604 	addi	r5,r5,9176
    2a10:	d9403915 	stw	r5,228(sp)
    2a14:	04401e04 	movi	r17,120
    2a18:	d8802a17 	ldw	r2,168(sp)
    2a1c:	0039883a 	mov	fp,zero
    2a20:	1001fa26 	beq	r2,zero,320c <___vfprintf_internal_r+0xb78>
    2a24:	0027883a 	mov	r19,zero
    2a28:	002d883a 	mov	r22,zero
    2a2c:	00021906 	br	3294 <___vfprintf_internal_r+0xc00>
    2a30:	d9002d17 	ldw	r4,180(sp)
    2a34:	b80b883a 	mov	r5,r23
    2a38:	0004a480 	call	4a48 <__swsetup_r>
    2a3c:	1005dc1e 	bne	r2,zero,41b0 <___vfprintf_internal_r+0x1b1c>
    2a40:	b880030b 	ldhu	r2,12(r23)
    2a44:	00c00284 	movi	r3,10
    2a48:	1080068c 	andi	r2,r2,26
    2a4c:	10ff3a1e 	bne	r2,r3,2738 <_gp+0xfffe65dc>
    2a50:	b880038f 	ldh	r2,14(r23)
    2a54:	103f3816 	blt	r2,zero,2738 <_gp+0xfffe65dc>
    2a58:	d9c02e17 	ldw	r7,184(sp)
    2a5c:	d9002d17 	ldw	r4,180(sp)
    2a60:	a80d883a 	mov	r6,r21
    2a64:	b80b883a 	mov	r5,r23
    2a68:	000498c0 	call	498c <__sbprintf>
    2a6c:	00001106 	br	2ab4 <___vfprintf_internal_r+0x420>
    2a70:	d9002d17 	ldw	r4,180(sp)
    2a74:	d9801e04 	addi	r6,sp,120
    2a78:	b80b883a 	mov	r5,r23
    2a7c:	0009e740 	call	9e74 <__sprint_r>
    2a80:	1000081e 	bne	r2,zero,2aa4 <___vfprintf_internal_r+0x410>
    2a84:	da000404 	addi	r8,sp,16
    2a88:	003f5106 	br	27d0 <_gp+0xfffe6674>
    2a8c:	d8802017 	ldw	r2,128(sp)
    2a90:	10000426 	beq	r2,zero,2aa4 <___vfprintf_internal_r+0x410>
    2a94:	d9002d17 	ldw	r4,180(sp)
    2a98:	d9801e04 	addi	r6,sp,120
    2a9c:	b80b883a 	mov	r5,r23
    2aa0:	0009e740 	call	9e74 <__sprint_r>
    2aa4:	b880030b 	ldhu	r2,12(r23)
    2aa8:	1080100c 	andi	r2,r2,64
    2aac:	1005c01e 	bne	r2,zero,41b0 <___vfprintf_internal_r+0x1b1c>
    2ab0:	d8802f17 	ldw	r2,188(sp)
    2ab4:	dfc04717 	ldw	ra,284(sp)
    2ab8:	df004617 	ldw	fp,280(sp)
    2abc:	ddc04517 	ldw	r23,276(sp)
    2ac0:	dd804417 	ldw	r22,272(sp)
    2ac4:	dd404317 	ldw	r21,268(sp)
    2ac8:	dd004217 	ldw	r20,264(sp)
    2acc:	dcc04117 	ldw	r19,260(sp)
    2ad0:	dc804017 	ldw	r18,256(sp)
    2ad4:	dc403f17 	ldw	r17,252(sp)
    2ad8:	dc003e17 	ldw	r16,248(sp)
    2adc:	dec04804 	addi	sp,sp,288
    2ae0:	f800283a 	ret
    2ae4:	d9002d17 	ldw	r4,180(sp)
    2ae8:	0006a540 	call	6a54 <__sinit>
    2aec:	003f0206 	br	26f8 <_gp+0xfffe659c>
    2af0:	d9002e17 	ldw	r4,184(sp)
    2af4:	d9402e17 	ldw	r5,184(sp)
    2af8:	21000017 	ldw	r4,0(r4)
    2afc:	28800104 	addi	r2,r5,4
    2b00:	d9003115 	stw	r4,196(sp)
    2b04:	203fa716 	blt	r4,zero,29a4 <_gp+0xfffe6848>
    2b08:	d8802e15 	stw	r2,184(sp)
    2b0c:	ac400007 	ldb	r17,0(r21)
    2b10:	003f4206 	br	281c <_gp+0xfffe66c0>
    2b14:	ac400007 	ldb	r17,0(r21)
    2b18:	01000a84 	movi	r4,42
    2b1c:	a8c00044 	addi	r3,r21,1
    2b20:	89075826 	beq	r17,r4,4884 <___vfprintf_internal_r+0x21f0>
    2b24:	8cbff404 	addi	r18,r17,-48
    2b28:	b486ae36 	bltu	r22,r18,45e4 <___vfprintf_internal_r+0x1f50>
    2b2c:	0009883a 	mov	r4,zero
    2b30:	1823883a 	mov	r17,r3
    2b34:	01400284 	movi	r5,10
    2b38:	000cb300 	call	cb30 <__mulsi3>
    2b3c:	88c00007 	ldb	r3,0(r17)
    2b40:	1489883a 	add	r4,r2,r18
    2b44:	8d400044 	addi	r21,r17,1
    2b48:	1cbff404 	addi	r18,r3,-48
    2b4c:	a823883a 	mov	r17,r21
    2b50:	b4bff82e 	bgeu	r22,r18,2b34 <_gp+0xfffe69d8>
    2b54:	1823883a 	mov	r17,r3
    2b58:	2005f616 	blt	r4,zero,4334 <___vfprintf_internal_r+0x1ca0>
    2b5c:	d9002a15 	stw	r4,168(sp)
    2b60:	003f2f06 	br	2820 <_gp+0xfffe66c4>
    2b64:	84002014 	ori	r16,r16,128
    2b68:	ac400007 	ldb	r17,0(r21)
    2b6c:	003f2b06 	br	281c <_gp+0xfffe66c0>
    2b70:	8cbff404 	addi	r18,r17,-48
    2b74:	d8003115 	stw	zero,196(sp)
    2b78:	0009883a 	mov	r4,zero
    2b7c:	a823883a 	mov	r17,r21
    2b80:	01400284 	movi	r5,10
    2b84:	000cb300 	call	cb30 <__mulsi3>
    2b88:	88c00007 	ldb	r3,0(r17)
    2b8c:	9089883a 	add	r4,r18,r2
    2b90:	ad400044 	addi	r21,r21,1
    2b94:	1cbff404 	addi	r18,r3,-48
    2b98:	a823883a 	mov	r17,r21
    2b9c:	b4bff82e 	bgeu	r22,r18,2b80 <_gp+0xfffe6a24>
    2ba0:	1823883a 	mov	r17,r3
    2ba4:	d9003115 	stw	r4,196(sp)
    2ba8:	003f1d06 	br	2820 <_gp+0xfffe66c4>
    2bac:	8025883a 	mov	r18,r16
    2bb0:	dc002903 	ldbu	r16,164(sp)
    2bb4:	e011883a 	mov	r8,fp
    2bb8:	84003fcc 	andi	r16,r16,255
    2bbc:	8007531e 	bne	r16,zero,490c <___vfprintf_internal_r+0x2278>
    2bc0:	94800414 	ori	r18,r18,16
    2bc4:	9080080c 	andi	r2,r18,32
    2bc8:	1003a326 	beq	r2,zero,3a58 <___vfprintf_internal_r+0x13c4>
    2bcc:	d9002e17 	ldw	r4,184(sp)
    2bd0:	20800117 	ldw	r2,4(r4)
    2bd4:	24c00017 	ldw	r19,0(r4)
    2bd8:	21000204 	addi	r4,r4,8
    2bdc:	d9002e15 	stw	r4,184(sp)
    2be0:	102d883a 	mov	r22,r2
    2be4:	10047316 	blt	r2,zero,3db4 <___vfprintf_internal_r+0x1720>
    2be8:	d9002a17 	ldw	r4,168(sp)
    2bec:	df002783 	ldbu	fp,158(sp)
    2bf0:	2003e416 	blt	r4,zero,3b84 <___vfprintf_internal_r+0x14f0>
    2bf4:	00ffdfc4 	movi	r3,-129
    2bf8:	9d84b03a 	or	r2,r19,r22
    2bfc:	90e4703a 	and	r18,r18,r3
    2c00:	10018026 	beq	r2,zero,3204 <___vfprintf_internal_r+0xb70>
    2c04:	b003ab26 	beq	r22,zero,3ab4 <___vfprintf_internal_r+0x1420>
    2c08:	dc402915 	stw	r17,164(sp)
    2c0c:	dc001e04 	addi	r16,sp,120
    2c10:	b023883a 	mov	r17,r22
    2c14:	402d883a 	mov	r22,r8
    2c18:	9809883a 	mov	r4,r19
    2c1c:	880b883a 	mov	r5,r17
    2c20:	01800284 	movi	r6,10
    2c24:	000f883a 	mov	r7,zero
    2c28:	000c3b80 	call	c3b8 <__umoddi3>
    2c2c:	10800c04 	addi	r2,r2,48
    2c30:	843fffc4 	addi	r16,r16,-1
    2c34:	9809883a 	mov	r4,r19
    2c38:	880b883a 	mov	r5,r17
    2c3c:	80800005 	stb	r2,0(r16)
    2c40:	01800284 	movi	r6,10
    2c44:	000f883a 	mov	r7,zero
    2c48:	000bdbc0 	call	bdbc <__udivdi3>
    2c4c:	1027883a 	mov	r19,r2
    2c50:	10c4b03a 	or	r2,r2,r3
    2c54:	1823883a 	mov	r17,r3
    2c58:	103fef1e 	bne	r2,zero,2c18 <_gp+0xfffe6abc>
    2c5c:	d8c02817 	ldw	r3,160(sp)
    2c60:	dc402917 	ldw	r17,164(sp)
    2c64:	b011883a 	mov	r8,r22
    2c68:	1c07c83a 	sub	r3,r3,r16
    2c6c:	d8c02b15 	stw	r3,172(sp)
    2c70:	00005f06 	br	2df0 <___vfprintf_internal_r+0x75c>
    2c74:	8025883a 	mov	r18,r16
    2c78:	dc002903 	ldbu	r16,164(sp)
    2c7c:	e011883a 	mov	r8,fp
    2c80:	84003fcc 	andi	r16,r16,255
    2c84:	80071e1e 	bne	r16,zero,4900 <___vfprintf_internal_r+0x226c>
    2c88:	9080020c 	andi	r2,r18,8
    2c8c:	1004af26 	beq	r2,zero,3f4c <___vfprintf_internal_r+0x18b8>
    2c90:	d9002e17 	ldw	r4,184(sp)
    2c94:	d9402e17 	ldw	r5,184(sp)
    2c98:	d8802e17 	ldw	r2,184(sp)
    2c9c:	21000017 	ldw	r4,0(r4)
    2ca0:	29400117 	ldw	r5,4(r5)
    2ca4:	10800204 	addi	r2,r2,8
    2ca8:	d9003615 	stw	r4,216(sp)
    2cac:	d9403815 	stw	r5,224(sp)
    2cb0:	d8802e15 	stw	r2,184(sp)
    2cb4:	d9003617 	ldw	r4,216(sp)
    2cb8:	d9403817 	ldw	r5,224(sp)
    2cbc:	da003d15 	stw	r8,244(sp)
    2cc0:	04000044 	movi	r16,1
    2cc4:	0009a980 	call	9a98 <__fpclassifyd>
    2cc8:	da003d17 	ldw	r8,244(sp)
    2ccc:	1404441e 	bne	r2,r16,3de0 <___vfprintf_internal_r+0x174c>
    2cd0:	d9003617 	ldw	r4,216(sp)
    2cd4:	d9403817 	ldw	r5,224(sp)
    2cd8:	000d883a 	mov	r6,zero
    2cdc:	000f883a 	mov	r7,zero
    2ce0:	000df380 	call	df38 <__ledf2>
    2ce4:	da003d17 	ldw	r8,244(sp)
    2ce8:	1005e316 	blt	r2,zero,4478 <___vfprintf_internal_r+0x1de4>
    2cec:	df002783 	ldbu	fp,158(sp)
    2cf0:	008011c4 	movi	r2,71
    2cf4:	1445580e 	bge	r2,r17,4258 <___vfprintf_internal_r+0x1bc4>
    2cf8:	04000074 	movhi	r16,1
    2cfc:	8408ee04 	addi	r16,r16,9144
    2d00:	00c000c4 	movi	r3,3
    2d04:	00bfdfc4 	movi	r2,-129
    2d08:	d8c02915 	stw	r3,164(sp)
    2d0c:	90a4703a 	and	r18,r18,r2
    2d10:	d8c02b15 	stw	r3,172(sp)
    2d14:	d8002a15 	stw	zero,168(sp)
    2d18:	d8003215 	stw	zero,200(sp)
    2d1c:	00003a06 	br	2e08 <___vfprintf_internal_r+0x774>
    2d20:	84000214 	ori	r16,r16,8
    2d24:	ac400007 	ldb	r17,0(r21)
    2d28:	003ebc06 	br	281c <_gp+0xfffe66c0>
    2d2c:	8025883a 	mov	r18,r16
    2d30:	dc002903 	ldbu	r16,164(sp)
    2d34:	e011883a 	mov	r8,fp
    2d38:	84003fcc 	andi	r16,r16,255
    2d3c:	8007001e 	bne	r16,zero,4940 <___vfprintf_internal_r+0x22ac>
    2d40:	94800414 	ori	r18,r18,16
    2d44:	9080080c 	andi	r2,r18,32
    2d48:	1002fa26 	beq	r2,zero,3934 <___vfprintf_internal_r+0x12a0>
    2d4c:	d9002e17 	ldw	r4,184(sp)
    2d50:	d9402a17 	ldw	r5,168(sp)
    2d54:	d8002785 	stb	zero,158(sp)
    2d58:	20800204 	addi	r2,r4,8
    2d5c:	24c00017 	ldw	r19,0(r4)
    2d60:	25800117 	ldw	r22,4(r4)
    2d64:	2804b116 	blt	r5,zero,402c <___vfprintf_internal_r+0x1998>
    2d68:	013fdfc4 	movi	r4,-129
    2d6c:	9d86b03a 	or	r3,r19,r22
    2d70:	d8802e15 	stw	r2,184(sp)
    2d74:	9124703a 	and	r18,r18,r4
    2d78:	1802fb1e 	bne	r3,zero,3968 <___vfprintf_internal_r+0x12d4>
    2d7c:	d8c02a17 	ldw	r3,168(sp)
    2d80:	0039883a 	mov	fp,zero
    2d84:	1805e526 	beq	r3,zero,451c <___vfprintf_internal_r+0x1e88>
    2d88:	0027883a 	mov	r19,zero
    2d8c:	002d883a 	mov	r22,zero
    2d90:	dc001e04 	addi	r16,sp,120
    2d94:	9806d0fa 	srli	r3,r19,3
    2d98:	b008977a 	slli	r4,r22,29
    2d9c:	b02cd0fa 	srli	r22,r22,3
    2da0:	9cc001cc 	andi	r19,r19,7
    2da4:	98800c04 	addi	r2,r19,48
    2da8:	843fffc4 	addi	r16,r16,-1
    2dac:	20e6b03a 	or	r19,r4,r3
    2db0:	80800005 	stb	r2,0(r16)
    2db4:	9d86b03a 	or	r3,r19,r22
    2db8:	183ff61e 	bne	r3,zero,2d94 <_gp+0xfffe6c38>
    2dbc:	90c0004c 	andi	r3,r18,1
    2dc0:	18014126 	beq	r3,zero,32c8 <___vfprintf_internal_r+0xc34>
    2dc4:	10803fcc 	andi	r2,r2,255
    2dc8:	1080201c 	xori	r2,r2,128
    2dcc:	10bfe004 	addi	r2,r2,-128
    2dd0:	00c00c04 	movi	r3,48
    2dd4:	10c13c26 	beq	r2,r3,32c8 <___vfprintf_internal_r+0xc34>
    2dd8:	80ffffc5 	stb	r3,-1(r16)
    2ddc:	d8c02817 	ldw	r3,160(sp)
    2de0:	80bfffc4 	addi	r2,r16,-1
    2de4:	1021883a 	mov	r16,r2
    2de8:	1887c83a 	sub	r3,r3,r2
    2dec:	d8c02b15 	stw	r3,172(sp)
    2df0:	d8802b17 	ldw	r2,172(sp)
    2df4:	d9002a17 	ldw	r4,168(sp)
    2df8:	1100010e 	bge	r2,r4,2e00 <___vfprintf_internal_r+0x76c>
    2dfc:	2005883a 	mov	r2,r4
    2e00:	d8802915 	stw	r2,164(sp)
    2e04:	d8003215 	stw	zero,200(sp)
    2e08:	e7003fcc 	andi	fp,fp,255
    2e0c:	e700201c 	xori	fp,fp,128
    2e10:	e73fe004 	addi	fp,fp,-128
    2e14:	e0000326 	beq	fp,zero,2e24 <___vfprintf_internal_r+0x790>
    2e18:	d8c02917 	ldw	r3,164(sp)
    2e1c:	18c00044 	addi	r3,r3,1
    2e20:	d8c02915 	stw	r3,164(sp)
    2e24:	90c0008c 	andi	r3,r18,2
    2e28:	d8c02c15 	stw	r3,176(sp)
    2e2c:	18000326 	beq	r3,zero,2e3c <___vfprintf_internal_r+0x7a8>
    2e30:	d8c02917 	ldw	r3,164(sp)
    2e34:	18c00084 	addi	r3,r3,2
    2e38:	d8c02915 	stw	r3,164(sp)
    2e3c:	90c0210c 	andi	r3,r18,132
    2e40:	d8c03015 	stw	r3,192(sp)
    2e44:	1801c51e 	bne	r3,zero,355c <___vfprintf_internal_r+0xec8>
    2e48:	d9003117 	ldw	r4,196(sp)
    2e4c:	d8c02917 	ldw	r3,164(sp)
    2e50:	20e7c83a 	sub	r19,r4,r3
    2e54:	04c1c10e 	bge	zero,r19,355c <___vfprintf_internal_r+0xec8>
    2e58:	02400404 	movi	r9,16
    2e5c:	d8c02017 	ldw	r3,128(sp)
    2e60:	d8801f17 	ldw	r2,124(sp)
    2e64:	4cc52f0e 	bge	r9,r19,4324 <___vfprintf_internal_r+0x1c90>
    2e68:	01400074 	movhi	r5,1
    2e6c:	29490184 	addi	r5,r5,9222
    2e70:	dc403b15 	stw	r17,236(sp)
    2e74:	d9403515 	stw	r5,212(sp)
    2e78:	9823883a 	mov	r17,r19
    2e7c:	482d883a 	mov	r22,r9
    2e80:	9027883a 	mov	r19,r18
    2e84:	070001c4 	movi	fp,7
    2e88:	8025883a 	mov	r18,r16
    2e8c:	dc002d17 	ldw	r16,180(sp)
    2e90:	00000306 	br	2ea0 <___vfprintf_internal_r+0x80c>
    2e94:	8c7ffc04 	addi	r17,r17,-16
    2e98:	42000204 	addi	r8,r8,8
    2e9c:	b440130e 	bge	r22,r17,2eec <___vfprintf_internal_r+0x858>
    2ea0:	01000074 	movhi	r4,1
    2ea4:	18c00404 	addi	r3,r3,16
    2ea8:	10800044 	addi	r2,r2,1
    2eac:	21090184 	addi	r4,r4,9222
    2eb0:	41000015 	stw	r4,0(r8)
    2eb4:	45800115 	stw	r22,4(r8)
    2eb8:	d8c02015 	stw	r3,128(sp)
    2ebc:	d8801f15 	stw	r2,124(sp)
    2ec0:	e0bff40e 	bge	fp,r2,2e94 <_gp+0xfffe6d38>
    2ec4:	d9801e04 	addi	r6,sp,120
    2ec8:	b80b883a 	mov	r5,r23
    2ecc:	8009883a 	mov	r4,r16
    2ed0:	0009e740 	call	9e74 <__sprint_r>
    2ed4:	103ef31e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    2ed8:	8c7ffc04 	addi	r17,r17,-16
    2edc:	d8c02017 	ldw	r3,128(sp)
    2ee0:	d8801f17 	ldw	r2,124(sp)
    2ee4:	da000404 	addi	r8,sp,16
    2ee8:	b47fed16 	blt	r22,r17,2ea0 <_gp+0xfffe6d44>
    2eec:	9021883a 	mov	r16,r18
    2ef0:	9825883a 	mov	r18,r19
    2ef4:	8827883a 	mov	r19,r17
    2ef8:	dc403b17 	ldw	r17,236(sp)
    2efc:	d9403517 	ldw	r5,212(sp)
    2f00:	98c7883a 	add	r3,r19,r3
    2f04:	10800044 	addi	r2,r2,1
    2f08:	41400015 	stw	r5,0(r8)
    2f0c:	44c00115 	stw	r19,4(r8)
    2f10:	d8c02015 	stw	r3,128(sp)
    2f14:	d8801f15 	stw	r2,124(sp)
    2f18:	010001c4 	movi	r4,7
    2f1c:	2082c516 	blt	r4,r2,3a34 <___vfprintf_internal_r+0x13a0>
    2f20:	df002787 	ldb	fp,158(sp)
    2f24:	42000204 	addi	r8,r8,8
    2f28:	e0000c26 	beq	fp,zero,2f5c <___vfprintf_internal_r+0x8c8>
    2f2c:	d8801f17 	ldw	r2,124(sp)
    2f30:	d9002784 	addi	r4,sp,158
    2f34:	18c00044 	addi	r3,r3,1
    2f38:	10800044 	addi	r2,r2,1
    2f3c:	41000015 	stw	r4,0(r8)
    2f40:	01000044 	movi	r4,1
    2f44:	41000115 	stw	r4,4(r8)
    2f48:	d8c02015 	stw	r3,128(sp)
    2f4c:	d8801f15 	stw	r2,124(sp)
    2f50:	010001c4 	movi	r4,7
    2f54:	20825e16 	blt	r4,r2,38d0 <___vfprintf_internal_r+0x123c>
    2f58:	42000204 	addi	r8,r8,8
    2f5c:	d8802c17 	ldw	r2,176(sp)
    2f60:	10000c26 	beq	r2,zero,2f94 <___vfprintf_internal_r+0x900>
    2f64:	d8801f17 	ldw	r2,124(sp)
    2f68:	d9002704 	addi	r4,sp,156
    2f6c:	18c00084 	addi	r3,r3,2
    2f70:	10800044 	addi	r2,r2,1
    2f74:	41000015 	stw	r4,0(r8)
    2f78:	01000084 	movi	r4,2
    2f7c:	41000115 	stw	r4,4(r8)
    2f80:	d8c02015 	stw	r3,128(sp)
    2f84:	d8801f15 	stw	r2,124(sp)
    2f88:	010001c4 	movi	r4,7
    2f8c:	20825816 	blt	r4,r2,38f0 <___vfprintf_internal_r+0x125c>
    2f90:	42000204 	addi	r8,r8,8
    2f94:	d9003017 	ldw	r4,192(sp)
    2f98:	00802004 	movi	r2,128
    2f9c:	2081bb26 	beq	r4,r2,368c <___vfprintf_internal_r+0xff8>
    2fa0:	d9402a17 	ldw	r5,168(sp)
    2fa4:	d8802b17 	ldw	r2,172(sp)
    2fa8:	28adc83a 	sub	r22,r5,r2
    2fac:	0580310e 	bge	zero,r22,3074 <___vfprintf_internal_r+0x9e0>
    2fb0:	07000404 	movi	fp,16
    2fb4:	d8801f17 	ldw	r2,124(sp)
    2fb8:	e584360e 	bge	fp,r22,4094 <___vfprintf_internal_r+0x1a00>
    2fbc:	01400074 	movhi	r5,1
    2fc0:	2948fd84 	addi	r5,r5,9206
    2fc4:	dc402a15 	stw	r17,168(sp)
    2fc8:	d9402c15 	stw	r5,176(sp)
    2fcc:	b023883a 	mov	r17,r22
    2fd0:	04c001c4 	movi	r19,7
    2fd4:	a82d883a 	mov	r22,r21
    2fd8:	902b883a 	mov	r21,r18
    2fdc:	8025883a 	mov	r18,r16
    2fe0:	dc002d17 	ldw	r16,180(sp)
    2fe4:	00000306 	br	2ff4 <___vfprintf_internal_r+0x960>
    2fe8:	8c7ffc04 	addi	r17,r17,-16
    2fec:	42000204 	addi	r8,r8,8
    2ff0:	e440110e 	bge	fp,r17,3038 <___vfprintf_internal_r+0x9a4>
    2ff4:	18c00404 	addi	r3,r3,16
    2ff8:	10800044 	addi	r2,r2,1
    2ffc:	45000015 	stw	r20,0(r8)
    3000:	47000115 	stw	fp,4(r8)
    3004:	d8c02015 	stw	r3,128(sp)
    3008:	d8801f15 	stw	r2,124(sp)
    300c:	98bff60e 	bge	r19,r2,2fe8 <_gp+0xfffe6e8c>
    3010:	d9801e04 	addi	r6,sp,120
    3014:	b80b883a 	mov	r5,r23
    3018:	8009883a 	mov	r4,r16
    301c:	0009e740 	call	9e74 <__sprint_r>
    3020:	103ea01e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    3024:	8c7ffc04 	addi	r17,r17,-16
    3028:	d8c02017 	ldw	r3,128(sp)
    302c:	d8801f17 	ldw	r2,124(sp)
    3030:	da000404 	addi	r8,sp,16
    3034:	e47fef16 	blt	fp,r17,2ff4 <_gp+0xfffe6e98>
    3038:	9021883a 	mov	r16,r18
    303c:	a825883a 	mov	r18,r21
    3040:	b02b883a 	mov	r21,r22
    3044:	882d883a 	mov	r22,r17
    3048:	dc402a17 	ldw	r17,168(sp)
    304c:	d9002c17 	ldw	r4,176(sp)
    3050:	1d87883a 	add	r3,r3,r22
    3054:	10800044 	addi	r2,r2,1
    3058:	41000015 	stw	r4,0(r8)
    305c:	45800115 	stw	r22,4(r8)
    3060:	d8c02015 	stw	r3,128(sp)
    3064:	d8801f15 	stw	r2,124(sp)
    3068:	010001c4 	movi	r4,7
    306c:	20821016 	blt	r4,r2,38b0 <___vfprintf_internal_r+0x121c>
    3070:	42000204 	addi	r8,r8,8
    3074:	9080400c 	andi	r2,r18,256
    3078:	10013a1e 	bne	r2,zero,3564 <___vfprintf_internal_r+0xed0>
    307c:	d9402b17 	ldw	r5,172(sp)
    3080:	d8801f17 	ldw	r2,124(sp)
    3084:	44000015 	stw	r16,0(r8)
    3088:	1947883a 	add	r3,r3,r5
    308c:	10800044 	addi	r2,r2,1
    3090:	41400115 	stw	r5,4(r8)
    3094:	d8c02015 	stw	r3,128(sp)
    3098:	d8801f15 	stw	r2,124(sp)
    309c:	010001c4 	movi	r4,7
    30a0:	2081f516 	blt	r4,r2,3878 <___vfprintf_internal_r+0x11e4>
    30a4:	42000204 	addi	r8,r8,8
    30a8:	9480010c 	andi	r18,r18,4
    30ac:	90003226 	beq	r18,zero,3178 <___vfprintf_internal_r+0xae4>
    30b0:	d9403117 	ldw	r5,196(sp)
    30b4:	d8802917 	ldw	r2,164(sp)
    30b8:	28a1c83a 	sub	r16,r5,r2
    30bc:	04002e0e 	bge	zero,r16,3178 <___vfprintf_internal_r+0xae4>
    30c0:	04400404 	movi	r17,16
    30c4:	d8801f17 	ldw	r2,124(sp)
    30c8:	8c04c40e 	bge	r17,r16,43dc <___vfprintf_internal_r+0x1d48>
    30cc:	01400074 	movhi	r5,1
    30d0:	29490184 	addi	r5,r5,9222
    30d4:	d9403515 	stw	r5,212(sp)
    30d8:	048001c4 	movi	r18,7
    30dc:	dcc02d17 	ldw	r19,180(sp)
    30e0:	00000306 	br	30f0 <___vfprintf_internal_r+0xa5c>
    30e4:	843ffc04 	addi	r16,r16,-16
    30e8:	42000204 	addi	r8,r8,8
    30ec:	8c00130e 	bge	r17,r16,313c <___vfprintf_internal_r+0xaa8>
    30f0:	01000074 	movhi	r4,1
    30f4:	18c00404 	addi	r3,r3,16
    30f8:	10800044 	addi	r2,r2,1
    30fc:	21090184 	addi	r4,r4,9222
    3100:	41000015 	stw	r4,0(r8)
    3104:	44400115 	stw	r17,4(r8)
    3108:	d8c02015 	stw	r3,128(sp)
    310c:	d8801f15 	stw	r2,124(sp)
    3110:	90bff40e 	bge	r18,r2,30e4 <_gp+0xfffe6f88>
    3114:	d9801e04 	addi	r6,sp,120
    3118:	b80b883a 	mov	r5,r23
    311c:	9809883a 	mov	r4,r19
    3120:	0009e740 	call	9e74 <__sprint_r>
    3124:	103e5f1e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    3128:	843ffc04 	addi	r16,r16,-16
    312c:	d8c02017 	ldw	r3,128(sp)
    3130:	d8801f17 	ldw	r2,124(sp)
    3134:	da000404 	addi	r8,sp,16
    3138:	8c3fed16 	blt	r17,r16,30f0 <_gp+0xfffe6f94>
    313c:	d9403517 	ldw	r5,212(sp)
    3140:	1c07883a 	add	r3,r3,r16
    3144:	10800044 	addi	r2,r2,1
    3148:	41400015 	stw	r5,0(r8)
    314c:	44000115 	stw	r16,4(r8)
    3150:	d8c02015 	stw	r3,128(sp)
    3154:	d8801f15 	stw	r2,124(sp)
    3158:	010001c4 	movi	r4,7
    315c:	2080060e 	bge	r4,r2,3178 <___vfprintf_internal_r+0xae4>
    3160:	d9002d17 	ldw	r4,180(sp)
    3164:	d9801e04 	addi	r6,sp,120
    3168:	b80b883a 	mov	r5,r23
    316c:	0009e740 	call	9e74 <__sprint_r>
    3170:	103e4c1e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    3174:	d8c02017 	ldw	r3,128(sp)
    3178:	d8803117 	ldw	r2,196(sp)
    317c:	d9002917 	ldw	r4,164(sp)
    3180:	1100010e 	bge	r2,r4,3188 <___vfprintf_internal_r+0xaf4>
    3184:	2005883a 	mov	r2,r4
    3188:	d9402f17 	ldw	r5,188(sp)
    318c:	288b883a 	add	r5,r5,r2
    3190:	d9402f15 	stw	r5,188(sp)
    3194:	1801c01e 	bne	r3,zero,3898 <___vfprintf_internal_r+0x1204>
    3198:	a8800007 	ldb	r2,0(r21)
    319c:	d8001f15 	stw	zero,124(sp)
    31a0:	da000404 	addi	r8,sp,16
    31a4:	103d751e 	bne	r2,zero,277c <_gp+0xfffe6620>
    31a8:	a823883a 	mov	r17,r21
    31ac:	003d8b06 	br	27dc <_gp+0xfffe6680>
    31b0:	8025883a 	mov	r18,r16
    31b4:	dc002903 	ldbu	r16,164(sp)
    31b8:	e011883a 	mov	r8,fp
    31bc:	84003fcc 	andi	r16,r16,255
    31c0:	8005e51e 	bne	r16,zero,4958 <___vfprintf_internal_r+0x22c4>
    31c4:	94800414 	ori	r18,r18,16
    31c8:	9080080c 	andi	r2,r18,32
    31cc:	10022b26 	beq	r2,zero,3a7c <___vfprintf_internal_r+0x13e8>
    31d0:	d9002e17 	ldw	r4,184(sp)
    31d4:	d9402a17 	ldw	r5,168(sp)
    31d8:	d8002785 	stb	zero,158(sp)
    31dc:	20c00204 	addi	r3,r4,8
    31e0:	24c00017 	ldw	r19,0(r4)
    31e4:	25800117 	ldw	r22,4(r4)
    31e8:	28042e16 	blt	r5,zero,42a4 <___vfprintf_internal_r+0x1c10>
    31ec:	013fdfc4 	movi	r4,-129
    31f0:	9d84b03a 	or	r2,r19,r22
    31f4:	d8c02e15 	stw	r3,184(sp)
    31f8:	9124703a 	and	r18,r18,r4
    31fc:	0039883a 	mov	fp,zero
    3200:	103e801e 	bne	r2,zero,2c04 <_gp+0xfffe6aa8>
    3204:	d9002a17 	ldw	r4,168(sp)
    3208:	2002e01e 	bne	r4,zero,3d8c <___vfprintf_internal_r+0x16f8>
    320c:	d8002a15 	stw	zero,168(sp)
    3210:	d8002b15 	stw	zero,172(sp)
    3214:	dc001e04 	addi	r16,sp,120
    3218:	003ef506 	br	2df0 <_gp+0xfffe6c94>
    321c:	8025883a 	mov	r18,r16
    3220:	dc002903 	ldbu	r16,164(sp)
    3224:	e011883a 	mov	r8,fp
    3228:	84003fcc 	andi	r16,r16,255
    322c:	8005ba1e 	bne	r16,zero,4918 <___vfprintf_internal_r+0x2284>
    3230:	01000074 	movhi	r4,1
    3234:	2108f104 	addi	r4,r4,9156
    3238:	d9003915 	stw	r4,228(sp)
    323c:	9080080c 	andi	r2,r18,32
    3240:	10006126 	beq	r2,zero,33c8 <___vfprintf_internal_r+0xd34>
    3244:	d9402e17 	ldw	r5,184(sp)
    3248:	2cc00017 	ldw	r19,0(r5)
    324c:	2d800117 	ldw	r22,4(r5)
    3250:	29400204 	addi	r5,r5,8
    3254:	d9402e15 	stw	r5,184(sp)
    3258:	9080004c 	andi	r2,r18,1
    325c:	1001ac26 	beq	r2,zero,3910 <___vfprintf_internal_r+0x127c>
    3260:	9d84b03a 	or	r2,r19,r22
    3264:	10038526 	beq	r2,zero,407c <___vfprintf_internal_r+0x19e8>
    3268:	d8c02a17 	ldw	r3,168(sp)
    326c:	00800c04 	movi	r2,48
    3270:	d8802705 	stb	r2,156(sp)
    3274:	dc402745 	stb	r17,157(sp)
    3278:	d8002785 	stb	zero,158(sp)
    327c:	90800094 	ori	r2,r18,2
    3280:	18047916 	blt	r3,zero,4468 <___vfprintf_internal_r+0x1dd4>
    3284:	00bfdfc4 	movi	r2,-129
    3288:	90a4703a 	and	r18,r18,r2
    328c:	94800094 	ori	r18,r18,2
    3290:	0039883a 	mov	fp,zero
    3294:	d9003917 	ldw	r4,228(sp)
    3298:	dc001e04 	addi	r16,sp,120
    329c:	988003cc 	andi	r2,r19,15
    32a0:	b006973a 	slli	r3,r22,28
    32a4:	2085883a 	add	r2,r4,r2
    32a8:	9826d13a 	srli	r19,r19,4
    32ac:	10800003 	ldbu	r2,0(r2)
    32b0:	b02cd13a 	srli	r22,r22,4
    32b4:	843fffc4 	addi	r16,r16,-1
    32b8:	1ce6b03a 	or	r19,r3,r19
    32bc:	80800005 	stb	r2,0(r16)
    32c0:	9d84b03a 	or	r2,r19,r22
    32c4:	103ff51e 	bne	r2,zero,329c <_gp+0xfffe7140>
    32c8:	d8c02817 	ldw	r3,160(sp)
    32cc:	1c07c83a 	sub	r3,r3,r16
    32d0:	d8c02b15 	stw	r3,172(sp)
    32d4:	003ec606 	br	2df0 <_gp+0xfffe6c94>
    32d8:	8025883a 	mov	r18,r16
    32dc:	dc002903 	ldbu	r16,164(sp)
    32e0:	e011883a 	mov	r8,fp
    32e4:	84003fcc 	andi	r16,r16,255
    32e8:	803e9626 	beq	r16,zero,2d44 <_gp+0xfffe6be8>
    32ec:	d8c02b03 	ldbu	r3,172(sp)
    32f0:	d8c02785 	stb	r3,158(sp)
    32f4:	003e9306 	br	2d44 <_gp+0xfffe6be8>
    32f8:	00c00044 	movi	r3,1
    32fc:	d8c02905 	stb	r3,164(sp)
    3300:	00c00ac4 	movi	r3,43
    3304:	d8c02b05 	stb	r3,172(sp)
    3308:	ac400007 	ldb	r17,0(r21)
    330c:	003d4306 	br	281c <_gp+0xfffe66c0>
    3310:	84000814 	ori	r16,r16,32
    3314:	ac400007 	ldb	r17,0(r21)
    3318:	003d4006 	br	281c <_gp+0xfffe66c0>
    331c:	d8802e17 	ldw	r2,184(sp)
    3320:	8025883a 	mov	r18,r16
    3324:	d8002785 	stb	zero,158(sp)
    3328:	14000017 	ldw	r16,0(r2)
    332c:	e011883a 	mov	r8,fp
    3330:	14c00104 	addi	r19,r2,4
    3334:	80042d26 	beq	r16,zero,43ec <___vfprintf_internal_r+0x1d58>
    3338:	d8c02a17 	ldw	r3,168(sp)
    333c:	1803e416 	blt	r3,zero,42d0 <___vfprintf_internal_r+0x1c3c>
    3340:	180d883a 	mov	r6,r3
    3344:	000b883a 	mov	r5,zero
    3348:	8009883a 	mov	r4,r16
    334c:	df003d15 	stw	fp,244(sp)
    3350:	0007fcc0 	call	7fcc <memchr>
    3354:	da003d17 	ldw	r8,244(sp)
    3358:	10046826 	beq	r2,zero,44fc <___vfprintf_internal_r+0x1e68>
    335c:	1405c83a 	sub	r2,r2,r16
    3360:	d8802b15 	stw	r2,172(sp)
    3364:	1003e016 	blt	r2,zero,42e8 <___vfprintf_internal_r+0x1c54>
    3368:	df002783 	ldbu	fp,158(sp)
    336c:	d8802915 	stw	r2,164(sp)
    3370:	dcc02e15 	stw	r19,184(sp)
    3374:	d8002a15 	stw	zero,168(sp)
    3378:	d8003215 	stw	zero,200(sp)
    337c:	003ea206 	br	2e08 <_gp+0xfffe6cac>
    3380:	8025883a 	mov	r18,r16
    3384:	dc002903 	ldbu	r16,164(sp)
    3388:	e011883a 	mov	r8,fp
    338c:	84003fcc 	andi	r16,r16,255
    3390:	803f8d26 	beq	r16,zero,31c8 <_gp+0xfffe706c>
    3394:	d8c02b03 	ldbu	r3,172(sp)
    3398:	d8c02785 	stb	r3,158(sp)
    339c:	003f8a06 	br	31c8 <_gp+0xfffe706c>
    33a0:	8025883a 	mov	r18,r16
    33a4:	dc002903 	ldbu	r16,164(sp)
    33a8:	e011883a 	mov	r8,fp
    33ac:	84003fcc 	andi	r16,r16,255
    33b0:	8005661e 	bne	r16,zero,494c <___vfprintf_internal_r+0x22b8>
    33b4:	01000074 	movhi	r4,1
    33b8:	2108f604 	addi	r4,r4,9176
    33bc:	d9003915 	stw	r4,228(sp)
    33c0:	9080080c 	andi	r2,r18,32
    33c4:	103f9f1e 	bne	r2,zero,3244 <_gp+0xfffe70e8>
    33c8:	9080040c 	andi	r2,r18,16
    33cc:	1002eb26 	beq	r2,zero,3f7c <___vfprintf_internal_r+0x18e8>
    33d0:	d8802e17 	ldw	r2,184(sp)
    33d4:	002d883a 	mov	r22,zero
    33d8:	14c00017 	ldw	r19,0(r2)
    33dc:	10800104 	addi	r2,r2,4
    33e0:	d8802e15 	stw	r2,184(sp)
    33e4:	003f9c06 	br	3258 <_gp+0xfffe70fc>
    33e8:	d8802b07 	ldb	r2,172(sp)
    33ec:	1002e11e 	bne	r2,zero,3f74 <___vfprintf_internal_r+0x18e0>
    33f0:	00c00044 	movi	r3,1
    33f4:	d8c02905 	stb	r3,164(sp)
    33f8:	00c00804 	movi	r3,32
    33fc:	d8c02b05 	stb	r3,172(sp)
    3400:	ac400007 	ldb	r17,0(r21)
    3404:	003d0506 	br	281c <_gp+0xfffe66c0>
    3408:	84000054 	ori	r16,r16,1
    340c:	ac400007 	ldb	r17,0(r21)
    3410:	003d0206 	br	281c <_gp+0xfffe66c0>
    3414:	8025883a 	mov	r18,r16
    3418:	dc002903 	ldbu	r16,164(sp)
    341c:	e011883a 	mov	r8,fp
    3420:	84003fcc 	andi	r16,r16,255
    3424:	803de726 	beq	r16,zero,2bc4 <_gp+0xfffe6a68>
    3428:	d8c02b03 	ldbu	r3,172(sp)
    342c:	d8c02785 	stb	r3,158(sp)
    3430:	003de406 	br	2bc4 <_gp+0xfffe6a68>
    3434:	84001014 	ori	r16,r16,64
    3438:	ac400007 	ldb	r17,0(r21)
    343c:	003cf706 	br	281c <_gp+0xfffe66c0>
    3440:	ac400007 	ldb	r17,0(r21)
    3444:	00801b04 	movi	r2,108
    3448:	88838f26 	beq	r17,r2,4288 <___vfprintf_internal_r+0x1bf4>
    344c:	84000414 	ori	r16,r16,16
    3450:	003cf206 	br	281c <_gp+0xfffe66c0>
    3454:	8025883a 	mov	r18,r16
    3458:	dc002903 	ldbu	r16,164(sp)
    345c:	e011883a 	mov	r8,fp
    3460:	84003fcc 	andi	r16,r16,255
    3464:	80053f1e 	bne	r16,zero,4964 <___vfprintf_internal_r+0x22d0>
    3468:	9080080c 	andi	r2,r18,32
    346c:	1002d226 	beq	r2,zero,3fb8 <___vfprintf_internal_r+0x1924>
    3470:	d9002e17 	ldw	r4,184(sp)
    3474:	d9402f17 	ldw	r5,188(sp)
    3478:	20800017 	ldw	r2,0(r4)
    347c:	2807d7fa 	srai	r3,r5,31
    3480:	21000104 	addi	r4,r4,4
    3484:	d9002e15 	stw	r4,184(sp)
    3488:	11400015 	stw	r5,0(r2)
    348c:	10c00115 	stw	r3,4(r2)
    3490:	003cb806 	br	2774 <_gp+0xfffe6618>
    3494:	d8c02e17 	ldw	r3,184(sp)
    3498:	d9002e17 	ldw	r4,184(sp)
    349c:	8025883a 	mov	r18,r16
    34a0:	18800017 	ldw	r2,0(r3)
    34a4:	21000104 	addi	r4,r4,4
    34a8:	00c00044 	movi	r3,1
    34ac:	e011883a 	mov	r8,fp
    34b0:	d8c02915 	stw	r3,164(sp)
    34b4:	d8002785 	stb	zero,158(sp)
    34b8:	d8801405 	stb	r2,80(sp)
    34bc:	d9002e15 	stw	r4,184(sp)
    34c0:	d8c02b15 	stw	r3,172(sp)
    34c4:	d8002a15 	stw	zero,168(sp)
    34c8:	d8003215 	stw	zero,200(sp)
    34cc:	dc001404 	addi	r16,sp,80
    34d0:	0039883a 	mov	fp,zero
    34d4:	003e5306 	br	2e24 <_gp+0xfffe6cc8>
    34d8:	01000074 	movhi	r4,1
    34dc:	2108f604 	addi	r4,r4,9176
    34e0:	0039883a 	mov	fp,zero
    34e4:	d9003915 	stw	r4,228(sp)
    34e8:	04401e04 	movi	r17,120
    34ec:	003f6906 	br	3294 <_gp+0xfffe7138>
    34f0:	8025883a 	mov	r18,r16
    34f4:	dc002903 	ldbu	r16,164(sp)
    34f8:	e011883a 	mov	r8,fp
    34fc:	84003fcc 	andi	r16,r16,255
    3500:	8005081e 	bne	r16,zero,4924 <___vfprintf_internal_r+0x2290>
    3504:	883d6126 	beq	r17,zero,2a8c <_gp+0xfffe6930>
    3508:	00c00044 	movi	r3,1
    350c:	d8c02915 	stw	r3,164(sp)
    3510:	dc401405 	stb	r17,80(sp)
    3514:	d8002785 	stb	zero,158(sp)
    3518:	003fe906 	br	34c0 <_gp+0xfffe7364>
    351c:	01400074 	movhi	r5,1
    3520:	2948f604 	addi	r5,r5,9176
    3524:	d9403915 	stw	r5,228(sp)
    3528:	d8c02e15 	stw	r3,184(sp)
    352c:	1025883a 	mov	r18,r2
    3530:	04401e04 	movi	r17,120
    3534:	9d84b03a 	or	r2,r19,r22
    3538:	1000fc1e 	bne	r2,zero,392c <___vfprintf_internal_r+0x1298>
    353c:	0039883a 	mov	fp,zero
    3540:	00800084 	movi	r2,2
    3544:	10803fcc 	andi	r2,r2,255
    3548:	00c00044 	movi	r3,1
    354c:	10c20f26 	beq	r2,r3,3d8c <___vfprintf_internal_r+0x16f8>
    3550:	00c00084 	movi	r3,2
    3554:	10fd3326 	beq	r2,r3,2a24 <_gp+0xfffe68c8>
    3558:	003e0b06 	br	2d88 <_gp+0xfffe6c2c>
    355c:	d8c02017 	ldw	r3,128(sp)
    3560:	003e7106 	br	2f28 <_gp+0xfffe6dcc>
    3564:	00801944 	movi	r2,101
    3568:	14407e0e 	bge	r2,r17,3764 <___vfprintf_internal_r+0x10d0>
    356c:	d9003617 	ldw	r4,216(sp)
    3570:	d9403817 	ldw	r5,224(sp)
    3574:	000d883a 	mov	r6,zero
    3578:	000f883a 	mov	r7,zero
    357c:	d8c03c15 	stw	r3,240(sp)
    3580:	da003d15 	stw	r8,244(sp)
    3584:	000ddd40 	call	ddd4 <__eqdf2>
    3588:	d8c03c17 	ldw	r3,240(sp)
    358c:	da003d17 	ldw	r8,244(sp)
    3590:	1000f71e 	bne	r2,zero,3970 <___vfprintf_internal_r+0x12dc>
    3594:	d8801f17 	ldw	r2,124(sp)
    3598:	01000074 	movhi	r4,1
    359c:	2108fd04 	addi	r4,r4,9204
    35a0:	18c00044 	addi	r3,r3,1
    35a4:	10800044 	addi	r2,r2,1
    35a8:	41000015 	stw	r4,0(r8)
    35ac:	01000044 	movi	r4,1
    35b0:	41000115 	stw	r4,4(r8)
    35b4:	d8c02015 	stw	r3,128(sp)
    35b8:	d8801f15 	stw	r2,124(sp)
    35bc:	010001c4 	movi	r4,7
    35c0:	2082b816 	blt	r4,r2,40a4 <___vfprintf_internal_r+0x1a10>
    35c4:	42000204 	addi	r8,r8,8
    35c8:	d8802617 	ldw	r2,152(sp)
    35cc:	d9403317 	ldw	r5,204(sp)
    35d0:	11400216 	blt	r2,r5,35dc <___vfprintf_internal_r+0xf48>
    35d4:	9080004c 	andi	r2,r18,1
    35d8:	103eb326 	beq	r2,zero,30a8 <_gp+0xfffe6f4c>
    35dc:	d8803717 	ldw	r2,220(sp)
    35e0:	d9003417 	ldw	r4,208(sp)
    35e4:	d9403717 	ldw	r5,220(sp)
    35e8:	1887883a 	add	r3,r3,r2
    35ec:	d8801f17 	ldw	r2,124(sp)
    35f0:	41000015 	stw	r4,0(r8)
    35f4:	41400115 	stw	r5,4(r8)
    35f8:	10800044 	addi	r2,r2,1
    35fc:	d8c02015 	stw	r3,128(sp)
    3600:	d8801f15 	stw	r2,124(sp)
    3604:	010001c4 	movi	r4,7
    3608:	20832916 	blt	r4,r2,42b0 <___vfprintf_internal_r+0x1c1c>
    360c:	42000204 	addi	r8,r8,8
    3610:	d8803317 	ldw	r2,204(sp)
    3614:	143fffc4 	addi	r16,r2,-1
    3618:	043ea30e 	bge	zero,r16,30a8 <_gp+0xfffe6f4c>
    361c:	04400404 	movi	r17,16
    3620:	d8801f17 	ldw	r2,124(sp)
    3624:	8c00880e 	bge	r17,r16,3848 <___vfprintf_internal_r+0x11b4>
    3628:	01400074 	movhi	r5,1
    362c:	2948fd84 	addi	r5,r5,9206
    3630:	d9402c15 	stw	r5,176(sp)
    3634:	058001c4 	movi	r22,7
    3638:	dcc02d17 	ldw	r19,180(sp)
    363c:	00000306 	br	364c <___vfprintf_internal_r+0xfb8>
    3640:	42000204 	addi	r8,r8,8
    3644:	843ffc04 	addi	r16,r16,-16
    3648:	8c00820e 	bge	r17,r16,3854 <___vfprintf_internal_r+0x11c0>
    364c:	18c00404 	addi	r3,r3,16
    3650:	10800044 	addi	r2,r2,1
    3654:	45000015 	stw	r20,0(r8)
    3658:	44400115 	stw	r17,4(r8)
    365c:	d8c02015 	stw	r3,128(sp)
    3660:	d8801f15 	stw	r2,124(sp)
    3664:	b0bff60e 	bge	r22,r2,3640 <_gp+0xfffe74e4>
    3668:	d9801e04 	addi	r6,sp,120
    366c:	b80b883a 	mov	r5,r23
    3670:	9809883a 	mov	r4,r19
    3674:	0009e740 	call	9e74 <__sprint_r>
    3678:	103d0a1e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    367c:	d8c02017 	ldw	r3,128(sp)
    3680:	d8801f17 	ldw	r2,124(sp)
    3684:	da000404 	addi	r8,sp,16
    3688:	003fee06 	br	3644 <_gp+0xfffe74e8>
    368c:	d9403117 	ldw	r5,196(sp)
    3690:	d8802917 	ldw	r2,164(sp)
    3694:	28adc83a 	sub	r22,r5,r2
    3698:	05be410e 	bge	zero,r22,2fa0 <_gp+0xfffe6e44>
    369c:	07000404 	movi	fp,16
    36a0:	d8801f17 	ldw	r2,124(sp)
    36a4:	e5838f0e 	bge	fp,r22,44e4 <___vfprintf_internal_r+0x1e50>
    36a8:	01400074 	movhi	r5,1
    36ac:	2948fd84 	addi	r5,r5,9206
    36b0:	dc403015 	stw	r17,192(sp)
    36b4:	d9402c15 	stw	r5,176(sp)
    36b8:	b023883a 	mov	r17,r22
    36bc:	04c001c4 	movi	r19,7
    36c0:	a82d883a 	mov	r22,r21
    36c4:	902b883a 	mov	r21,r18
    36c8:	8025883a 	mov	r18,r16
    36cc:	dc002d17 	ldw	r16,180(sp)
    36d0:	00000306 	br	36e0 <___vfprintf_internal_r+0x104c>
    36d4:	8c7ffc04 	addi	r17,r17,-16
    36d8:	42000204 	addi	r8,r8,8
    36dc:	e440110e 	bge	fp,r17,3724 <___vfprintf_internal_r+0x1090>
    36e0:	18c00404 	addi	r3,r3,16
    36e4:	10800044 	addi	r2,r2,1
    36e8:	45000015 	stw	r20,0(r8)
    36ec:	47000115 	stw	fp,4(r8)
    36f0:	d8c02015 	stw	r3,128(sp)
    36f4:	d8801f15 	stw	r2,124(sp)
    36f8:	98bff60e 	bge	r19,r2,36d4 <_gp+0xfffe7578>
    36fc:	d9801e04 	addi	r6,sp,120
    3700:	b80b883a 	mov	r5,r23
    3704:	8009883a 	mov	r4,r16
    3708:	0009e740 	call	9e74 <__sprint_r>
    370c:	103ce51e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    3710:	8c7ffc04 	addi	r17,r17,-16
    3714:	d8c02017 	ldw	r3,128(sp)
    3718:	d8801f17 	ldw	r2,124(sp)
    371c:	da000404 	addi	r8,sp,16
    3720:	e47fef16 	blt	fp,r17,36e0 <_gp+0xfffe7584>
    3724:	9021883a 	mov	r16,r18
    3728:	a825883a 	mov	r18,r21
    372c:	b02b883a 	mov	r21,r22
    3730:	882d883a 	mov	r22,r17
    3734:	dc403017 	ldw	r17,192(sp)
    3738:	d9002c17 	ldw	r4,176(sp)
    373c:	1d87883a 	add	r3,r3,r22
    3740:	10800044 	addi	r2,r2,1
    3744:	41000015 	stw	r4,0(r8)
    3748:	45800115 	stw	r22,4(r8)
    374c:	d8c02015 	stw	r3,128(sp)
    3750:	d8801f15 	stw	r2,124(sp)
    3754:	010001c4 	movi	r4,7
    3758:	20818e16 	blt	r4,r2,3d94 <___vfprintf_internal_r+0x1700>
    375c:	42000204 	addi	r8,r8,8
    3760:	003e0f06 	br	2fa0 <_gp+0xfffe6e44>
    3764:	d9403317 	ldw	r5,204(sp)
    3768:	00800044 	movi	r2,1
    376c:	18c00044 	addi	r3,r3,1
    3770:	1141530e 	bge	r2,r5,3cc0 <___vfprintf_internal_r+0x162c>
    3774:	dc401f17 	ldw	r17,124(sp)
    3778:	00800044 	movi	r2,1
    377c:	40800115 	stw	r2,4(r8)
    3780:	8c400044 	addi	r17,r17,1
    3784:	44000015 	stw	r16,0(r8)
    3788:	d8c02015 	stw	r3,128(sp)
    378c:	dc401f15 	stw	r17,124(sp)
    3790:	008001c4 	movi	r2,7
    3794:	14416b16 	blt	r2,r17,3d44 <___vfprintf_internal_r+0x16b0>
    3798:	42000204 	addi	r8,r8,8
    379c:	d8803717 	ldw	r2,220(sp)
    37a0:	d9003417 	ldw	r4,208(sp)
    37a4:	8c400044 	addi	r17,r17,1
    37a8:	10c7883a 	add	r3,r2,r3
    37ac:	40800115 	stw	r2,4(r8)
    37b0:	41000015 	stw	r4,0(r8)
    37b4:	d8c02015 	stw	r3,128(sp)
    37b8:	dc401f15 	stw	r17,124(sp)
    37bc:	008001c4 	movi	r2,7
    37c0:	14416916 	blt	r2,r17,3d68 <___vfprintf_internal_r+0x16d4>
    37c4:	45800204 	addi	r22,r8,8
    37c8:	d9003617 	ldw	r4,216(sp)
    37cc:	d9403817 	ldw	r5,224(sp)
    37d0:	000d883a 	mov	r6,zero
    37d4:	000f883a 	mov	r7,zero
    37d8:	d8c03c15 	stw	r3,240(sp)
    37dc:	000ddd40 	call	ddd4 <__eqdf2>
    37e0:	d8c03c17 	ldw	r3,240(sp)
    37e4:	1000bc26 	beq	r2,zero,3ad8 <___vfprintf_internal_r+0x1444>
    37e8:	d9403317 	ldw	r5,204(sp)
    37ec:	84000044 	addi	r16,r16,1
    37f0:	8c400044 	addi	r17,r17,1
    37f4:	28bfffc4 	addi	r2,r5,-1
    37f8:	1887883a 	add	r3,r3,r2
    37fc:	b0800115 	stw	r2,4(r22)
    3800:	b4000015 	stw	r16,0(r22)
    3804:	d8c02015 	stw	r3,128(sp)
    3808:	dc401f15 	stw	r17,124(sp)
    380c:	008001c4 	movi	r2,7
    3810:	14414316 	blt	r2,r17,3d20 <___vfprintf_internal_r+0x168c>
    3814:	b5800204 	addi	r22,r22,8
    3818:	d9003a17 	ldw	r4,232(sp)
    381c:	df0022c4 	addi	fp,sp,139
    3820:	8c400044 	addi	r17,r17,1
    3824:	20c7883a 	add	r3,r4,r3
    3828:	b7000015 	stw	fp,0(r22)
    382c:	b1000115 	stw	r4,4(r22)
    3830:	d8c02015 	stw	r3,128(sp)
    3834:	dc401f15 	stw	r17,124(sp)
    3838:	008001c4 	movi	r2,7
    383c:	14400e16 	blt	r2,r17,3878 <___vfprintf_internal_r+0x11e4>
    3840:	b2000204 	addi	r8,r22,8
    3844:	003e1806 	br	30a8 <_gp+0xfffe6f4c>
    3848:	01000074 	movhi	r4,1
    384c:	2108fd84 	addi	r4,r4,9206
    3850:	d9002c15 	stw	r4,176(sp)
    3854:	d9002c17 	ldw	r4,176(sp)
    3858:	1c07883a 	add	r3,r3,r16
    385c:	44000115 	stw	r16,4(r8)
    3860:	41000015 	stw	r4,0(r8)
    3864:	10800044 	addi	r2,r2,1
    3868:	d8c02015 	stw	r3,128(sp)
    386c:	d8801f15 	stw	r2,124(sp)
    3870:	010001c4 	movi	r4,7
    3874:	20be0b0e 	bge	r4,r2,30a4 <_gp+0xfffe6f48>
    3878:	d9002d17 	ldw	r4,180(sp)
    387c:	d9801e04 	addi	r6,sp,120
    3880:	b80b883a 	mov	r5,r23
    3884:	0009e740 	call	9e74 <__sprint_r>
    3888:	103c861e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    388c:	d8c02017 	ldw	r3,128(sp)
    3890:	da000404 	addi	r8,sp,16
    3894:	003e0406 	br	30a8 <_gp+0xfffe6f4c>
    3898:	d9002d17 	ldw	r4,180(sp)
    389c:	d9801e04 	addi	r6,sp,120
    38a0:	b80b883a 	mov	r5,r23
    38a4:	0009e740 	call	9e74 <__sprint_r>
    38a8:	103e3b26 	beq	r2,zero,3198 <_gp+0xfffe703c>
    38ac:	003c7d06 	br	2aa4 <_gp+0xfffe6948>
    38b0:	d9002d17 	ldw	r4,180(sp)
    38b4:	d9801e04 	addi	r6,sp,120
    38b8:	b80b883a 	mov	r5,r23
    38bc:	0009e740 	call	9e74 <__sprint_r>
    38c0:	103c781e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    38c4:	d8c02017 	ldw	r3,128(sp)
    38c8:	da000404 	addi	r8,sp,16
    38cc:	003de906 	br	3074 <_gp+0xfffe6f18>
    38d0:	d9002d17 	ldw	r4,180(sp)
    38d4:	d9801e04 	addi	r6,sp,120
    38d8:	b80b883a 	mov	r5,r23
    38dc:	0009e740 	call	9e74 <__sprint_r>
    38e0:	103c701e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    38e4:	d8c02017 	ldw	r3,128(sp)
    38e8:	da000404 	addi	r8,sp,16
    38ec:	003d9b06 	br	2f5c <_gp+0xfffe6e00>
    38f0:	d9002d17 	ldw	r4,180(sp)
    38f4:	d9801e04 	addi	r6,sp,120
    38f8:	b80b883a 	mov	r5,r23
    38fc:	0009e740 	call	9e74 <__sprint_r>
    3900:	103c681e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    3904:	d8c02017 	ldw	r3,128(sp)
    3908:	da000404 	addi	r8,sp,16
    390c:	003da106 	br	2f94 <_gp+0xfffe6e38>
    3910:	d9402a17 	ldw	r5,168(sp)
    3914:	d8002785 	stb	zero,158(sp)
    3918:	283f0616 	blt	r5,zero,3534 <_gp+0xfffe73d8>
    391c:	00ffdfc4 	movi	r3,-129
    3920:	9d84b03a 	or	r2,r19,r22
    3924:	90e4703a 	and	r18,r18,r3
    3928:	103c3b26 	beq	r2,zero,2a18 <_gp+0xfffe68bc>
    392c:	0039883a 	mov	fp,zero
    3930:	003e5806 	br	3294 <_gp+0xfffe7138>
    3934:	9080040c 	andi	r2,r18,16
    3938:	1001b326 	beq	r2,zero,4008 <___vfprintf_internal_r+0x1974>
    393c:	d8c02e17 	ldw	r3,184(sp)
    3940:	d9002a17 	ldw	r4,168(sp)
    3944:	d8002785 	stb	zero,158(sp)
    3948:	18800104 	addi	r2,r3,4
    394c:	1cc00017 	ldw	r19,0(r3)
    3950:	002d883a 	mov	r22,zero
    3954:	2001b516 	blt	r4,zero,402c <___vfprintf_internal_r+0x1998>
    3958:	00ffdfc4 	movi	r3,-129
    395c:	d8802e15 	stw	r2,184(sp)
    3960:	90e4703a 	and	r18,r18,r3
    3964:	983d0526 	beq	r19,zero,2d7c <_gp+0xfffe6c20>
    3968:	0039883a 	mov	fp,zero
    396c:	003d0806 	br	2d90 <_gp+0xfffe6c34>
    3970:	dc402617 	ldw	r17,152(sp)
    3974:	0441d30e 	bge	zero,r17,40c4 <___vfprintf_internal_r+0x1a30>
    3978:	dc403217 	ldw	r17,200(sp)
    397c:	d8803317 	ldw	r2,204(sp)
    3980:	1440010e 	bge	r2,r17,3988 <___vfprintf_internal_r+0x12f4>
    3984:	1023883a 	mov	r17,r2
    3988:	04400a0e 	bge	zero,r17,39b4 <___vfprintf_internal_r+0x1320>
    398c:	d8801f17 	ldw	r2,124(sp)
    3990:	1c47883a 	add	r3,r3,r17
    3994:	44000015 	stw	r16,0(r8)
    3998:	10800044 	addi	r2,r2,1
    399c:	44400115 	stw	r17,4(r8)
    39a0:	d8c02015 	stw	r3,128(sp)
    39a4:	d8801f15 	stw	r2,124(sp)
    39a8:	010001c4 	movi	r4,7
    39ac:	20826516 	blt	r4,r2,4344 <___vfprintf_internal_r+0x1cb0>
    39b0:	42000204 	addi	r8,r8,8
    39b4:	88026116 	blt	r17,zero,433c <___vfprintf_internal_r+0x1ca8>
    39b8:	d9003217 	ldw	r4,200(sp)
    39bc:	2463c83a 	sub	r17,r4,r17
    39c0:	04407b0e 	bge	zero,r17,3bb0 <___vfprintf_internal_r+0x151c>
    39c4:	05800404 	movi	r22,16
    39c8:	d8801f17 	ldw	r2,124(sp)
    39cc:	b4419d0e 	bge	r22,r17,4044 <___vfprintf_internal_r+0x19b0>
    39d0:	01000074 	movhi	r4,1
    39d4:	2108fd84 	addi	r4,r4,9206
    39d8:	d9002c15 	stw	r4,176(sp)
    39dc:	070001c4 	movi	fp,7
    39e0:	dcc02d17 	ldw	r19,180(sp)
    39e4:	00000306 	br	39f4 <___vfprintf_internal_r+0x1360>
    39e8:	42000204 	addi	r8,r8,8
    39ec:	8c7ffc04 	addi	r17,r17,-16
    39f0:	b441970e 	bge	r22,r17,4050 <___vfprintf_internal_r+0x19bc>
    39f4:	18c00404 	addi	r3,r3,16
    39f8:	10800044 	addi	r2,r2,1
    39fc:	45000015 	stw	r20,0(r8)
    3a00:	45800115 	stw	r22,4(r8)
    3a04:	d8c02015 	stw	r3,128(sp)
    3a08:	d8801f15 	stw	r2,124(sp)
    3a0c:	e0bff60e 	bge	fp,r2,39e8 <_gp+0xfffe788c>
    3a10:	d9801e04 	addi	r6,sp,120
    3a14:	b80b883a 	mov	r5,r23
    3a18:	9809883a 	mov	r4,r19
    3a1c:	0009e740 	call	9e74 <__sprint_r>
    3a20:	103c201e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    3a24:	d8c02017 	ldw	r3,128(sp)
    3a28:	d8801f17 	ldw	r2,124(sp)
    3a2c:	da000404 	addi	r8,sp,16
    3a30:	003fee06 	br	39ec <_gp+0xfffe7890>
    3a34:	d9002d17 	ldw	r4,180(sp)
    3a38:	d9801e04 	addi	r6,sp,120
    3a3c:	b80b883a 	mov	r5,r23
    3a40:	0009e740 	call	9e74 <__sprint_r>
    3a44:	103c171e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    3a48:	d8c02017 	ldw	r3,128(sp)
    3a4c:	df002787 	ldb	fp,158(sp)
    3a50:	da000404 	addi	r8,sp,16
    3a54:	003d3406 	br	2f28 <_gp+0xfffe6dcc>
    3a58:	9080040c 	andi	r2,r18,16
    3a5c:	10016126 	beq	r2,zero,3fe4 <___vfprintf_internal_r+0x1950>
    3a60:	d9402e17 	ldw	r5,184(sp)
    3a64:	2cc00017 	ldw	r19,0(r5)
    3a68:	29400104 	addi	r5,r5,4
    3a6c:	d9402e15 	stw	r5,184(sp)
    3a70:	982dd7fa 	srai	r22,r19,31
    3a74:	b005883a 	mov	r2,r22
    3a78:	003c5a06 	br	2be4 <_gp+0xfffe6a88>
    3a7c:	9080040c 	andi	r2,r18,16
    3a80:	10003526 	beq	r2,zero,3b58 <___vfprintf_internal_r+0x14c4>
    3a84:	d8c02e17 	ldw	r3,184(sp)
    3a88:	d9002a17 	ldw	r4,168(sp)
    3a8c:	d8002785 	stb	zero,158(sp)
    3a90:	18800104 	addi	r2,r3,4
    3a94:	1cc00017 	ldw	r19,0(r3)
    3a98:	002d883a 	mov	r22,zero
    3a9c:	20003716 	blt	r4,zero,3b7c <___vfprintf_internal_r+0x14e8>
    3aa0:	00ffdfc4 	movi	r3,-129
    3aa4:	d8802e15 	stw	r2,184(sp)
    3aa8:	90e4703a 	and	r18,r18,r3
    3aac:	0039883a 	mov	fp,zero
    3ab0:	983dd426 	beq	r19,zero,3204 <_gp+0xfffe70a8>
    3ab4:	00800244 	movi	r2,9
    3ab8:	14fc5336 	bltu	r2,r19,2c08 <_gp+0xfffe6aac>
    3abc:	d8c02817 	ldw	r3,160(sp)
    3ac0:	dc001dc4 	addi	r16,sp,119
    3ac4:	9cc00c04 	addi	r19,r19,48
    3ac8:	1c07c83a 	sub	r3,r3,r16
    3acc:	dcc01dc5 	stb	r19,119(sp)
    3ad0:	d8c02b15 	stw	r3,172(sp)
    3ad4:	003cc606 	br	2df0 <_gp+0xfffe6c94>
    3ad8:	d8803317 	ldw	r2,204(sp)
    3adc:	143fffc4 	addi	r16,r2,-1
    3ae0:	043f4d0e 	bge	zero,r16,3818 <_gp+0xfffe76bc>
    3ae4:	07000404 	movi	fp,16
    3ae8:	e400810e 	bge	fp,r16,3cf0 <___vfprintf_internal_r+0x165c>
    3aec:	01400074 	movhi	r5,1
    3af0:	2948fd84 	addi	r5,r5,9206
    3af4:	d9402c15 	stw	r5,176(sp)
    3af8:	01c001c4 	movi	r7,7
    3afc:	dcc02d17 	ldw	r19,180(sp)
    3b00:	00000306 	br	3b10 <___vfprintf_internal_r+0x147c>
    3b04:	b5800204 	addi	r22,r22,8
    3b08:	843ffc04 	addi	r16,r16,-16
    3b0c:	e4007b0e 	bge	fp,r16,3cfc <___vfprintf_internal_r+0x1668>
    3b10:	18c00404 	addi	r3,r3,16
    3b14:	8c400044 	addi	r17,r17,1
    3b18:	b5000015 	stw	r20,0(r22)
    3b1c:	b7000115 	stw	fp,4(r22)
    3b20:	d8c02015 	stw	r3,128(sp)
    3b24:	dc401f15 	stw	r17,124(sp)
    3b28:	3c7ff60e 	bge	r7,r17,3b04 <_gp+0xfffe79a8>
    3b2c:	d9801e04 	addi	r6,sp,120
    3b30:	b80b883a 	mov	r5,r23
    3b34:	9809883a 	mov	r4,r19
    3b38:	d9c03c15 	stw	r7,240(sp)
    3b3c:	0009e740 	call	9e74 <__sprint_r>
    3b40:	d9c03c17 	ldw	r7,240(sp)
    3b44:	103bd71e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    3b48:	d8c02017 	ldw	r3,128(sp)
    3b4c:	dc401f17 	ldw	r17,124(sp)
    3b50:	dd800404 	addi	r22,sp,16
    3b54:	003fec06 	br	3b08 <_gp+0xfffe79ac>
    3b58:	9080100c 	andi	r2,r18,64
    3b5c:	d8002785 	stb	zero,158(sp)
    3b60:	10010e26 	beq	r2,zero,3f9c <___vfprintf_internal_r+0x1908>
    3b64:	d9402e17 	ldw	r5,184(sp)
    3b68:	d8c02a17 	ldw	r3,168(sp)
    3b6c:	002d883a 	mov	r22,zero
    3b70:	28800104 	addi	r2,r5,4
    3b74:	2cc0000b 	ldhu	r19,0(r5)
    3b78:	183fc90e 	bge	r3,zero,3aa0 <_gp+0xfffe7944>
    3b7c:	d8802e15 	stw	r2,184(sp)
    3b80:	0039883a 	mov	fp,zero
    3b84:	9d84b03a 	or	r2,r19,r22
    3b88:	103c1e1e 	bne	r2,zero,2c04 <_gp+0xfffe6aa8>
    3b8c:	00800044 	movi	r2,1
    3b90:	003e6c06 	br	3544 <_gp+0xfffe73e8>
    3b94:	d9002d17 	ldw	r4,180(sp)
    3b98:	d9801e04 	addi	r6,sp,120
    3b9c:	b80b883a 	mov	r5,r23
    3ba0:	0009e740 	call	9e74 <__sprint_r>
    3ba4:	103bbf1e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    3ba8:	d8c02017 	ldw	r3,128(sp)
    3bac:	da000404 	addi	r8,sp,16
    3bb0:	d9003217 	ldw	r4,200(sp)
    3bb4:	d8802617 	ldw	r2,152(sp)
    3bb8:	d9403317 	ldw	r5,204(sp)
    3bbc:	8123883a 	add	r17,r16,r4
    3bc0:	11400216 	blt	r2,r5,3bcc <___vfprintf_internal_r+0x1538>
    3bc4:	9100004c 	andi	r4,r18,1
    3bc8:	20000d26 	beq	r4,zero,3c00 <___vfprintf_internal_r+0x156c>
    3bcc:	d9003717 	ldw	r4,220(sp)
    3bd0:	d9403417 	ldw	r5,208(sp)
    3bd4:	1907883a 	add	r3,r3,r4
    3bd8:	d9001f17 	ldw	r4,124(sp)
    3bdc:	41400015 	stw	r5,0(r8)
    3be0:	d9403717 	ldw	r5,220(sp)
    3be4:	21000044 	addi	r4,r4,1
    3be8:	d8c02015 	stw	r3,128(sp)
    3bec:	41400115 	stw	r5,4(r8)
    3bf0:	d9001f15 	stw	r4,124(sp)
    3bf4:	014001c4 	movi	r5,7
    3bf8:	2901e816 	blt	r5,r4,439c <___vfprintf_internal_r+0x1d08>
    3bfc:	42000204 	addi	r8,r8,8
    3c00:	d9003317 	ldw	r4,204(sp)
    3c04:	8121883a 	add	r16,r16,r4
    3c08:	2085c83a 	sub	r2,r4,r2
    3c0c:	8461c83a 	sub	r16,r16,r17
    3c10:	1400010e 	bge	r2,r16,3c18 <___vfprintf_internal_r+0x1584>
    3c14:	1021883a 	mov	r16,r2
    3c18:	04000a0e 	bge	zero,r16,3c44 <___vfprintf_internal_r+0x15b0>
    3c1c:	d9001f17 	ldw	r4,124(sp)
    3c20:	1c07883a 	add	r3,r3,r16
    3c24:	44400015 	stw	r17,0(r8)
    3c28:	21000044 	addi	r4,r4,1
    3c2c:	44000115 	stw	r16,4(r8)
    3c30:	d8c02015 	stw	r3,128(sp)
    3c34:	d9001f15 	stw	r4,124(sp)
    3c38:	014001c4 	movi	r5,7
    3c3c:	2901fb16 	blt	r5,r4,442c <___vfprintf_internal_r+0x1d98>
    3c40:	42000204 	addi	r8,r8,8
    3c44:	8001f716 	blt	r16,zero,4424 <___vfprintf_internal_r+0x1d90>
    3c48:	1421c83a 	sub	r16,r2,r16
    3c4c:	043d160e 	bge	zero,r16,30a8 <_gp+0xfffe6f4c>
    3c50:	04400404 	movi	r17,16
    3c54:	d8801f17 	ldw	r2,124(sp)
    3c58:	8c3efb0e 	bge	r17,r16,3848 <_gp+0xfffe76ec>
    3c5c:	01400074 	movhi	r5,1
    3c60:	2948fd84 	addi	r5,r5,9206
    3c64:	d9402c15 	stw	r5,176(sp)
    3c68:	058001c4 	movi	r22,7
    3c6c:	dcc02d17 	ldw	r19,180(sp)
    3c70:	00000306 	br	3c80 <___vfprintf_internal_r+0x15ec>
    3c74:	42000204 	addi	r8,r8,8
    3c78:	843ffc04 	addi	r16,r16,-16
    3c7c:	8c3ef50e 	bge	r17,r16,3854 <_gp+0xfffe76f8>
    3c80:	18c00404 	addi	r3,r3,16
    3c84:	10800044 	addi	r2,r2,1
    3c88:	45000015 	stw	r20,0(r8)
    3c8c:	44400115 	stw	r17,4(r8)
    3c90:	d8c02015 	stw	r3,128(sp)
    3c94:	d8801f15 	stw	r2,124(sp)
    3c98:	b0bff60e 	bge	r22,r2,3c74 <_gp+0xfffe7b18>
    3c9c:	d9801e04 	addi	r6,sp,120
    3ca0:	b80b883a 	mov	r5,r23
    3ca4:	9809883a 	mov	r4,r19
    3ca8:	0009e740 	call	9e74 <__sprint_r>
    3cac:	103b7d1e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    3cb0:	d8c02017 	ldw	r3,128(sp)
    3cb4:	d8801f17 	ldw	r2,124(sp)
    3cb8:	da000404 	addi	r8,sp,16
    3cbc:	003fee06 	br	3c78 <_gp+0xfffe7b1c>
    3cc0:	9088703a 	and	r4,r18,r2
    3cc4:	203eab1e 	bne	r4,zero,3774 <_gp+0xfffe7618>
    3cc8:	dc401f17 	ldw	r17,124(sp)
    3ccc:	40800115 	stw	r2,4(r8)
    3cd0:	44000015 	stw	r16,0(r8)
    3cd4:	8c400044 	addi	r17,r17,1
    3cd8:	d8c02015 	stw	r3,128(sp)
    3cdc:	dc401f15 	stw	r17,124(sp)
    3ce0:	008001c4 	movi	r2,7
    3ce4:	14400e16 	blt	r2,r17,3d20 <___vfprintf_internal_r+0x168c>
    3ce8:	45800204 	addi	r22,r8,8
    3cec:	003eca06 	br	3818 <_gp+0xfffe76bc>
    3cf0:	01000074 	movhi	r4,1
    3cf4:	2108fd84 	addi	r4,r4,9206
    3cf8:	d9002c15 	stw	r4,176(sp)
    3cfc:	d8802c17 	ldw	r2,176(sp)
    3d00:	1c07883a 	add	r3,r3,r16
    3d04:	8c400044 	addi	r17,r17,1
    3d08:	b0800015 	stw	r2,0(r22)
    3d0c:	b4000115 	stw	r16,4(r22)
    3d10:	d8c02015 	stw	r3,128(sp)
    3d14:	dc401f15 	stw	r17,124(sp)
    3d18:	008001c4 	movi	r2,7
    3d1c:	147ebd0e 	bge	r2,r17,3814 <_gp+0xfffe76b8>
    3d20:	d9002d17 	ldw	r4,180(sp)
    3d24:	d9801e04 	addi	r6,sp,120
    3d28:	b80b883a 	mov	r5,r23
    3d2c:	0009e740 	call	9e74 <__sprint_r>
    3d30:	103b5c1e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    3d34:	d8c02017 	ldw	r3,128(sp)
    3d38:	dc401f17 	ldw	r17,124(sp)
    3d3c:	dd800404 	addi	r22,sp,16
    3d40:	003eb506 	br	3818 <_gp+0xfffe76bc>
    3d44:	d9002d17 	ldw	r4,180(sp)
    3d48:	d9801e04 	addi	r6,sp,120
    3d4c:	b80b883a 	mov	r5,r23
    3d50:	0009e740 	call	9e74 <__sprint_r>
    3d54:	103b531e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    3d58:	d8c02017 	ldw	r3,128(sp)
    3d5c:	dc401f17 	ldw	r17,124(sp)
    3d60:	da000404 	addi	r8,sp,16
    3d64:	003e8d06 	br	379c <_gp+0xfffe7640>
    3d68:	d9002d17 	ldw	r4,180(sp)
    3d6c:	d9801e04 	addi	r6,sp,120
    3d70:	b80b883a 	mov	r5,r23
    3d74:	0009e740 	call	9e74 <__sprint_r>
    3d78:	103b4a1e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    3d7c:	d8c02017 	ldw	r3,128(sp)
    3d80:	dc401f17 	ldw	r17,124(sp)
    3d84:	dd800404 	addi	r22,sp,16
    3d88:	003e8f06 	br	37c8 <_gp+0xfffe766c>
    3d8c:	0027883a 	mov	r19,zero
    3d90:	003f4a06 	br	3abc <_gp+0xfffe7960>
    3d94:	d9002d17 	ldw	r4,180(sp)
    3d98:	d9801e04 	addi	r6,sp,120
    3d9c:	b80b883a 	mov	r5,r23
    3da0:	0009e740 	call	9e74 <__sprint_r>
    3da4:	103b3f1e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    3da8:	d8c02017 	ldw	r3,128(sp)
    3dac:	da000404 	addi	r8,sp,16
    3db0:	003c7b06 	br	2fa0 <_gp+0xfffe6e44>
    3db4:	d9402a17 	ldw	r5,168(sp)
    3db8:	04e7c83a 	sub	r19,zero,r19
    3dbc:	07000b44 	movi	fp,45
    3dc0:	9804c03a 	cmpne	r2,r19,zero
    3dc4:	05adc83a 	sub	r22,zero,r22
    3dc8:	df002785 	stb	fp,158(sp)
    3dcc:	b0adc83a 	sub	r22,r22,r2
    3dd0:	28017b16 	blt	r5,zero,43c0 <___vfprintf_internal_r+0x1d2c>
    3dd4:	00bfdfc4 	movi	r2,-129
    3dd8:	90a4703a 	and	r18,r18,r2
    3ddc:	003b8906 	br	2c04 <_gp+0xfffe6aa8>
    3de0:	d9003617 	ldw	r4,216(sp)
    3de4:	d9403817 	ldw	r5,224(sp)
    3de8:	da003d15 	stw	r8,244(sp)
    3dec:	0009a980 	call	9a98 <__fpclassifyd>
    3df0:	da003d17 	ldw	r8,244(sp)
    3df4:	1000f026 	beq	r2,zero,41b8 <___vfprintf_internal_r+0x1b24>
    3df8:	d9002a17 	ldw	r4,168(sp)
    3dfc:	05bff7c4 	movi	r22,-33
    3e00:	00bfffc4 	movi	r2,-1
    3e04:	8dac703a 	and	r22,r17,r22
    3e08:	20820026 	beq	r4,r2,460c <___vfprintf_internal_r+0x1f78>
    3e0c:	008011c4 	movi	r2,71
    3e10:	b081f726 	beq	r22,r2,45f0 <___vfprintf_internal_r+0x1f5c>
    3e14:	d9003817 	ldw	r4,224(sp)
    3e18:	90c04014 	ori	r3,r18,256
    3e1c:	d8c02c15 	stw	r3,176(sp)
    3e20:	20021516 	blt	r4,zero,4678 <___vfprintf_internal_r+0x1fe4>
    3e24:	dcc03817 	ldw	r19,224(sp)
    3e28:	d8002905 	stb	zero,164(sp)
    3e2c:	00801984 	movi	r2,102
    3e30:	8881f926 	beq	r17,r2,4618 <___vfprintf_internal_r+0x1f84>
    3e34:	00801184 	movi	r2,70
    3e38:	88821c26 	beq	r17,r2,46ac <___vfprintf_internal_r+0x2018>
    3e3c:	00801144 	movi	r2,69
    3e40:	b081ef26 	beq	r22,r2,4600 <___vfprintf_internal_r+0x1f6c>
    3e44:	d8c02a17 	ldw	r3,168(sp)
    3e48:	d8802104 	addi	r2,sp,132
    3e4c:	d8800315 	stw	r2,12(sp)
    3e50:	d9403617 	ldw	r5,216(sp)
    3e54:	d8802504 	addi	r2,sp,148
    3e58:	d9002d17 	ldw	r4,180(sp)
    3e5c:	d8800215 	stw	r2,8(sp)
    3e60:	d8802604 	addi	r2,sp,152
    3e64:	d8c00015 	stw	r3,0(sp)
    3e68:	d8800115 	stw	r2,4(sp)
    3e6c:	01c00084 	movi	r7,2
    3e70:	980d883a 	mov	r6,r19
    3e74:	d8c03c15 	stw	r3,240(sp)
    3e78:	da003d15 	stw	r8,244(sp)
    3e7c:	0004dc40 	call	4dc4 <_dtoa_r>
    3e80:	1021883a 	mov	r16,r2
    3e84:	008019c4 	movi	r2,103
    3e88:	d8c03c17 	ldw	r3,240(sp)
    3e8c:	da003d17 	ldw	r8,244(sp)
    3e90:	88817126 	beq	r17,r2,4458 <___vfprintf_internal_r+0x1dc4>
    3e94:	008011c4 	movi	r2,71
    3e98:	88829126 	beq	r17,r2,48e0 <___vfprintf_internal_r+0x224c>
    3e9c:	80f9883a 	add	fp,r16,r3
    3ea0:	d9003617 	ldw	r4,216(sp)
    3ea4:	000d883a 	mov	r6,zero
    3ea8:	000f883a 	mov	r7,zero
    3eac:	980b883a 	mov	r5,r19
    3eb0:	da003d15 	stw	r8,244(sp)
    3eb4:	000ddd40 	call	ddd4 <__eqdf2>
    3eb8:	da003d17 	ldw	r8,244(sp)
    3ebc:	10018d26 	beq	r2,zero,44f4 <___vfprintf_internal_r+0x1e60>
    3ec0:	d8802117 	ldw	r2,132(sp)
    3ec4:	1700062e 	bgeu	r2,fp,3ee0 <___vfprintf_internal_r+0x184c>
    3ec8:	01000c04 	movi	r4,48
    3ecc:	10c00044 	addi	r3,r2,1
    3ed0:	d8c02115 	stw	r3,132(sp)
    3ed4:	11000005 	stb	r4,0(r2)
    3ed8:	d8802117 	ldw	r2,132(sp)
    3edc:	173ffb36 	bltu	r2,fp,3ecc <_gp+0xfffe7d70>
    3ee0:	1405c83a 	sub	r2,r2,r16
    3ee4:	d8803315 	stw	r2,204(sp)
    3ee8:	008011c4 	movi	r2,71
    3eec:	b0817626 	beq	r22,r2,44c8 <___vfprintf_internal_r+0x1e34>
    3ef0:	00801944 	movi	r2,101
    3ef4:	1442800e 	bge	r2,r17,48f8 <___vfprintf_internal_r+0x2264>
    3ef8:	d8c02617 	ldw	r3,152(sp)
    3efc:	00801984 	movi	r2,102
    3f00:	d8c03215 	stw	r3,200(sp)
    3f04:	8881fe26 	beq	r17,r2,4700 <___vfprintf_internal_r+0x206c>
    3f08:	d8c03217 	ldw	r3,200(sp)
    3f0c:	d9003317 	ldw	r4,204(sp)
    3f10:	1901dd16 	blt	r3,r4,4688 <___vfprintf_internal_r+0x1ff4>
    3f14:	9480004c 	andi	r18,r18,1
    3f18:	90022b1e 	bne	r18,zero,47c8 <___vfprintf_internal_r+0x2134>
    3f1c:	1805883a 	mov	r2,r3
    3f20:	18028316 	blt	r3,zero,4930 <___vfprintf_internal_r+0x229c>
    3f24:	d8c03217 	ldw	r3,200(sp)
    3f28:	044019c4 	movi	r17,103
    3f2c:	d8c02b15 	stw	r3,172(sp)
    3f30:	df002907 	ldb	fp,164(sp)
    3f34:	e001531e 	bne	fp,zero,4484 <___vfprintf_internal_r+0x1df0>
    3f38:	df002783 	ldbu	fp,158(sp)
    3f3c:	d8802915 	stw	r2,164(sp)
    3f40:	dc802c17 	ldw	r18,176(sp)
    3f44:	d8002a15 	stw	zero,168(sp)
    3f48:	003baf06 	br	2e08 <_gp+0xfffe6cac>
    3f4c:	d8c02e17 	ldw	r3,184(sp)
    3f50:	d9002e17 	ldw	r4,184(sp)
    3f54:	d9402e17 	ldw	r5,184(sp)
    3f58:	18c00017 	ldw	r3,0(r3)
    3f5c:	21000117 	ldw	r4,4(r4)
    3f60:	29400204 	addi	r5,r5,8
    3f64:	d8c03615 	stw	r3,216(sp)
    3f68:	d9003815 	stw	r4,224(sp)
    3f6c:	d9402e15 	stw	r5,184(sp)
    3f70:	003b5006 	br	2cb4 <_gp+0xfffe6b58>
    3f74:	ac400007 	ldb	r17,0(r21)
    3f78:	003a2806 	br	281c <_gp+0xfffe66c0>
    3f7c:	9080100c 	andi	r2,r18,64
    3f80:	1000a826 	beq	r2,zero,4224 <___vfprintf_internal_r+0x1b90>
    3f84:	d8c02e17 	ldw	r3,184(sp)
    3f88:	002d883a 	mov	r22,zero
    3f8c:	1cc0000b 	ldhu	r19,0(r3)
    3f90:	18c00104 	addi	r3,r3,4
    3f94:	d8c02e15 	stw	r3,184(sp)
    3f98:	003caf06 	br	3258 <_gp+0xfffe70fc>
    3f9c:	d9002e17 	ldw	r4,184(sp)
    3fa0:	d9402a17 	ldw	r5,168(sp)
    3fa4:	002d883a 	mov	r22,zero
    3fa8:	20800104 	addi	r2,r4,4
    3fac:	24c00017 	ldw	r19,0(r4)
    3fb0:	283ebb0e 	bge	r5,zero,3aa0 <_gp+0xfffe7944>
    3fb4:	003ef106 	br	3b7c <_gp+0xfffe7a20>
    3fb8:	9080040c 	andi	r2,r18,16
    3fbc:	1000921e 	bne	r2,zero,4208 <___vfprintf_internal_r+0x1b74>
    3fc0:	9480100c 	andi	r18,r18,64
    3fc4:	90013926 	beq	r18,zero,44ac <___vfprintf_internal_r+0x1e18>
    3fc8:	d9402e17 	ldw	r5,184(sp)
    3fcc:	d8c02f17 	ldw	r3,188(sp)
    3fd0:	28800017 	ldw	r2,0(r5)
    3fd4:	29400104 	addi	r5,r5,4
    3fd8:	d9402e15 	stw	r5,184(sp)
    3fdc:	10c0000d 	sth	r3,0(r2)
    3fe0:	0039e406 	br	2774 <_gp+0xfffe6618>
    3fe4:	9080100c 	andi	r2,r18,64
    3fe8:	10008026 	beq	r2,zero,41ec <___vfprintf_internal_r+0x1b58>
    3fec:	d8802e17 	ldw	r2,184(sp)
    3ff0:	14c0000f 	ldh	r19,0(r2)
    3ff4:	10800104 	addi	r2,r2,4
    3ff8:	d8802e15 	stw	r2,184(sp)
    3ffc:	982dd7fa 	srai	r22,r19,31
    4000:	b005883a 	mov	r2,r22
    4004:	003af706 	br	2be4 <_gp+0xfffe6a88>
    4008:	9080100c 	andi	r2,r18,64
    400c:	d8002785 	stb	zero,158(sp)
    4010:	10008a1e 	bne	r2,zero,423c <___vfprintf_internal_r+0x1ba8>
    4014:	d9002e17 	ldw	r4,184(sp)
    4018:	d9402a17 	ldw	r5,168(sp)
    401c:	002d883a 	mov	r22,zero
    4020:	20800104 	addi	r2,r4,4
    4024:	24c00017 	ldw	r19,0(r4)
    4028:	283e4b0e 	bge	r5,zero,3958 <_gp+0xfffe77fc>
    402c:	9d86b03a 	or	r3,r19,r22
    4030:	d8802e15 	stw	r2,184(sp)
    4034:	183e4c1e 	bne	r3,zero,3968 <_gp+0xfffe780c>
    4038:	0039883a 	mov	fp,zero
    403c:	0005883a 	mov	r2,zero
    4040:	003d4006 	br	3544 <_gp+0xfffe73e8>
    4044:	01400074 	movhi	r5,1
    4048:	2948fd84 	addi	r5,r5,9206
    404c:	d9402c15 	stw	r5,176(sp)
    4050:	d9402c17 	ldw	r5,176(sp)
    4054:	1c47883a 	add	r3,r3,r17
    4058:	10800044 	addi	r2,r2,1
    405c:	41400015 	stw	r5,0(r8)
    4060:	44400115 	stw	r17,4(r8)
    4064:	d8c02015 	stw	r3,128(sp)
    4068:	d8801f15 	stw	r2,124(sp)
    406c:	010001c4 	movi	r4,7
    4070:	20bec816 	blt	r4,r2,3b94 <_gp+0xfffe7a38>
    4074:	42000204 	addi	r8,r8,8
    4078:	003ecd06 	br	3bb0 <_gp+0xfffe7a54>
    407c:	d9002a17 	ldw	r4,168(sp)
    4080:	d8002785 	stb	zero,158(sp)
    4084:	203d2d16 	blt	r4,zero,353c <_gp+0xfffe73e0>
    4088:	00bfdfc4 	movi	r2,-129
    408c:	90a4703a 	and	r18,r18,r2
    4090:	003a6106 	br	2a18 <_gp+0xfffe68bc>
    4094:	01000074 	movhi	r4,1
    4098:	2108fd84 	addi	r4,r4,9206
    409c:	d9002c15 	stw	r4,176(sp)
    40a0:	003bea06 	br	304c <_gp+0xfffe6ef0>
    40a4:	d9002d17 	ldw	r4,180(sp)
    40a8:	d9801e04 	addi	r6,sp,120
    40ac:	b80b883a 	mov	r5,r23
    40b0:	0009e740 	call	9e74 <__sprint_r>
    40b4:	103a7b1e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    40b8:	d8c02017 	ldw	r3,128(sp)
    40bc:	da000404 	addi	r8,sp,16
    40c0:	003d4106 	br	35c8 <_gp+0xfffe746c>
    40c4:	d8801f17 	ldw	r2,124(sp)
    40c8:	01400074 	movhi	r5,1
    40cc:	01000044 	movi	r4,1
    40d0:	18c00044 	addi	r3,r3,1
    40d4:	10800044 	addi	r2,r2,1
    40d8:	2948fd04 	addi	r5,r5,9204
    40dc:	41000115 	stw	r4,4(r8)
    40e0:	41400015 	stw	r5,0(r8)
    40e4:	d8c02015 	stw	r3,128(sp)
    40e8:	d8801f15 	stw	r2,124(sp)
    40ec:	010001c4 	movi	r4,7
    40f0:	20805c16 	blt	r4,r2,4264 <___vfprintf_internal_r+0x1bd0>
    40f4:	42000204 	addi	r8,r8,8
    40f8:	8800041e 	bne	r17,zero,410c <___vfprintf_internal_r+0x1a78>
    40fc:	d8803317 	ldw	r2,204(sp)
    4100:	1000021e 	bne	r2,zero,410c <___vfprintf_internal_r+0x1a78>
    4104:	9080004c 	andi	r2,r18,1
    4108:	103be726 	beq	r2,zero,30a8 <_gp+0xfffe6f4c>
    410c:	d9003717 	ldw	r4,220(sp)
    4110:	d8801f17 	ldw	r2,124(sp)
    4114:	d9403417 	ldw	r5,208(sp)
    4118:	20c7883a 	add	r3,r4,r3
    411c:	10800044 	addi	r2,r2,1
    4120:	41000115 	stw	r4,4(r8)
    4124:	41400015 	stw	r5,0(r8)
    4128:	d8c02015 	stw	r3,128(sp)
    412c:	d8801f15 	stw	r2,124(sp)
    4130:	010001c4 	movi	r4,7
    4134:	20812116 	blt	r4,r2,45bc <___vfprintf_internal_r+0x1f28>
    4138:	42000204 	addi	r8,r8,8
    413c:	0463c83a 	sub	r17,zero,r17
    4140:	0440730e 	bge	zero,r17,4310 <___vfprintf_internal_r+0x1c7c>
    4144:	05800404 	movi	r22,16
    4148:	b440860e 	bge	r22,r17,4364 <___vfprintf_internal_r+0x1cd0>
    414c:	01400074 	movhi	r5,1
    4150:	2948fd84 	addi	r5,r5,9206
    4154:	d9402c15 	stw	r5,176(sp)
    4158:	070001c4 	movi	fp,7
    415c:	dcc02d17 	ldw	r19,180(sp)
    4160:	00000306 	br	4170 <___vfprintf_internal_r+0x1adc>
    4164:	42000204 	addi	r8,r8,8
    4168:	8c7ffc04 	addi	r17,r17,-16
    416c:	b440800e 	bge	r22,r17,4370 <___vfprintf_internal_r+0x1cdc>
    4170:	18c00404 	addi	r3,r3,16
    4174:	10800044 	addi	r2,r2,1
    4178:	45000015 	stw	r20,0(r8)
    417c:	45800115 	stw	r22,4(r8)
    4180:	d8c02015 	stw	r3,128(sp)
    4184:	d8801f15 	stw	r2,124(sp)
    4188:	e0bff60e 	bge	fp,r2,4164 <_gp+0xfffe8008>
    418c:	d9801e04 	addi	r6,sp,120
    4190:	b80b883a 	mov	r5,r23
    4194:	9809883a 	mov	r4,r19
    4198:	0009e740 	call	9e74 <__sprint_r>
    419c:	103a411e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    41a0:	d8c02017 	ldw	r3,128(sp)
    41a4:	d8801f17 	ldw	r2,124(sp)
    41a8:	da000404 	addi	r8,sp,16
    41ac:	003fee06 	br	4168 <_gp+0xfffe800c>
    41b0:	00bfffc4 	movi	r2,-1
    41b4:	003a3f06 	br	2ab4 <_gp+0xfffe6958>
    41b8:	008011c4 	movi	r2,71
    41bc:	1440b816 	blt	r2,r17,44a0 <___vfprintf_internal_r+0x1e0c>
    41c0:	04000074 	movhi	r16,1
    41c4:	8408ef04 	addi	r16,r16,9148
    41c8:	00c000c4 	movi	r3,3
    41cc:	00bfdfc4 	movi	r2,-129
    41d0:	d8c02915 	stw	r3,164(sp)
    41d4:	90a4703a 	and	r18,r18,r2
    41d8:	df002783 	ldbu	fp,158(sp)
    41dc:	d8c02b15 	stw	r3,172(sp)
    41e0:	d8002a15 	stw	zero,168(sp)
    41e4:	d8003215 	stw	zero,200(sp)
    41e8:	003b0706 	br	2e08 <_gp+0xfffe6cac>
    41ec:	d8c02e17 	ldw	r3,184(sp)
    41f0:	1cc00017 	ldw	r19,0(r3)
    41f4:	18c00104 	addi	r3,r3,4
    41f8:	d8c02e15 	stw	r3,184(sp)
    41fc:	982dd7fa 	srai	r22,r19,31
    4200:	b005883a 	mov	r2,r22
    4204:	003a7706 	br	2be4 <_gp+0xfffe6a88>
    4208:	d8c02e17 	ldw	r3,184(sp)
    420c:	d9002f17 	ldw	r4,188(sp)
    4210:	18800017 	ldw	r2,0(r3)
    4214:	18c00104 	addi	r3,r3,4
    4218:	d8c02e15 	stw	r3,184(sp)
    421c:	11000015 	stw	r4,0(r2)
    4220:	00395406 	br	2774 <_gp+0xfffe6618>
    4224:	d9002e17 	ldw	r4,184(sp)
    4228:	002d883a 	mov	r22,zero
    422c:	24c00017 	ldw	r19,0(r4)
    4230:	21000104 	addi	r4,r4,4
    4234:	d9002e15 	stw	r4,184(sp)
    4238:	003c0706 	br	3258 <_gp+0xfffe70fc>
    423c:	d9402e17 	ldw	r5,184(sp)
    4240:	d8c02a17 	ldw	r3,168(sp)
    4244:	002d883a 	mov	r22,zero
    4248:	28800104 	addi	r2,r5,4
    424c:	2cc0000b 	ldhu	r19,0(r5)
    4250:	183dc10e 	bge	r3,zero,3958 <_gp+0xfffe77fc>
    4254:	003f7506 	br	402c <_gp+0xfffe7ed0>
    4258:	04000074 	movhi	r16,1
    425c:	8408ed04 	addi	r16,r16,9140
    4260:	003aa706 	br	2d00 <_gp+0xfffe6ba4>
    4264:	d9002d17 	ldw	r4,180(sp)
    4268:	d9801e04 	addi	r6,sp,120
    426c:	b80b883a 	mov	r5,r23
    4270:	0009e740 	call	9e74 <__sprint_r>
    4274:	103a0b1e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    4278:	dc402617 	ldw	r17,152(sp)
    427c:	d8c02017 	ldw	r3,128(sp)
    4280:	da000404 	addi	r8,sp,16
    4284:	003f9c06 	br	40f8 <_gp+0xfffe7f9c>
    4288:	ac400043 	ldbu	r17,1(r21)
    428c:	84000814 	ori	r16,r16,32
    4290:	ad400044 	addi	r21,r21,1
    4294:	8c403fcc 	andi	r17,r17,255
    4298:	8c40201c 	xori	r17,r17,128
    429c:	8c7fe004 	addi	r17,r17,-128
    42a0:	00395e06 	br	281c <_gp+0xfffe66c0>
    42a4:	d8c02e15 	stw	r3,184(sp)
    42a8:	0039883a 	mov	fp,zero
    42ac:	003e3506 	br	3b84 <_gp+0xfffe7a28>
    42b0:	d9002d17 	ldw	r4,180(sp)
    42b4:	d9801e04 	addi	r6,sp,120
    42b8:	b80b883a 	mov	r5,r23
    42bc:	0009e740 	call	9e74 <__sprint_r>
    42c0:	1039f81e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    42c4:	d8c02017 	ldw	r3,128(sp)
    42c8:	da000404 	addi	r8,sp,16
    42cc:	003cd006 	br	3610 <_gp+0xfffe74b4>
    42d0:	8009883a 	mov	r4,r16
    42d4:	df003d15 	stw	fp,244(sp)
    42d8:	00025fc0 	call	25fc <strlen>
    42dc:	d8802b15 	stw	r2,172(sp)
    42e0:	da003d17 	ldw	r8,244(sp)
    42e4:	103c200e 	bge	r2,zero,3368 <_gp+0xfffe720c>
    42e8:	0005883a 	mov	r2,zero
    42ec:	003c1e06 	br	3368 <_gp+0xfffe720c>
    42f0:	d9002d17 	ldw	r4,180(sp)
    42f4:	d9801e04 	addi	r6,sp,120
    42f8:	b80b883a 	mov	r5,r23
    42fc:	0009e740 	call	9e74 <__sprint_r>
    4300:	1039e81e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    4304:	d8c02017 	ldw	r3,128(sp)
    4308:	d8801f17 	ldw	r2,124(sp)
    430c:	da000404 	addi	r8,sp,16
    4310:	d9403317 	ldw	r5,204(sp)
    4314:	10800044 	addi	r2,r2,1
    4318:	44000015 	stw	r16,0(r8)
    431c:	28c7883a 	add	r3,r5,r3
    4320:	003b5b06 	br	3090 <_gp+0xfffe6f34>
    4324:	01000074 	movhi	r4,1
    4328:	21090184 	addi	r4,r4,9222
    432c:	d9003515 	stw	r4,212(sp)
    4330:	003af206 	br	2efc <_gp+0xfffe6da0>
    4334:	013fffc4 	movi	r4,-1
    4338:	003a0806 	br	2b5c <_gp+0xfffe6a00>
    433c:	0023883a 	mov	r17,zero
    4340:	003d9d06 	br	39b8 <_gp+0xfffe785c>
    4344:	d9002d17 	ldw	r4,180(sp)
    4348:	d9801e04 	addi	r6,sp,120
    434c:	b80b883a 	mov	r5,r23
    4350:	0009e740 	call	9e74 <__sprint_r>
    4354:	1039d31e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    4358:	d8c02017 	ldw	r3,128(sp)
    435c:	da000404 	addi	r8,sp,16
    4360:	003d9406 	br	39b4 <_gp+0xfffe7858>
    4364:	01000074 	movhi	r4,1
    4368:	2108fd84 	addi	r4,r4,9206
    436c:	d9002c15 	stw	r4,176(sp)
    4370:	d9002c17 	ldw	r4,176(sp)
    4374:	1c47883a 	add	r3,r3,r17
    4378:	10800044 	addi	r2,r2,1
    437c:	41000015 	stw	r4,0(r8)
    4380:	44400115 	stw	r17,4(r8)
    4384:	d8c02015 	stw	r3,128(sp)
    4388:	d8801f15 	stw	r2,124(sp)
    438c:	010001c4 	movi	r4,7
    4390:	20bfd716 	blt	r4,r2,42f0 <_gp+0xfffe8194>
    4394:	42000204 	addi	r8,r8,8
    4398:	003fdd06 	br	4310 <_gp+0xfffe81b4>
    439c:	d9002d17 	ldw	r4,180(sp)
    43a0:	d9801e04 	addi	r6,sp,120
    43a4:	b80b883a 	mov	r5,r23
    43a8:	0009e740 	call	9e74 <__sprint_r>
    43ac:	1039bd1e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    43b0:	d8802617 	ldw	r2,152(sp)
    43b4:	d8c02017 	ldw	r3,128(sp)
    43b8:	da000404 	addi	r8,sp,16
    43bc:	003e1006 	br	3c00 <_gp+0xfffe7aa4>
    43c0:	00800044 	movi	r2,1
    43c4:	10803fcc 	andi	r2,r2,255
    43c8:	00c00044 	movi	r3,1
    43cc:	10fa0d26 	beq	r2,r3,2c04 <_gp+0xfffe6aa8>
    43d0:	00c00084 	movi	r3,2
    43d4:	10fbaf26 	beq	r2,r3,3294 <_gp+0xfffe7138>
    43d8:	003a6d06 	br	2d90 <_gp+0xfffe6c34>
    43dc:	01000074 	movhi	r4,1
    43e0:	21090184 	addi	r4,r4,9222
    43e4:	d9003515 	stw	r4,212(sp)
    43e8:	003b5406 	br	313c <_gp+0xfffe6fe0>
    43ec:	d8802a17 	ldw	r2,168(sp)
    43f0:	00c00184 	movi	r3,6
    43f4:	1880012e 	bgeu	r3,r2,43fc <___vfprintf_internal_r+0x1d68>
    43f8:	1805883a 	mov	r2,r3
    43fc:	d8802b15 	stw	r2,172(sp)
    4400:	1000ef16 	blt	r2,zero,47c0 <___vfprintf_internal_r+0x212c>
    4404:	04000074 	movhi	r16,1
    4408:	d8802915 	stw	r2,164(sp)
    440c:	dcc02e15 	stw	r19,184(sp)
    4410:	d8002a15 	stw	zero,168(sp)
    4414:	d8003215 	stw	zero,200(sp)
    4418:	8408fb04 	addi	r16,r16,9196
    441c:	0039883a 	mov	fp,zero
    4420:	003a8006 	br	2e24 <_gp+0xfffe6cc8>
    4424:	0021883a 	mov	r16,zero
    4428:	003e0706 	br	3c48 <_gp+0xfffe7aec>
    442c:	d9002d17 	ldw	r4,180(sp)
    4430:	d9801e04 	addi	r6,sp,120
    4434:	b80b883a 	mov	r5,r23
    4438:	0009e740 	call	9e74 <__sprint_r>
    443c:	1039991e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    4440:	d8802617 	ldw	r2,152(sp)
    4444:	d9403317 	ldw	r5,204(sp)
    4448:	d8c02017 	ldw	r3,128(sp)
    444c:	da000404 	addi	r8,sp,16
    4450:	2885c83a 	sub	r2,r5,r2
    4454:	003dfb06 	br	3c44 <_gp+0xfffe7ae8>
    4458:	9080004c 	andi	r2,r18,1
    445c:	103e8f1e 	bne	r2,zero,3e9c <_gp+0xfffe7d40>
    4460:	d8802117 	ldw	r2,132(sp)
    4464:	003e9e06 	br	3ee0 <_gp+0xfffe7d84>
    4468:	1025883a 	mov	r18,r2
    446c:	0039883a 	mov	fp,zero
    4470:	00800084 	movi	r2,2
    4474:	003fd306 	br	43c4 <_gp+0xfffe8268>
    4478:	07000b44 	movi	fp,45
    447c:	df002785 	stb	fp,158(sp)
    4480:	003a1b06 	br	2cf0 <_gp+0xfffe6b94>
    4484:	00c00b44 	movi	r3,45
    4488:	d8c02785 	stb	r3,158(sp)
    448c:	d8802915 	stw	r2,164(sp)
    4490:	dc802c17 	ldw	r18,176(sp)
    4494:	d8002a15 	stw	zero,168(sp)
    4498:	07000b44 	movi	fp,45
    449c:	003a5e06 	br	2e18 <_gp+0xfffe6cbc>
    44a0:	04000074 	movhi	r16,1
    44a4:	8408f004 	addi	r16,r16,9152
    44a8:	003f4706 	br	41c8 <_gp+0xfffe806c>
    44ac:	d9002e17 	ldw	r4,184(sp)
    44b0:	d9402f17 	ldw	r5,188(sp)
    44b4:	20800017 	ldw	r2,0(r4)
    44b8:	21000104 	addi	r4,r4,4
    44bc:	d9002e15 	stw	r4,184(sp)
    44c0:	11400015 	stw	r5,0(r2)
    44c4:	0038ab06 	br	2774 <_gp+0xfffe6618>
    44c8:	dd802617 	ldw	r22,152(sp)
    44cc:	00bfff44 	movi	r2,-3
    44d0:	b0801c16 	blt	r22,r2,4544 <___vfprintf_internal_r+0x1eb0>
    44d4:	d9402a17 	ldw	r5,168(sp)
    44d8:	2d801a16 	blt	r5,r22,4544 <___vfprintf_internal_r+0x1eb0>
    44dc:	dd803215 	stw	r22,200(sp)
    44e0:	003e8906 	br	3f08 <_gp+0xfffe7dac>
    44e4:	01000074 	movhi	r4,1
    44e8:	2108fd84 	addi	r4,r4,9206
    44ec:	d9002c15 	stw	r4,176(sp)
    44f0:	003c9106 	br	3738 <_gp+0xfffe75dc>
    44f4:	e005883a 	mov	r2,fp
    44f8:	003e7906 	br	3ee0 <_gp+0xfffe7d84>
    44fc:	d9002a17 	ldw	r4,168(sp)
    4500:	df002783 	ldbu	fp,158(sp)
    4504:	dcc02e15 	stw	r19,184(sp)
    4508:	d9002915 	stw	r4,164(sp)
    450c:	d9002b15 	stw	r4,172(sp)
    4510:	d8002a15 	stw	zero,168(sp)
    4514:	d8003215 	stw	zero,200(sp)
    4518:	003a3b06 	br	2e08 <_gp+0xfffe6cac>
    451c:	9080004c 	andi	r2,r18,1
    4520:	0039883a 	mov	fp,zero
    4524:	10000426 	beq	r2,zero,4538 <___vfprintf_internal_r+0x1ea4>
    4528:	00800c04 	movi	r2,48
    452c:	dc001dc4 	addi	r16,sp,119
    4530:	d8801dc5 	stb	r2,119(sp)
    4534:	003b6406 	br	32c8 <_gp+0xfffe716c>
    4538:	d8002b15 	stw	zero,172(sp)
    453c:	dc001e04 	addi	r16,sp,120
    4540:	003a2b06 	br	2df0 <_gp+0xfffe6c94>
    4544:	8c7fff84 	addi	r17,r17,-2
    4548:	b5bfffc4 	addi	r22,r22,-1
    454c:	dd802615 	stw	r22,152(sp)
    4550:	dc4022c5 	stb	r17,139(sp)
    4554:	b000bf16 	blt	r22,zero,4854 <___vfprintf_internal_r+0x21c0>
    4558:	00800ac4 	movi	r2,43
    455c:	d8802305 	stb	r2,140(sp)
    4560:	00800244 	movi	r2,9
    4564:	15807016 	blt	r2,r22,4728 <___vfprintf_internal_r+0x2094>
    4568:	00800c04 	movi	r2,48
    456c:	b5800c04 	addi	r22,r22,48
    4570:	d8802345 	stb	r2,141(sp)
    4574:	dd802385 	stb	r22,142(sp)
    4578:	d88023c4 	addi	r2,sp,143
    457c:	df0022c4 	addi	fp,sp,139
    4580:	d8c03317 	ldw	r3,204(sp)
    4584:	1739c83a 	sub	fp,r2,fp
    4588:	d9003317 	ldw	r4,204(sp)
    458c:	e0c7883a 	add	r3,fp,r3
    4590:	df003a15 	stw	fp,232(sp)
    4594:	d8c02b15 	stw	r3,172(sp)
    4598:	00800044 	movi	r2,1
    459c:	1100b30e 	bge	r2,r4,486c <___vfprintf_internal_r+0x21d8>
    45a0:	d8c02b17 	ldw	r3,172(sp)
    45a4:	18c00044 	addi	r3,r3,1
    45a8:	d8c02b15 	stw	r3,172(sp)
    45ac:	1805883a 	mov	r2,r3
    45b0:	1800ac16 	blt	r3,zero,4864 <___vfprintf_internal_r+0x21d0>
    45b4:	d8003215 	stw	zero,200(sp)
    45b8:	003e5d06 	br	3f30 <_gp+0xfffe7dd4>
    45bc:	d9002d17 	ldw	r4,180(sp)
    45c0:	d9801e04 	addi	r6,sp,120
    45c4:	b80b883a 	mov	r5,r23
    45c8:	0009e740 	call	9e74 <__sprint_r>
    45cc:	1039351e 	bne	r2,zero,2aa4 <_gp+0xfffe6948>
    45d0:	dc402617 	ldw	r17,152(sp)
    45d4:	d8c02017 	ldw	r3,128(sp)
    45d8:	d8801f17 	ldw	r2,124(sp)
    45dc:	da000404 	addi	r8,sp,16
    45e0:	003ed606 	br	413c <_gp+0xfffe7fe0>
    45e4:	182b883a 	mov	r21,r3
    45e8:	d8002a15 	stw	zero,168(sp)
    45ec:	00388c06 	br	2820 <_gp+0xfffe66c4>
    45f0:	d8802a17 	ldw	r2,168(sp)
    45f4:	103e071e 	bne	r2,zero,3e14 <_gp+0xfffe7cb8>
    45f8:	dc002a15 	stw	r16,168(sp)
    45fc:	003e0506 	br	3e14 <_gp+0xfffe7cb8>
    4600:	d9002a17 	ldw	r4,168(sp)
    4604:	20c00044 	addi	r3,r4,1
    4608:	003e0f06 	br	3e48 <_gp+0xfffe7cec>
    460c:	01400184 	movi	r5,6
    4610:	d9402a15 	stw	r5,168(sp)
    4614:	003dff06 	br	3e14 <_gp+0xfffe7cb8>
    4618:	d8802104 	addi	r2,sp,132
    461c:	d8800315 	stw	r2,12(sp)
    4620:	d8802504 	addi	r2,sp,148
    4624:	d8800215 	stw	r2,8(sp)
    4628:	d8802604 	addi	r2,sp,152
    462c:	d8800115 	stw	r2,4(sp)
    4630:	d8802a17 	ldw	r2,168(sp)
    4634:	d9403617 	ldw	r5,216(sp)
    4638:	d9002d17 	ldw	r4,180(sp)
    463c:	d8800015 	stw	r2,0(sp)
    4640:	01c000c4 	movi	r7,3
    4644:	980d883a 	mov	r6,r19
    4648:	da003d15 	stw	r8,244(sp)
    464c:	0004dc40 	call	4dc4 <_dtoa_r>
    4650:	d8c02a17 	ldw	r3,168(sp)
    4654:	da003d17 	ldw	r8,244(sp)
    4658:	1021883a 	mov	r16,r2
    465c:	10f9883a 	add	fp,r2,r3
    4660:	81000007 	ldb	r4,0(r16)
    4664:	00800c04 	movi	r2,48
    4668:	20805e26 	beq	r4,r2,47e4 <___vfprintf_internal_r+0x2150>
    466c:	d8c02617 	ldw	r3,152(sp)
    4670:	e0f9883a 	add	fp,fp,r3
    4674:	003e0a06 	br	3ea0 <_gp+0xfffe7d44>
    4678:	00c00b44 	movi	r3,45
    467c:	24e0003c 	xorhi	r19,r4,32768
    4680:	d8c02905 	stb	r3,164(sp)
    4684:	003de906 	br	3e2c <_gp+0xfffe7cd0>
    4688:	d8c03217 	ldw	r3,200(sp)
    468c:	00c07a0e 	bge	zero,r3,4878 <___vfprintf_internal_r+0x21e4>
    4690:	00800044 	movi	r2,1
    4694:	d9003317 	ldw	r4,204(sp)
    4698:	1105883a 	add	r2,r2,r4
    469c:	d8802b15 	stw	r2,172(sp)
    46a0:	10004e16 	blt	r2,zero,47dc <___vfprintf_internal_r+0x2148>
    46a4:	044019c4 	movi	r17,103
    46a8:	003e2106 	br	3f30 <_gp+0xfffe7dd4>
    46ac:	d9002a17 	ldw	r4,168(sp)
    46b0:	d8802104 	addi	r2,sp,132
    46b4:	d8800315 	stw	r2,12(sp)
    46b8:	d9000015 	stw	r4,0(sp)
    46bc:	d8802504 	addi	r2,sp,148
    46c0:	d9403617 	ldw	r5,216(sp)
    46c4:	d9002d17 	ldw	r4,180(sp)
    46c8:	d8800215 	stw	r2,8(sp)
    46cc:	d8802604 	addi	r2,sp,152
    46d0:	d8800115 	stw	r2,4(sp)
    46d4:	01c000c4 	movi	r7,3
    46d8:	980d883a 	mov	r6,r19
    46dc:	da003d15 	stw	r8,244(sp)
    46e0:	0004dc40 	call	4dc4 <_dtoa_r>
    46e4:	d8c02a17 	ldw	r3,168(sp)
    46e8:	da003d17 	ldw	r8,244(sp)
    46ec:	1021883a 	mov	r16,r2
    46f0:	00801184 	movi	r2,70
    46f4:	80f9883a 	add	fp,r16,r3
    46f8:	88bfd926 	beq	r17,r2,4660 <_gp+0xfffe8504>
    46fc:	003de806 	br	3ea0 <_gp+0xfffe7d44>
    4700:	d9002a17 	ldw	r4,168(sp)
    4704:	00c04d0e 	bge	zero,r3,483c <___vfprintf_internal_r+0x21a8>
    4708:	2000441e 	bne	r4,zero,481c <___vfprintf_internal_r+0x2188>
    470c:	9480004c 	andi	r18,r18,1
    4710:	9000421e 	bne	r18,zero,481c <___vfprintf_internal_r+0x2188>
    4714:	1805883a 	mov	r2,r3
    4718:	18006f16 	blt	r3,zero,48d8 <___vfprintf_internal_r+0x2244>
    471c:	d8c03217 	ldw	r3,200(sp)
    4720:	d8c02b15 	stw	r3,172(sp)
    4724:	003e0206 	br	3f30 <_gp+0xfffe7dd4>
    4728:	df0022c4 	addi	fp,sp,139
    472c:	dc002a15 	stw	r16,168(sp)
    4730:	4027883a 	mov	r19,r8
    4734:	e021883a 	mov	r16,fp
    4738:	b009883a 	mov	r4,r22
    473c:	01400284 	movi	r5,10
    4740:	000ca000 	call	ca00 <__modsi3>
    4744:	10800c04 	addi	r2,r2,48
    4748:	843fffc4 	addi	r16,r16,-1
    474c:	b009883a 	mov	r4,r22
    4750:	01400284 	movi	r5,10
    4754:	80800005 	stb	r2,0(r16)
    4758:	000c97c0 	call	c97c <__divsi3>
    475c:	102d883a 	mov	r22,r2
    4760:	00800244 	movi	r2,9
    4764:	15bff416 	blt	r2,r22,4738 <_gp+0xfffe85dc>
    4768:	9811883a 	mov	r8,r19
    476c:	b0800c04 	addi	r2,r22,48
    4770:	8027883a 	mov	r19,r16
    4774:	997fffc4 	addi	r5,r19,-1
    4778:	98bfffc5 	stb	r2,-1(r19)
    477c:	dc002a17 	ldw	r16,168(sp)
    4780:	2f006d2e 	bgeu	r5,fp,4938 <___vfprintf_internal_r+0x22a4>
    4784:	d9c02384 	addi	r7,sp,142
    4788:	3ccfc83a 	sub	r7,r7,r19
    478c:	d9002344 	addi	r4,sp,141
    4790:	e1cf883a 	add	r7,fp,r7
    4794:	00000106 	br	479c <___vfprintf_internal_r+0x2108>
    4798:	28800003 	ldbu	r2,0(r5)
    479c:	20800005 	stb	r2,0(r4)
    47a0:	21000044 	addi	r4,r4,1
    47a4:	29400044 	addi	r5,r5,1
    47a8:	393ffb1e 	bne	r7,r4,4798 <_gp+0xfffe863c>
    47ac:	d8802304 	addi	r2,sp,140
    47b0:	14c5c83a 	sub	r2,r2,r19
    47b4:	d8c02344 	addi	r3,sp,141
    47b8:	1885883a 	add	r2,r3,r2
    47bc:	003f7006 	br	4580 <_gp+0xfffe8424>
    47c0:	0005883a 	mov	r2,zero
    47c4:	003f0f06 	br	4404 <_gp+0xfffe82a8>
    47c8:	d8c03217 	ldw	r3,200(sp)
    47cc:	18c00044 	addi	r3,r3,1
    47d0:	d8c02b15 	stw	r3,172(sp)
    47d4:	1805883a 	mov	r2,r3
    47d8:	183fb20e 	bge	r3,zero,46a4 <_gp+0xfffe8548>
    47dc:	0005883a 	mov	r2,zero
    47e0:	003fb006 	br	46a4 <_gp+0xfffe8548>
    47e4:	d9003617 	ldw	r4,216(sp)
    47e8:	000d883a 	mov	r6,zero
    47ec:	000f883a 	mov	r7,zero
    47f0:	980b883a 	mov	r5,r19
    47f4:	d8c03c15 	stw	r3,240(sp)
    47f8:	da003d15 	stw	r8,244(sp)
    47fc:	000ddd40 	call	ddd4 <__eqdf2>
    4800:	d8c03c17 	ldw	r3,240(sp)
    4804:	da003d17 	ldw	r8,244(sp)
    4808:	103f9826 	beq	r2,zero,466c <_gp+0xfffe8510>
    480c:	00800044 	movi	r2,1
    4810:	10c7c83a 	sub	r3,r2,r3
    4814:	d8c02615 	stw	r3,152(sp)
    4818:	003f9506 	br	4670 <_gp+0xfffe8514>
    481c:	d9002a17 	ldw	r4,168(sp)
    4820:	d8c03217 	ldw	r3,200(sp)
    4824:	20800044 	addi	r2,r4,1
    4828:	1885883a 	add	r2,r3,r2
    482c:	d8802b15 	stw	r2,172(sp)
    4830:	103dbf0e 	bge	r2,zero,3f30 <_gp+0xfffe7dd4>
    4834:	0005883a 	mov	r2,zero
    4838:	003dbd06 	br	3f30 <_gp+0xfffe7dd4>
    483c:	2000201e 	bne	r4,zero,48c0 <___vfprintf_internal_r+0x222c>
    4840:	9480004c 	andi	r18,r18,1
    4844:	90001e1e 	bne	r18,zero,48c0 <___vfprintf_internal_r+0x222c>
    4848:	00800044 	movi	r2,1
    484c:	d8802b15 	stw	r2,172(sp)
    4850:	003db706 	br	3f30 <_gp+0xfffe7dd4>
    4854:	00800b44 	movi	r2,45
    4858:	05adc83a 	sub	r22,zero,r22
    485c:	d8802305 	stb	r2,140(sp)
    4860:	003f3f06 	br	4560 <_gp+0xfffe8404>
    4864:	0005883a 	mov	r2,zero
    4868:	003f5206 	br	45b4 <_gp+0xfffe8458>
    486c:	90a4703a 	and	r18,r18,r2
    4870:	903f4e26 	beq	r18,zero,45ac <_gp+0xfffe8450>
    4874:	003f4a06 	br	45a0 <_gp+0xfffe8444>
    4878:	00800084 	movi	r2,2
    487c:	10c5c83a 	sub	r2,r2,r3
    4880:	003f8406 	br	4694 <_gp+0xfffe8538>
    4884:	d9402e17 	ldw	r5,184(sp)
    4888:	d9002e17 	ldw	r4,184(sp)
    488c:	ac400043 	ldbu	r17,1(r21)
    4890:	29400017 	ldw	r5,0(r5)
    4894:	20800104 	addi	r2,r4,4
    4898:	d8802e15 	stw	r2,184(sp)
    489c:	d9402a15 	stw	r5,168(sp)
    48a0:	182b883a 	mov	r21,r3
    48a4:	283e7b0e 	bge	r5,zero,4294 <_gp+0xfffe8138>
    48a8:	8c403fcc 	andi	r17,r17,255
    48ac:	017fffc4 	movi	r5,-1
    48b0:	8c40201c 	xori	r17,r17,128
    48b4:	d9402a15 	stw	r5,168(sp)
    48b8:	8c7fe004 	addi	r17,r17,-128
    48bc:	0037d706 	br	281c <_gp+0xfffe66c0>
    48c0:	d8c02a17 	ldw	r3,168(sp)
    48c4:	18c00084 	addi	r3,r3,2
    48c8:	d8c02b15 	stw	r3,172(sp)
    48cc:	1805883a 	mov	r2,r3
    48d0:	183d970e 	bge	r3,zero,3f30 <_gp+0xfffe7dd4>
    48d4:	003fd706 	br	4834 <_gp+0xfffe86d8>
    48d8:	0005883a 	mov	r2,zero
    48dc:	003f8f06 	br	471c <_gp+0xfffe85c0>
    48e0:	9080004c 	andi	r2,r18,1
    48e4:	103f821e 	bne	r2,zero,46f0 <_gp+0xfffe8594>
    48e8:	d8802117 	ldw	r2,132(sp)
    48ec:	1405c83a 	sub	r2,r2,r16
    48f0:	d8803315 	stw	r2,204(sp)
    48f4:	b47ef426 	beq	r22,r17,44c8 <_gp+0xfffe836c>
    48f8:	dd802617 	ldw	r22,152(sp)
    48fc:	003f1206 	br	4548 <_gp+0xfffe83ec>
    4900:	d8c02b03 	ldbu	r3,172(sp)
    4904:	d8c02785 	stb	r3,158(sp)
    4908:	0038df06 	br	2c88 <_gp+0xfffe6b2c>
    490c:	d8c02b03 	ldbu	r3,172(sp)
    4910:	d8c02785 	stb	r3,158(sp)
    4914:	0038aa06 	br	2bc0 <_gp+0xfffe6a64>
    4918:	d8c02b03 	ldbu	r3,172(sp)
    491c:	d8c02785 	stb	r3,158(sp)
    4920:	003a4306 	br	3230 <_gp+0xfffe70d4>
    4924:	d8c02b03 	ldbu	r3,172(sp)
    4928:	d8c02785 	stb	r3,158(sp)
    492c:	003af506 	br	3504 <_gp+0xfffe73a8>
    4930:	0005883a 	mov	r2,zero
    4934:	003d7b06 	br	3f24 <_gp+0xfffe7dc8>
    4938:	d8802344 	addi	r2,sp,141
    493c:	003f1006 	br	4580 <_gp+0xfffe8424>
    4940:	d8c02b03 	ldbu	r3,172(sp)
    4944:	d8c02785 	stb	r3,158(sp)
    4948:	0038fd06 	br	2d40 <_gp+0xfffe6be4>
    494c:	d8c02b03 	ldbu	r3,172(sp)
    4950:	d8c02785 	stb	r3,158(sp)
    4954:	003a9706 	br	33b4 <_gp+0xfffe7258>
    4958:	d8c02b03 	ldbu	r3,172(sp)
    495c:	d8c02785 	stb	r3,158(sp)
    4960:	003a1806 	br	31c4 <_gp+0xfffe7068>
    4964:	d8c02b03 	ldbu	r3,172(sp)
    4968:	d8c02785 	stb	r3,158(sp)
    496c:	003abe06 	br	3468 <_gp+0xfffe730c>

00004970 <__vfprintf_internal>:
    4970:	00800074 	movhi	r2,1
    4974:	10905804 	addi	r2,r2,16736
    4978:	300f883a 	mov	r7,r6
    497c:	280d883a 	mov	r6,r5
    4980:	200b883a 	mov	r5,r4
    4984:	11000017 	ldw	r4,0(r2)
    4988:	00026941 	jmpi	2694 <___vfprintf_internal_r>

0000498c <__sbprintf>:
    498c:	2880030b 	ldhu	r2,12(r5)
    4990:	2ac01917 	ldw	r11,100(r5)
    4994:	2a80038b 	ldhu	r10,14(r5)
    4998:	2a400717 	ldw	r9,28(r5)
    499c:	2a000917 	ldw	r8,36(r5)
    49a0:	defee204 	addi	sp,sp,-1144
    49a4:	00c10004 	movi	r3,1024
    49a8:	dc011a15 	stw	r16,1128(sp)
    49ac:	10bfff4c 	andi	r2,r2,65533
    49b0:	2821883a 	mov	r16,r5
    49b4:	d8cb883a 	add	r5,sp,r3
    49b8:	dc811c15 	stw	r18,1136(sp)
    49bc:	dc411b15 	stw	r17,1132(sp)
    49c0:	dfc11d15 	stw	ra,1140(sp)
    49c4:	2025883a 	mov	r18,r4
    49c8:	d881030d 	sth	r2,1036(sp)
    49cc:	dac11915 	stw	r11,1124(sp)
    49d0:	da81038d 	sth	r10,1038(sp)
    49d4:	da410715 	stw	r9,1052(sp)
    49d8:	da010915 	stw	r8,1060(sp)
    49dc:	dec10015 	stw	sp,1024(sp)
    49e0:	dec10415 	stw	sp,1040(sp)
    49e4:	d8c10215 	stw	r3,1032(sp)
    49e8:	d8c10515 	stw	r3,1044(sp)
    49ec:	d8010615 	stw	zero,1048(sp)
    49f0:	00026940 	call	2694 <___vfprintf_internal_r>
    49f4:	1023883a 	mov	r17,r2
    49f8:	10000416 	blt	r2,zero,4a0c <__sbprintf+0x80>
    49fc:	d9410004 	addi	r5,sp,1024
    4a00:	9009883a 	mov	r4,r18
    4a04:	00066680 	call	6668 <_fflush_r>
    4a08:	10000d1e 	bne	r2,zero,4a40 <__sbprintf+0xb4>
    4a0c:	d881030b 	ldhu	r2,1036(sp)
    4a10:	1080100c 	andi	r2,r2,64
    4a14:	10000326 	beq	r2,zero,4a24 <__sbprintf+0x98>
    4a18:	8080030b 	ldhu	r2,12(r16)
    4a1c:	10801014 	ori	r2,r2,64
    4a20:	8080030d 	sth	r2,12(r16)
    4a24:	8805883a 	mov	r2,r17
    4a28:	dfc11d17 	ldw	ra,1140(sp)
    4a2c:	dc811c17 	ldw	r18,1136(sp)
    4a30:	dc411b17 	ldw	r17,1132(sp)
    4a34:	dc011a17 	ldw	r16,1128(sp)
    4a38:	dec11e04 	addi	sp,sp,1144
    4a3c:	f800283a 	ret
    4a40:	047fffc4 	movi	r17,-1
    4a44:	003ff106 	br	4a0c <_gp+0xfffe88b0>

00004a48 <__swsetup_r>:
    4a48:	00800074 	movhi	r2,1
    4a4c:	defffd04 	addi	sp,sp,-12
    4a50:	10905804 	addi	r2,r2,16736
    4a54:	dc400115 	stw	r17,4(sp)
    4a58:	2023883a 	mov	r17,r4
    4a5c:	11000017 	ldw	r4,0(r2)
    4a60:	dc000015 	stw	r16,0(sp)
    4a64:	dfc00215 	stw	ra,8(sp)
    4a68:	2821883a 	mov	r16,r5
    4a6c:	20000226 	beq	r4,zero,4a78 <__swsetup_r+0x30>
    4a70:	20800e17 	ldw	r2,56(r4)
    4a74:	10003126 	beq	r2,zero,4b3c <__swsetup_r+0xf4>
    4a78:	8080030b 	ldhu	r2,12(r16)
    4a7c:	10c0020c 	andi	r3,r2,8
    4a80:	1009883a 	mov	r4,r2
    4a84:	18000f26 	beq	r3,zero,4ac4 <__swsetup_r+0x7c>
    4a88:	80c00417 	ldw	r3,16(r16)
    4a8c:	18001526 	beq	r3,zero,4ae4 <__swsetup_r+0x9c>
    4a90:	1100004c 	andi	r4,r2,1
    4a94:	20001c1e 	bne	r4,zero,4b08 <__swsetup_r+0xc0>
    4a98:	1080008c 	andi	r2,r2,2
    4a9c:	1000291e 	bne	r2,zero,4b44 <__swsetup_r+0xfc>
    4aa0:	80800517 	ldw	r2,20(r16)
    4aa4:	80800215 	stw	r2,8(r16)
    4aa8:	18001c26 	beq	r3,zero,4b1c <__swsetup_r+0xd4>
    4aac:	0005883a 	mov	r2,zero
    4ab0:	dfc00217 	ldw	ra,8(sp)
    4ab4:	dc400117 	ldw	r17,4(sp)
    4ab8:	dc000017 	ldw	r16,0(sp)
    4abc:	dec00304 	addi	sp,sp,12
    4ac0:	f800283a 	ret
    4ac4:	2080040c 	andi	r2,r4,16
    4ac8:	10002e26 	beq	r2,zero,4b84 <__swsetup_r+0x13c>
    4acc:	2080010c 	andi	r2,r4,4
    4ad0:	10001e1e 	bne	r2,zero,4b4c <__swsetup_r+0x104>
    4ad4:	80c00417 	ldw	r3,16(r16)
    4ad8:	20800214 	ori	r2,r4,8
    4adc:	8080030d 	sth	r2,12(r16)
    4ae0:	183feb1e 	bne	r3,zero,4a90 <_gp+0xfffe8934>
    4ae4:	1100a00c 	andi	r4,r2,640
    4ae8:	01408004 	movi	r5,512
    4aec:	217fe826 	beq	r4,r5,4a90 <_gp+0xfffe8934>
    4af0:	800b883a 	mov	r5,r16
    4af4:	8809883a 	mov	r4,r17
    4af8:	00076040 	call	7604 <__smakebuf_r>
    4afc:	8080030b 	ldhu	r2,12(r16)
    4b00:	80c00417 	ldw	r3,16(r16)
    4b04:	003fe206 	br	4a90 <_gp+0xfffe8934>
    4b08:	80800517 	ldw	r2,20(r16)
    4b0c:	80000215 	stw	zero,8(r16)
    4b10:	0085c83a 	sub	r2,zero,r2
    4b14:	80800615 	stw	r2,24(r16)
    4b18:	183fe41e 	bne	r3,zero,4aac <_gp+0xfffe8950>
    4b1c:	80c0030b 	ldhu	r3,12(r16)
    4b20:	0005883a 	mov	r2,zero
    4b24:	1900200c 	andi	r4,r3,128
    4b28:	203fe126 	beq	r4,zero,4ab0 <_gp+0xfffe8954>
    4b2c:	18c01014 	ori	r3,r3,64
    4b30:	80c0030d 	sth	r3,12(r16)
    4b34:	00bfffc4 	movi	r2,-1
    4b38:	003fdd06 	br	4ab0 <_gp+0xfffe8954>
    4b3c:	0006a540 	call	6a54 <__sinit>
    4b40:	003fcd06 	br	4a78 <_gp+0xfffe891c>
    4b44:	0005883a 	mov	r2,zero
    4b48:	003fd606 	br	4aa4 <_gp+0xfffe8948>
    4b4c:	81400c17 	ldw	r5,48(r16)
    4b50:	28000626 	beq	r5,zero,4b6c <__swsetup_r+0x124>
    4b54:	80801004 	addi	r2,r16,64
    4b58:	28800326 	beq	r5,r2,4b68 <__swsetup_r+0x120>
    4b5c:	8809883a 	mov	r4,r17
    4b60:	0006bc80 	call	6bc8 <_free_r>
    4b64:	8100030b 	ldhu	r4,12(r16)
    4b68:	80000c15 	stw	zero,48(r16)
    4b6c:	80c00417 	ldw	r3,16(r16)
    4b70:	00bff6c4 	movi	r2,-37
    4b74:	1108703a 	and	r4,r2,r4
    4b78:	80000115 	stw	zero,4(r16)
    4b7c:	80c00015 	stw	r3,0(r16)
    4b80:	003fd506 	br	4ad8 <_gp+0xfffe897c>
    4b84:	00800244 	movi	r2,9
    4b88:	88800015 	stw	r2,0(r17)
    4b8c:	20801014 	ori	r2,r4,64
    4b90:	8080030d 	sth	r2,12(r16)
    4b94:	00bfffc4 	movi	r2,-1
    4b98:	003fc506 	br	4ab0 <_gp+0xfffe8954>

00004b9c <quorem>:
    4b9c:	defff204 	addi	sp,sp,-56
    4ba0:	ddc00b15 	stw	r23,44(sp)
    4ba4:	20800417 	ldw	r2,16(r4)
    4ba8:	2dc00417 	ldw	r23,16(r5)
    4bac:	dfc00d15 	stw	ra,52(sp)
    4bb0:	df000c15 	stw	fp,48(sp)
    4bb4:	dd800a15 	stw	r22,40(sp)
    4bb8:	dd400915 	stw	r21,36(sp)
    4bbc:	dd000815 	stw	r20,32(sp)
    4bc0:	dcc00715 	stw	r19,28(sp)
    4bc4:	dc800615 	stw	r18,24(sp)
    4bc8:	dc400515 	stw	r17,20(sp)
    4bcc:	dc000415 	stw	r16,16(sp)
    4bd0:	15c07a16 	blt	r2,r23,4dbc <quorem+0x220>
    4bd4:	bdffffc4 	addi	r23,r23,-1
    4bd8:	bde9883a 	add	r20,r23,r23
    4bdc:	28c00504 	addi	r3,r5,20
    4be0:	a529883a 	add	r20,r20,r20
    4be4:	1d39883a 	add	fp,r3,r20
    4be8:	24c00504 	addi	r19,r4,20
    4bec:	d9400215 	stw	r5,8(sp)
    4bf0:	9d29883a 	add	r20,r19,r20
    4bf4:	e1400017 	ldw	r5,0(fp)
    4bf8:	d9000015 	stw	r4,0(sp)
    4bfc:	a1000017 	ldw	r4,0(r20)
    4c00:	29400044 	addi	r5,r5,1
    4c04:	d8c00115 	stw	r3,4(sp)
    4c08:	dd000315 	stw	r20,12(sp)
    4c0c:	000ca740 	call	ca74 <__udivsi3>
    4c10:	1025883a 	mov	r18,r2
    4c14:	10003026 	beq	r2,zero,4cd8 <quorem+0x13c>
    4c18:	dc400117 	ldw	r17,4(sp)
    4c1c:	9829883a 	mov	r20,r19
    4c20:	002d883a 	mov	r22,zero
    4c24:	0021883a 	mov	r16,zero
    4c28:	8d400017 	ldw	r21,0(r17)
    4c2c:	900b883a 	mov	r5,r18
    4c30:	8c400104 	addi	r17,r17,4
    4c34:	a93fffcc 	andi	r4,r21,65535
    4c38:	000cb300 	call	cb30 <__mulsi3>
    4c3c:	a808d43a 	srli	r4,r21,16
    4c40:	900b883a 	mov	r5,r18
    4c44:	15ad883a 	add	r22,r2,r22
    4c48:	000cb300 	call	cb30 <__mulsi3>
    4c4c:	a1000017 	ldw	r4,0(r20)
    4c50:	b00cd43a 	srli	r6,r22,16
    4c54:	b0ffffcc 	andi	r3,r22,65535
    4c58:	217fffcc 	andi	r5,r4,65535
    4c5c:	2c21883a 	add	r16,r5,r16
    4c60:	80c7c83a 	sub	r3,r16,r3
    4c64:	2008d43a 	srli	r4,r4,16
    4c68:	1185883a 	add	r2,r2,r6
    4c6c:	1821d43a 	srai	r16,r3,16
    4c70:	117fffcc 	andi	r5,r2,65535
    4c74:	2149c83a 	sub	r4,r4,r5
    4c78:	2421883a 	add	r16,r4,r16
    4c7c:	8008943a 	slli	r4,r16,16
    4c80:	18ffffcc 	andi	r3,r3,65535
    4c84:	102cd43a 	srli	r22,r2,16
    4c88:	20c8b03a 	or	r4,r4,r3
    4c8c:	a1000015 	stw	r4,0(r20)
    4c90:	8021d43a 	srai	r16,r16,16
    4c94:	a5000104 	addi	r20,r20,4
    4c98:	e47fe32e 	bgeu	fp,r17,4c28 <_gp+0xfffe8acc>
    4c9c:	d8c00317 	ldw	r3,12(sp)
    4ca0:	18800017 	ldw	r2,0(r3)
    4ca4:	10000c1e 	bne	r2,zero,4cd8 <quorem+0x13c>
    4ca8:	18bfff04 	addi	r2,r3,-4
    4cac:	9880082e 	bgeu	r19,r2,4cd0 <quorem+0x134>
    4cb0:	18ffff17 	ldw	r3,-4(r3)
    4cb4:	18000326 	beq	r3,zero,4cc4 <quorem+0x128>
    4cb8:	00000506 	br	4cd0 <quorem+0x134>
    4cbc:	10c00017 	ldw	r3,0(r2)
    4cc0:	1800031e 	bne	r3,zero,4cd0 <quorem+0x134>
    4cc4:	10bfff04 	addi	r2,r2,-4
    4cc8:	bdffffc4 	addi	r23,r23,-1
    4ccc:	98bffb36 	bltu	r19,r2,4cbc <_gp+0xfffe8b60>
    4cd0:	d8c00017 	ldw	r3,0(sp)
    4cd4:	1dc00415 	stw	r23,16(r3)
    4cd8:	d9400217 	ldw	r5,8(sp)
    4cdc:	d9000017 	ldw	r4,0(sp)
    4ce0:	0008e000 	call	8e00 <__mcmp>
    4ce4:	10002816 	blt	r2,zero,4d88 <quorem+0x1ec>
    4ce8:	dc400117 	ldw	r17,4(sp)
    4cec:	94800044 	addi	r18,r18,1
    4cf0:	980d883a 	mov	r6,r19
    4cf4:	0007883a 	mov	r3,zero
    4cf8:	31000017 	ldw	r4,0(r6)
    4cfc:	89400017 	ldw	r5,0(r17)
    4d00:	31800104 	addi	r6,r6,4
    4d04:	20bfffcc 	andi	r2,r4,65535
    4d08:	10c7883a 	add	r3,r2,r3
    4d0c:	28bfffcc 	andi	r2,r5,65535
    4d10:	1885c83a 	sub	r2,r3,r2
    4d14:	280ad43a 	srli	r5,r5,16
    4d18:	2008d43a 	srli	r4,r4,16
    4d1c:	1007d43a 	srai	r3,r2,16
    4d20:	10bfffcc 	andi	r2,r2,65535
    4d24:	2149c83a 	sub	r4,r4,r5
    4d28:	20c9883a 	add	r4,r4,r3
    4d2c:	200a943a 	slli	r5,r4,16
    4d30:	8c400104 	addi	r17,r17,4
    4d34:	2007d43a 	srai	r3,r4,16
    4d38:	2884b03a 	or	r2,r5,r2
    4d3c:	30bfff15 	stw	r2,-4(r6)
    4d40:	e47fed2e 	bgeu	fp,r17,4cf8 <_gp+0xfffe8b9c>
    4d44:	bdc5883a 	add	r2,r23,r23
    4d48:	1085883a 	add	r2,r2,r2
    4d4c:	9887883a 	add	r3,r19,r2
    4d50:	18800017 	ldw	r2,0(r3)
    4d54:	10000c1e 	bne	r2,zero,4d88 <quorem+0x1ec>
    4d58:	18bfff04 	addi	r2,r3,-4
    4d5c:	9880082e 	bgeu	r19,r2,4d80 <quorem+0x1e4>
    4d60:	18ffff17 	ldw	r3,-4(r3)
    4d64:	18000326 	beq	r3,zero,4d74 <quorem+0x1d8>
    4d68:	00000506 	br	4d80 <quorem+0x1e4>
    4d6c:	10c00017 	ldw	r3,0(r2)
    4d70:	1800031e 	bne	r3,zero,4d80 <quorem+0x1e4>
    4d74:	10bfff04 	addi	r2,r2,-4
    4d78:	bdffffc4 	addi	r23,r23,-1
    4d7c:	98bffb36 	bltu	r19,r2,4d6c <_gp+0xfffe8c10>
    4d80:	d8c00017 	ldw	r3,0(sp)
    4d84:	1dc00415 	stw	r23,16(r3)
    4d88:	9005883a 	mov	r2,r18
    4d8c:	dfc00d17 	ldw	ra,52(sp)
    4d90:	df000c17 	ldw	fp,48(sp)
    4d94:	ddc00b17 	ldw	r23,44(sp)
    4d98:	dd800a17 	ldw	r22,40(sp)
    4d9c:	dd400917 	ldw	r21,36(sp)
    4da0:	dd000817 	ldw	r20,32(sp)
    4da4:	dcc00717 	ldw	r19,28(sp)
    4da8:	dc800617 	ldw	r18,24(sp)
    4dac:	dc400517 	ldw	r17,20(sp)
    4db0:	dc000417 	ldw	r16,16(sp)
    4db4:	dec00e04 	addi	sp,sp,56
    4db8:	f800283a 	ret
    4dbc:	0005883a 	mov	r2,zero
    4dc0:	003ff206 	br	4d8c <_gp+0xfffe8c30>

00004dc4 <_dtoa_r>:
    4dc4:	20801017 	ldw	r2,64(r4)
    4dc8:	deffde04 	addi	sp,sp,-136
    4dcc:	df002015 	stw	fp,128(sp)
    4dd0:	dcc01b15 	stw	r19,108(sp)
    4dd4:	dc801a15 	stw	r18,104(sp)
    4dd8:	dc401915 	stw	r17,100(sp)
    4ddc:	dc001815 	stw	r16,96(sp)
    4de0:	dfc02115 	stw	ra,132(sp)
    4de4:	ddc01f15 	stw	r23,124(sp)
    4de8:	dd801e15 	stw	r22,120(sp)
    4dec:	dd401d15 	stw	r21,116(sp)
    4df0:	dd001c15 	stw	r20,112(sp)
    4df4:	d9c00315 	stw	r7,12(sp)
    4df8:	2039883a 	mov	fp,r4
    4dfc:	3023883a 	mov	r17,r6
    4e00:	2825883a 	mov	r18,r5
    4e04:	dc002417 	ldw	r16,144(sp)
    4e08:	3027883a 	mov	r19,r6
    4e0c:	10000826 	beq	r2,zero,4e30 <_dtoa_r+0x6c>
    4e10:	21801117 	ldw	r6,68(r4)
    4e14:	00c00044 	movi	r3,1
    4e18:	100b883a 	mov	r5,r2
    4e1c:	1986983a 	sll	r3,r3,r6
    4e20:	11800115 	stw	r6,4(r2)
    4e24:	10c00215 	stw	r3,8(r2)
    4e28:	00085240 	call	8524 <_Bfree>
    4e2c:	e0001015 	stw	zero,64(fp)
    4e30:	88002e16 	blt	r17,zero,4eec <_dtoa_r+0x128>
    4e34:	80000015 	stw	zero,0(r16)
    4e38:	889ffc2c 	andhi	r2,r17,32752
    4e3c:	00dffc34 	movhi	r3,32752
    4e40:	10c01c26 	beq	r2,r3,4eb4 <_dtoa_r+0xf0>
    4e44:	000d883a 	mov	r6,zero
    4e48:	000f883a 	mov	r7,zero
    4e4c:	9009883a 	mov	r4,r18
    4e50:	980b883a 	mov	r5,r19
    4e54:	000ddd40 	call	ddd4 <__eqdf2>
    4e58:	10002b1e 	bne	r2,zero,4f08 <_dtoa_r+0x144>
    4e5c:	d9c02317 	ldw	r7,140(sp)
    4e60:	00800044 	movi	r2,1
    4e64:	38800015 	stw	r2,0(r7)
    4e68:	d8802517 	ldw	r2,148(sp)
    4e6c:	10019e26 	beq	r2,zero,54e8 <_dtoa_r+0x724>
    4e70:	d8c02517 	ldw	r3,148(sp)
    4e74:	00800074 	movhi	r2,1
    4e78:	1088fd44 	addi	r2,r2,9205
    4e7c:	18800015 	stw	r2,0(r3)
    4e80:	10bfffc4 	addi	r2,r2,-1
    4e84:	dfc02117 	ldw	ra,132(sp)
    4e88:	df002017 	ldw	fp,128(sp)
    4e8c:	ddc01f17 	ldw	r23,124(sp)
    4e90:	dd801e17 	ldw	r22,120(sp)
    4e94:	dd401d17 	ldw	r21,116(sp)
    4e98:	dd001c17 	ldw	r20,112(sp)
    4e9c:	dcc01b17 	ldw	r19,108(sp)
    4ea0:	dc801a17 	ldw	r18,104(sp)
    4ea4:	dc401917 	ldw	r17,100(sp)
    4ea8:	dc001817 	ldw	r16,96(sp)
    4eac:	dec02204 	addi	sp,sp,136
    4eb0:	f800283a 	ret
    4eb4:	d8c02317 	ldw	r3,140(sp)
    4eb8:	0089c3c4 	movi	r2,9999
    4ebc:	18800015 	stw	r2,0(r3)
    4ec0:	90017726 	beq	r18,zero,54a0 <_dtoa_r+0x6dc>
    4ec4:	00800074 	movhi	r2,1
    4ec8:	10890904 	addi	r2,r2,9252
    4ecc:	d9002517 	ldw	r4,148(sp)
    4ed0:	203fec26 	beq	r4,zero,4e84 <_gp+0xfffe8d28>
    4ed4:	10c000c7 	ldb	r3,3(r2)
    4ed8:	1801781e 	bne	r3,zero,54bc <_dtoa_r+0x6f8>
    4edc:	10c000c4 	addi	r3,r2,3
    4ee0:	d9802517 	ldw	r6,148(sp)
    4ee4:	30c00015 	stw	r3,0(r6)
    4ee8:	003fe606 	br	4e84 <_gp+0xfffe8d28>
    4eec:	04e00034 	movhi	r19,32768
    4ef0:	9cffffc4 	addi	r19,r19,-1
    4ef4:	00800044 	movi	r2,1
    4ef8:	8ce6703a 	and	r19,r17,r19
    4efc:	80800015 	stw	r2,0(r16)
    4f00:	9823883a 	mov	r17,r19
    4f04:	003fcc06 	br	4e38 <_gp+0xfffe8cdc>
    4f08:	d8800204 	addi	r2,sp,8
    4f0c:	d8800015 	stw	r2,0(sp)
    4f10:	d9c00104 	addi	r7,sp,4
    4f14:	900b883a 	mov	r5,r18
    4f18:	980d883a 	mov	r6,r19
    4f1c:	e009883a 	mov	r4,fp
    4f20:	8820d53a 	srli	r16,r17,20
    4f24:	00091cc0 	call	91cc <__d2b>
    4f28:	d8800915 	stw	r2,36(sp)
    4f2c:	8001651e 	bne	r16,zero,54c4 <_dtoa_r+0x700>
    4f30:	dd800217 	ldw	r22,8(sp)
    4f34:	dc000117 	ldw	r16,4(sp)
    4f38:	00800804 	movi	r2,32
    4f3c:	b421883a 	add	r16,r22,r16
    4f40:	80c10c84 	addi	r3,r16,1074
    4f44:	10c2d10e 	bge	r2,r3,5a8c <_dtoa_r+0xcc8>
    4f48:	00801004 	movi	r2,64
    4f4c:	81010484 	addi	r4,r16,1042
    4f50:	10c7c83a 	sub	r3,r2,r3
    4f54:	9108d83a 	srl	r4,r18,r4
    4f58:	88e2983a 	sll	r17,r17,r3
    4f5c:	2448b03a 	or	r4,r4,r17
    4f60:	000f2f00 	call	f2f0 <__floatunsidf>
    4f64:	017f8434 	movhi	r5,65040
    4f68:	01800044 	movi	r6,1
    4f6c:	1009883a 	mov	r4,r2
    4f70:	194b883a 	add	r5,r3,r5
    4f74:	843fffc4 	addi	r16,r16,-1
    4f78:	d9801115 	stw	r6,68(sp)
    4f7c:	000d883a 	mov	r6,zero
    4f80:	01cffe34 	movhi	r7,16376
    4f84:	000e8980 	call	e898 <__subdf3>
    4f88:	0198dbf4 	movhi	r6,25455
    4f8c:	01cff4f4 	movhi	r7,16339
    4f90:	3190d844 	addi	r6,r6,17249
    4f94:	39e1e9c4 	addi	r7,r7,-30809
    4f98:	1009883a 	mov	r4,r2
    4f9c:	180b883a 	mov	r5,r3
    4fa0:	000e02c0 	call	e02c <__muldf3>
    4fa4:	01a2d874 	movhi	r6,35681
    4fa8:	01cff1f4 	movhi	r7,16327
    4fac:	31b22cc4 	addi	r6,r6,-14157
    4fb0:	39e28a04 	addi	r7,r7,-30168
    4fb4:	180b883a 	mov	r5,r3
    4fb8:	1009883a 	mov	r4,r2
    4fbc:	000cb580 	call	cb58 <__adddf3>
    4fc0:	8009883a 	mov	r4,r16
    4fc4:	1029883a 	mov	r20,r2
    4fc8:	1823883a 	mov	r17,r3
    4fcc:	000f2140 	call	f214 <__floatsidf>
    4fd0:	019427f4 	movhi	r6,20639
    4fd4:	01cff4f4 	movhi	r7,16339
    4fd8:	319e7ec4 	addi	r6,r6,31227
    4fdc:	39d104c4 	addi	r7,r7,17427
    4fe0:	1009883a 	mov	r4,r2
    4fe4:	180b883a 	mov	r5,r3
    4fe8:	000e02c0 	call	e02c <__muldf3>
    4fec:	100d883a 	mov	r6,r2
    4ff0:	180f883a 	mov	r7,r3
    4ff4:	a009883a 	mov	r4,r20
    4ff8:	880b883a 	mov	r5,r17
    4ffc:	000cb580 	call	cb58 <__adddf3>
    5000:	1009883a 	mov	r4,r2
    5004:	180b883a 	mov	r5,r3
    5008:	1029883a 	mov	r20,r2
    500c:	1823883a 	mov	r17,r3
    5010:	000f1940 	call	f194 <__fixdfsi>
    5014:	000d883a 	mov	r6,zero
    5018:	000f883a 	mov	r7,zero
    501c:	a009883a 	mov	r4,r20
    5020:	880b883a 	mov	r5,r17
    5024:	d8800515 	stw	r2,20(sp)
    5028:	000df380 	call	df38 <__ledf2>
    502c:	10028716 	blt	r2,zero,5a4c <_dtoa_r+0xc88>
    5030:	d8c00517 	ldw	r3,20(sp)
    5034:	00800584 	movi	r2,22
    5038:	10c27536 	bltu	r2,r3,5a10 <_dtoa_r+0xc4c>
    503c:	180490fa 	slli	r2,r3,3
    5040:	00c00074 	movhi	r3,1
    5044:	18c92504 	addi	r3,r3,9364
    5048:	1885883a 	add	r2,r3,r2
    504c:	11000017 	ldw	r4,0(r2)
    5050:	11400117 	ldw	r5,4(r2)
    5054:	900d883a 	mov	r6,r18
    5058:	980f883a 	mov	r7,r19
    505c:	000de5c0 	call	de5c <__gedf2>
    5060:	00828d0e 	bge	zero,r2,5a98 <_dtoa_r+0xcd4>
    5064:	d9000517 	ldw	r4,20(sp)
    5068:	d8000e15 	stw	zero,56(sp)
    506c:	213fffc4 	addi	r4,r4,-1
    5070:	d9000515 	stw	r4,20(sp)
    5074:	b42dc83a 	sub	r22,r22,r16
    5078:	b5bfffc4 	addi	r22,r22,-1
    507c:	b0026f16 	blt	r22,zero,5a3c <_dtoa_r+0xc78>
    5080:	d8000815 	stw	zero,32(sp)
    5084:	d9c00517 	ldw	r7,20(sp)
    5088:	38026416 	blt	r7,zero,5a1c <_dtoa_r+0xc58>
    508c:	b1ed883a 	add	r22,r22,r7
    5090:	d9c00d15 	stw	r7,52(sp)
    5094:	d8000a15 	stw	zero,40(sp)
    5098:	d9800317 	ldw	r6,12(sp)
    509c:	00800244 	movi	r2,9
    50a0:	11811436 	bltu	r2,r6,54f4 <_dtoa_r+0x730>
    50a4:	00800144 	movi	r2,5
    50a8:	1184e10e 	bge	r2,r6,6430 <_dtoa_r+0x166c>
    50ac:	31bfff04 	addi	r6,r6,-4
    50b0:	d9800315 	stw	r6,12(sp)
    50b4:	0023883a 	mov	r17,zero
    50b8:	d9800317 	ldw	r6,12(sp)
    50bc:	008000c4 	movi	r2,3
    50c0:	30836726 	beq	r6,r2,5e60 <_dtoa_r+0x109c>
    50c4:	1183410e 	bge	r2,r6,5dcc <_dtoa_r+0x1008>
    50c8:	d9c00317 	ldw	r7,12(sp)
    50cc:	00800104 	movi	r2,4
    50d0:	38827c26 	beq	r7,r2,5ac4 <_dtoa_r+0xd00>
    50d4:	00800144 	movi	r2,5
    50d8:	3884c41e 	bne	r7,r2,63ec <_dtoa_r+0x1628>
    50dc:	00800044 	movi	r2,1
    50e0:	d8800b15 	stw	r2,44(sp)
    50e4:	d8c00517 	ldw	r3,20(sp)
    50e8:	d9002217 	ldw	r4,136(sp)
    50ec:	1907883a 	add	r3,r3,r4
    50f0:	19800044 	addi	r6,r3,1
    50f4:	d8c00c15 	stw	r3,48(sp)
    50f8:	d9800615 	stw	r6,24(sp)
    50fc:	0183a40e 	bge	zero,r6,5f90 <_dtoa_r+0x11cc>
    5100:	d9800617 	ldw	r6,24(sp)
    5104:	3021883a 	mov	r16,r6
    5108:	e0001115 	stw	zero,68(fp)
    510c:	008005c4 	movi	r2,23
    5110:	1184c92e 	bgeu	r2,r6,6438 <_dtoa_r+0x1674>
    5114:	00c00044 	movi	r3,1
    5118:	00800104 	movi	r2,4
    511c:	1085883a 	add	r2,r2,r2
    5120:	11000504 	addi	r4,r2,20
    5124:	180b883a 	mov	r5,r3
    5128:	18c00044 	addi	r3,r3,1
    512c:	313ffb2e 	bgeu	r6,r4,511c <_gp+0xfffe8fc0>
    5130:	e1401115 	stw	r5,68(fp)
    5134:	e009883a 	mov	r4,fp
    5138:	000847c0 	call	847c <_Balloc>
    513c:	d8800715 	stw	r2,28(sp)
    5140:	e0801015 	stw	r2,64(fp)
    5144:	00800384 	movi	r2,14
    5148:	1400f736 	bltu	r2,r16,5528 <_dtoa_r+0x764>
    514c:	8800f626 	beq	r17,zero,5528 <_dtoa_r+0x764>
    5150:	d9c00517 	ldw	r7,20(sp)
    5154:	01c39a0e 	bge	zero,r7,5fc0 <_dtoa_r+0x11fc>
    5158:	388003cc 	andi	r2,r7,15
    515c:	100490fa 	slli	r2,r2,3
    5160:	382bd13a 	srai	r21,r7,4
    5164:	00c00074 	movhi	r3,1
    5168:	18c92504 	addi	r3,r3,9364
    516c:	1885883a 	add	r2,r3,r2
    5170:	a8c0040c 	andi	r3,r21,16
    5174:	12400017 	ldw	r9,0(r2)
    5178:	12000117 	ldw	r8,4(r2)
    517c:	18037926 	beq	r3,zero,5f64 <_dtoa_r+0x11a0>
    5180:	00800074 	movhi	r2,1
    5184:	10891b04 	addi	r2,r2,9324
    5188:	11800817 	ldw	r6,32(r2)
    518c:	11c00917 	ldw	r7,36(r2)
    5190:	9009883a 	mov	r4,r18
    5194:	980b883a 	mov	r5,r19
    5198:	da001715 	stw	r8,92(sp)
    519c:	da401615 	stw	r9,88(sp)
    51a0:	000d4040 	call	d404 <__divdf3>
    51a4:	da001717 	ldw	r8,92(sp)
    51a8:	da401617 	ldw	r9,88(sp)
    51ac:	ad4003cc 	andi	r21,r21,15
    51b0:	040000c4 	movi	r16,3
    51b4:	1023883a 	mov	r17,r2
    51b8:	1829883a 	mov	r20,r3
    51bc:	a8001126 	beq	r21,zero,5204 <_dtoa_r+0x440>
    51c0:	05c00074 	movhi	r23,1
    51c4:	bdc91b04 	addi	r23,r23,9324
    51c8:	4805883a 	mov	r2,r9
    51cc:	4007883a 	mov	r3,r8
    51d0:	a980004c 	andi	r6,r21,1
    51d4:	1009883a 	mov	r4,r2
    51d8:	a82bd07a 	srai	r21,r21,1
    51dc:	180b883a 	mov	r5,r3
    51e0:	30000426 	beq	r6,zero,51f4 <_dtoa_r+0x430>
    51e4:	b9800017 	ldw	r6,0(r23)
    51e8:	b9c00117 	ldw	r7,4(r23)
    51ec:	84000044 	addi	r16,r16,1
    51f0:	000e02c0 	call	e02c <__muldf3>
    51f4:	bdc00204 	addi	r23,r23,8
    51f8:	a83ff51e 	bne	r21,zero,51d0 <_gp+0xfffe9074>
    51fc:	1013883a 	mov	r9,r2
    5200:	1811883a 	mov	r8,r3
    5204:	480d883a 	mov	r6,r9
    5208:	400f883a 	mov	r7,r8
    520c:	8809883a 	mov	r4,r17
    5210:	a00b883a 	mov	r5,r20
    5214:	000d4040 	call	d404 <__divdf3>
    5218:	d8800f15 	stw	r2,60(sp)
    521c:	d8c01015 	stw	r3,64(sp)
    5220:	d8c00e17 	ldw	r3,56(sp)
    5224:	18000626 	beq	r3,zero,5240 <_dtoa_r+0x47c>
    5228:	d9000f17 	ldw	r4,60(sp)
    522c:	d9401017 	ldw	r5,64(sp)
    5230:	000d883a 	mov	r6,zero
    5234:	01cffc34 	movhi	r7,16368
    5238:	000df380 	call	df38 <__ledf2>
    523c:	10040b16 	blt	r2,zero,626c <_dtoa_r+0x14a8>
    5240:	8009883a 	mov	r4,r16
    5244:	000f2140 	call	f214 <__floatsidf>
    5248:	d9800f17 	ldw	r6,60(sp)
    524c:	d9c01017 	ldw	r7,64(sp)
    5250:	1009883a 	mov	r4,r2
    5254:	180b883a 	mov	r5,r3
    5258:	000e02c0 	call	e02c <__muldf3>
    525c:	000d883a 	mov	r6,zero
    5260:	01d00734 	movhi	r7,16412
    5264:	1009883a 	mov	r4,r2
    5268:	180b883a 	mov	r5,r3
    526c:	000cb580 	call	cb58 <__adddf3>
    5270:	1021883a 	mov	r16,r2
    5274:	d8800617 	ldw	r2,24(sp)
    5278:	047f3034 	movhi	r17,64704
    527c:	1c63883a 	add	r17,r3,r17
    5280:	10031826 	beq	r2,zero,5ee4 <_dtoa_r+0x1120>
    5284:	d8c00517 	ldw	r3,20(sp)
    5288:	db000617 	ldw	r12,24(sp)
    528c:	d8c01315 	stw	r3,76(sp)
    5290:	d9000b17 	ldw	r4,44(sp)
    5294:	20038f26 	beq	r4,zero,60d4 <_dtoa_r+0x1310>
    5298:	60bfffc4 	addi	r2,r12,-1
    529c:	100490fa 	slli	r2,r2,3
    52a0:	00c00074 	movhi	r3,1
    52a4:	18c92504 	addi	r3,r3,9364
    52a8:	1885883a 	add	r2,r3,r2
    52ac:	11800017 	ldw	r6,0(r2)
    52b0:	11c00117 	ldw	r7,4(r2)
    52b4:	d8800717 	ldw	r2,28(sp)
    52b8:	0009883a 	mov	r4,zero
    52bc:	014ff834 	movhi	r5,16352
    52c0:	db001615 	stw	r12,88(sp)
    52c4:	15c00044 	addi	r23,r2,1
    52c8:	000d4040 	call	d404 <__divdf3>
    52cc:	800d883a 	mov	r6,r16
    52d0:	880f883a 	mov	r7,r17
    52d4:	1009883a 	mov	r4,r2
    52d8:	180b883a 	mov	r5,r3
    52dc:	000e8980 	call	e898 <__subdf3>
    52e0:	d9401017 	ldw	r5,64(sp)
    52e4:	d9000f17 	ldw	r4,60(sp)
    52e8:	102b883a 	mov	r21,r2
    52ec:	d8c01215 	stw	r3,72(sp)
    52f0:	000f1940 	call	f194 <__fixdfsi>
    52f4:	1009883a 	mov	r4,r2
    52f8:	1029883a 	mov	r20,r2
    52fc:	000f2140 	call	f214 <__floatsidf>
    5300:	d9000f17 	ldw	r4,60(sp)
    5304:	d9401017 	ldw	r5,64(sp)
    5308:	100d883a 	mov	r6,r2
    530c:	180f883a 	mov	r7,r3
    5310:	000e8980 	call	e898 <__subdf3>
    5314:	1823883a 	mov	r17,r3
    5318:	d8c00717 	ldw	r3,28(sp)
    531c:	d9401217 	ldw	r5,72(sp)
    5320:	a2000c04 	addi	r8,r20,48
    5324:	1021883a 	mov	r16,r2
    5328:	1a000005 	stb	r8,0(r3)
    532c:	800d883a 	mov	r6,r16
    5330:	880f883a 	mov	r7,r17
    5334:	a809883a 	mov	r4,r21
    5338:	4029883a 	mov	r20,r8
    533c:	000de5c0 	call	de5c <__gedf2>
    5340:	00841d16 	blt	zero,r2,63b8 <_dtoa_r+0x15f4>
    5344:	800d883a 	mov	r6,r16
    5348:	880f883a 	mov	r7,r17
    534c:	0009883a 	mov	r4,zero
    5350:	014ffc34 	movhi	r5,16368
    5354:	000e8980 	call	e898 <__subdf3>
    5358:	d9401217 	ldw	r5,72(sp)
    535c:	100d883a 	mov	r6,r2
    5360:	180f883a 	mov	r7,r3
    5364:	a809883a 	mov	r4,r21
    5368:	000de5c0 	call	de5c <__gedf2>
    536c:	db001617 	ldw	r12,88(sp)
    5370:	00840e16 	blt	zero,r2,63ac <_dtoa_r+0x15e8>
    5374:	00800044 	movi	r2,1
    5378:	13006b0e 	bge	r2,r12,5528 <_dtoa_r+0x764>
    537c:	d9000717 	ldw	r4,28(sp)
    5380:	dd800f15 	stw	r22,60(sp)
    5384:	dcc01015 	stw	r19,64(sp)
    5388:	2319883a 	add	r12,r4,r12
    538c:	dcc01217 	ldw	r19,72(sp)
    5390:	602d883a 	mov	r22,r12
    5394:	dc801215 	stw	r18,72(sp)
    5398:	b825883a 	mov	r18,r23
    539c:	00000906 	br	53c4 <_dtoa_r+0x600>
    53a0:	000e8980 	call	e898 <__subdf3>
    53a4:	a80d883a 	mov	r6,r21
    53a8:	980f883a 	mov	r7,r19
    53ac:	1009883a 	mov	r4,r2
    53b0:	180b883a 	mov	r5,r3
    53b4:	000df380 	call	df38 <__ledf2>
    53b8:	1003e816 	blt	r2,zero,635c <_dtoa_r+0x1598>
    53bc:	b825883a 	mov	r18,r23
    53c0:	bd83e926 	beq	r23,r22,6368 <_dtoa_r+0x15a4>
    53c4:	a809883a 	mov	r4,r21
    53c8:	980b883a 	mov	r5,r19
    53cc:	000d883a 	mov	r6,zero
    53d0:	01d00934 	movhi	r7,16420
    53d4:	000e02c0 	call	e02c <__muldf3>
    53d8:	000d883a 	mov	r6,zero
    53dc:	01d00934 	movhi	r7,16420
    53e0:	8009883a 	mov	r4,r16
    53e4:	880b883a 	mov	r5,r17
    53e8:	102b883a 	mov	r21,r2
    53ec:	1827883a 	mov	r19,r3
    53f0:	000e02c0 	call	e02c <__muldf3>
    53f4:	180b883a 	mov	r5,r3
    53f8:	1009883a 	mov	r4,r2
    53fc:	1821883a 	mov	r16,r3
    5400:	1023883a 	mov	r17,r2
    5404:	000f1940 	call	f194 <__fixdfsi>
    5408:	1009883a 	mov	r4,r2
    540c:	1029883a 	mov	r20,r2
    5410:	000f2140 	call	f214 <__floatsidf>
    5414:	8809883a 	mov	r4,r17
    5418:	800b883a 	mov	r5,r16
    541c:	100d883a 	mov	r6,r2
    5420:	180f883a 	mov	r7,r3
    5424:	000e8980 	call	e898 <__subdf3>
    5428:	a5000c04 	addi	r20,r20,48
    542c:	a80d883a 	mov	r6,r21
    5430:	980f883a 	mov	r7,r19
    5434:	1009883a 	mov	r4,r2
    5438:	180b883a 	mov	r5,r3
    543c:	95000005 	stb	r20,0(r18)
    5440:	1021883a 	mov	r16,r2
    5444:	1823883a 	mov	r17,r3
    5448:	000df380 	call	df38 <__ledf2>
    544c:	bdc00044 	addi	r23,r23,1
    5450:	800d883a 	mov	r6,r16
    5454:	880f883a 	mov	r7,r17
    5458:	0009883a 	mov	r4,zero
    545c:	014ffc34 	movhi	r5,16368
    5460:	103fcf0e 	bge	r2,zero,53a0 <_gp+0xfffe9244>
    5464:	d8c01317 	ldw	r3,76(sp)
    5468:	d8c00515 	stw	r3,20(sp)
    546c:	d9400917 	ldw	r5,36(sp)
    5470:	e009883a 	mov	r4,fp
    5474:	00085240 	call	8524 <_Bfree>
    5478:	d9000517 	ldw	r4,20(sp)
    547c:	d9802317 	ldw	r6,140(sp)
    5480:	d9c02517 	ldw	r7,148(sp)
    5484:	b8000005 	stb	zero,0(r23)
    5488:	20800044 	addi	r2,r4,1
    548c:	30800015 	stw	r2,0(r6)
    5490:	3802aa26 	beq	r7,zero,5f3c <_dtoa_r+0x1178>
    5494:	3dc00015 	stw	r23,0(r7)
    5498:	d8800717 	ldw	r2,28(sp)
    549c:	003e7906 	br	4e84 <_gp+0xfffe8d28>
    54a0:	00800434 	movhi	r2,16
    54a4:	10bfffc4 	addi	r2,r2,-1
    54a8:	88a2703a 	and	r17,r17,r2
    54ac:	883e851e 	bne	r17,zero,4ec4 <_gp+0xfffe8d68>
    54b0:	00800074 	movhi	r2,1
    54b4:	10890604 	addi	r2,r2,9240
    54b8:	003e8406 	br	4ecc <_gp+0xfffe8d70>
    54bc:	10c00204 	addi	r3,r2,8
    54c0:	003e8706 	br	4ee0 <_gp+0xfffe8d84>
    54c4:	01400434 	movhi	r5,16
    54c8:	297fffc4 	addi	r5,r5,-1
    54cc:	994a703a 	and	r5,r19,r5
    54d0:	9009883a 	mov	r4,r18
    54d4:	843f0044 	addi	r16,r16,-1023
    54d8:	294ffc34 	orhi	r5,r5,16368
    54dc:	dd800217 	ldw	r22,8(sp)
    54e0:	d8001115 	stw	zero,68(sp)
    54e4:	003ea506 	br	4f7c <_gp+0xfffe8e20>
    54e8:	00800074 	movhi	r2,1
    54ec:	1088fd04 	addi	r2,r2,9204
    54f0:	003e6406 	br	4e84 <_gp+0xfffe8d28>
    54f4:	e0001115 	stw	zero,68(fp)
    54f8:	000b883a 	mov	r5,zero
    54fc:	e009883a 	mov	r4,fp
    5500:	000847c0 	call	847c <_Balloc>
    5504:	01bfffc4 	movi	r6,-1
    5508:	01c00044 	movi	r7,1
    550c:	d8800715 	stw	r2,28(sp)
    5510:	d9800c15 	stw	r6,48(sp)
    5514:	e0801015 	stw	r2,64(fp)
    5518:	d8000315 	stw	zero,12(sp)
    551c:	d9c00b15 	stw	r7,44(sp)
    5520:	d9800615 	stw	r6,24(sp)
    5524:	d8002215 	stw	zero,136(sp)
    5528:	d8800117 	ldw	r2,4(sp)
    552c:	10008916 	blt	r2,zero,5754 <_dtoa_r+0x990>
    5530:	d9000517 	ldw	r4,20(sp)
    5534:	00c00384 	movi	r3,14
    5538:	19008616 	blt	r3,r4,5754 <_dtoa_r+0x990>
    553c:	200490fa 	slli	r2,r4,3
    5540:	00c00074 	movhi	r3,1
    5544:	d9802217 	ldw	r6,136(sp)
    5548:	18c92504 	addi	r3,r3,9364
    554c:	1885883a 	add	r2,r3,r2
    5550:	14000017 	ldw	r16,0(r2)
    5554:	14400117 	ldw	r17,4(r2)
    5558:	30016316 	blt	r6,zero,5ae8 <_dtoa_r+0xd24>
    555c:	800d883a 	mov	r6,r16
    5560:	880f883a 	mov	r7,r17
    5564:	9009883a 	mov	r4,r18
    5568:	980b883a 	mov	r5,r19
    556c:	000d4040 	call	d404 <__divdf3>
    5570:	180b883a 	mov	r5,r3
    5574:	1009883a 	mov	r4,r2
    5578:	000f1940 	call	f194 <__fixdfsi>
    557c:	1009883a 	mov	r4,r2
    5580:	102b883a 	mov	r21,r2
    5584:	000f2140 	call	f214 <__floatsidf>
    5588:	800d883a 	mov	r6,r16
    558c:	880f883a 	mov	r7,r17
    5590:	1009883a 	mov	r4,r2
    5594:	180b883a 	mov	r5,r3
    5598:	000e02c0 	call	e02c <__muldf3>
    559c:	100d883a 	mov	r6,r2
    55a0:	180f883a 	mov	r7,r3
    55a4:	9009883a 	mov	r4,r18
    55a8:	980b883a 	mov	r5,r19
    55ac:	000e8980 	call	e898 <__subdf3>
    55b0:	d9c00717 	ldw	r7,28(sp)
    55b4:	1009883a 	mov	r4,r2
    55b8:	a8800c04 	addi	r2,r21,48
    55bc:	38800005 	stb	r2,0(r7)
    55c0:	3dc00044 	addi	r23,r7,1
    55c4:	d9c00617 	ldw	r7,24(sp)
    55c8:	01800044 	movi	r6,1
    55cc:	180b883a 	mov	r5,r3
    55d0:	2005883a 	mov	r2,r4
    55d4:	39803826 	beq	r7,r6,56b8 <_dtoa_r+0x8f4>
    55d8:	000d883a 	mov	r6,zero
    55dc:	01d00934 	movhi	r7,16420
    55e0:	000e02c0 	call	e02c <__muldf3>
    55e4:	000d883a 	mov	r6,zero
    55e8:	000f883a 	mov	r7,zero
    55ec:	1009883a 	mov	r4,r2
    55f0:	180b883a 	mov	r5,r3
    55f4:	1025883a 	mov	r18,r2
    55f8:	1827883a 	mov	r19,r3
    55fc:	000ddd40 	call	ddd4 <__eqdf2>
    5600:	103f9a26 	beq	r2,zero,546c <_gp+0xfffe9310>
    5604:	d9c00617 	ldw	r7,24(sp)
    5608:	d8c00717 	ldw	r3,28(sp)
    560c:	b829883a 	mov	r20,r23
    5610:	38bfffc4 	addi	r2,r7,-1
    5614:	18ad883a 	add	r22,r3,r2
    5618:	00000a06 	br	5644 <_dtoa_r+0x880>
    561c:	000e02c0 	call	e02c <__muldf3>
    5620:	000d883a 	mov	r6,zero
    5624:	000f883a 	mov	r7,zero
    5628:	1009883a 	mov	r4,r2
    562c:	180b883a 	mov	r5,r3
    5630:	1025883a 	mov	r18,r2
    5634:	1827883a 	mov	r19,r3
    5638:	b829883a 	mov	r20,r23
    563c:	000ddd40 	call	ddd4 <__eqdf2>
    5640:	103f8a26 	beq	r2,zero,546c <_gp+0xfffe9310>
    5644:	800d883a 	mov	r6,r16
    5648:	880f883a 	mov	r7,r17
    564c:	9009883a 	mov	r4,r18
    5650:	980b883a 	mov	r5,r19
    5654:	000d4040 	call	d404 <__divdf3>
    5658:	180b883a 	mov	r5,r3
    565c:	1009883a 	mov	r4,r2
    5660:	000f1940 	call	f194 <__fixdfsi>
    5664:	1009883a 	mov	r4,r2
    5668:	102b883a 	mov	r21,r2
    566c:	000f2140 	call	f214 <__floatsidf>
    5670:	800d883a 	mov	r6,r16
    5674:	880f883a 	mov	r7,r17
    5678:	1009883a 	mov	r4,r2
    567c:	180b883a 	mov	r5,r3
    5680:	000e02c0 	call	e02c <__muldf3>
    5684:	100d883a 	mov	r6,r2
    5688:	180f883a 	mov	r7,r3
    568c:	9009883a 	mov	r4,r18
    5690:	980b883a 	mov	r5,r19
    5694:	000e8980 	call	e898 <__subdf3>
    5698:	aa000c04 	addi	r8,r21,48
    569c:	a2000005 	stb	r8,0(r20)
    56a0:	000d883a 	mov	r6,zero
    56a4:	01d00934 	movhi	r7,16420
    56a8:	1009883a 	mov	r4,r2
    56ac:	180b883a 	mov	r5,r3
    56b0:	a5c00044 	addi	r23,r20,1
    56b4:	b53fd91e 	bne	r22,r20,561c <_gp+0xfffe94c0>
    56b8:	100d883a 	mov	r6,r2
    56bc:	180f883a 	mov	r7,r3
    56c0:	1009883a 	mov	r4,r2
    56c4:	180b883a 	mov	r5,r3
    56c8:	000cb580 	call	cb58 <__adddf3>
    56cc:	100d883a 	mov	r6,r2
    56d0:	180f883a 	mov	r7,r3
    56d4:	8009883a 	mov	r4,r16
    56d8:	880b883a 	mov	r5,r17
    56dc:	1027883a 	mov	r19,r2
    56e0:	1825883a 	mov	r18,r3
    56e4:	000df380 	call	df38 <__ledf2>
    56e8:	10000816 	blt	r2,zero,570c <_dtoa_r+0x948>
    56ec:	980d883a 	mov	r6,r19
    56f0:	900f883a 	mov	r7,r18
    56f4:	8009883a 	mov	r4,r16
    56f8:	880b883a 	mov	r5,r17
    56fc:	000ddd40 	call	ddd4 <__eqdf2>
    5700:	103f5a1e 	bne	r2,zero,546c <_gp+0xfffe9310>
    5704:	ad40004c 	andi	r21,r21,1
    5708:	a83f5826 	beq	r21,zero,546c <_gp+0xfffe9310>
    570c:	bd3fffc3 	ldbu	r20,-1(r23)
    5710:	b8bfffc4 	addi	r2,r23,-1
    5714:	1007883a 	mov	r3,r2
    5718:	01400e44 	movi	r5,57
    571c:	d9800717 	ldw	r6,28(sp)
    5720:	00000506 	br	5738 <_dtoa_r+0x974>
    5724:	18ffffc4 	addi	r3,r3,-1
    5728:	11824726 	beq	r2,r6,6048 <_dtoa_r+0x1284>
    572c:	1d000003 	ldbu	r20,0(r3)
    5730:	102f883a 	mov	r23,r2
    5734:	10bfffc4 	addi	r2,r2,-1
    5738:	a1003fcc 	andi	r4,r20,255
    573c:	2100201c 	xori	r4,r4,128
    5740:	213fe004 	addi	r4,r4,-128
    5744:	217ff726 	beq	r4,r5,5724 <_gp+0xfffe95c8>
    5748:	a2000044 	addi	r8,r20,1
    574c:	12000005 	stb	r8,0(r2)
    5750:	003f4606 	br	546c <_gp+0xfffe9310>
    5754:	d9000b17 	ldw	r4,44(sp)
    5758:	2000c826 	beq	r4,zero,5a7c <_dtoa_r+0xcb8>
    575c:	d9800317 	ldw	r6,12(sp)
    5760:	00c00044 	movi	r3,1
    5764:	1980f90e 	bge	r3,r6,5b4c <_dtoa_r+0xd88>
    5768:	d8800617 	ldw	r2,24(sp)
    576c:	d8c00a17 	ldw	r3,40(sp)
    5770:	157fffc4 	addi	r21,r2,-1
    5774:	1d41f316 	blt	r3,r21,5f44 <_dtoa_r+0x1180>
    5778:	1d6bc83a 	sub	r21,r3,r21
    577c:	d9c00617 	ldw	r7,24(sp)
    5780:	3802aa16 	blt	r7,zero,622c <_dtoa_r+0x1468>
    5784:	dd000817 	ldw	r20,32(sp)
    5788:	d8800617 	ldw	r2,24(sp)
    578c:	d8c00817 	ldw	r3,32(sp)
    5790:	01400044 	movi	r5,1
    5794:	e009883a 	mov	r4,fp
    5798:	1887883a 	add	r3,r3,r2
    579c:	d8c00815 	stw	r3,32(sp)
    57a0:	b0ad883a 	add	r22,r22,r2
    57a4:	00088b00 	call	88b0 <__i2b>
    57a8:	1023883a 	mov	r17,r2
    57ac:	a0000826 	beq	r20,zero,57d0 <_dtoa_r+0xa0c>
    57b0:	0580070e 	bge	zero,r22,57d0 <_dtoa_r+0xa0c>
    57b4:	a005883a 	mov	r2,r20
    57b8:	b500b916 	blt	r22,r20,5aa0 <_dtoa_r+0xcdc>
    57bc:	d9000817 	ldw	r4,32(sp)
    57c0:	a0a9c83a 	sub	r20,r20,r2
    57c4:	b0adc83a 	sub	r22,r22,r2
    57c8:	2089c83a 	sub	r4,r4,r2
    57cc:	d9000815 	stw	r4,32(sp)
    57d0:	d9800a17 	ldw	r6,40(sp)
    57d4:	0181810e 	bge	zero,r6,5ddc <_dtoa_r+0x1018>
    57d8:	d9c00b17 	ldw	r7,44(sp)
    57dc:	3800b326 	beq	r7,zero,5aac <_dtoa_r+0xce8>
    57e0:	a800b226 	beq	r21,zero,5aac <_dtoa_r+0xce8>
    57e4:	880b883a 	mov	r5,r17
    57e8:	a80d883a 	mov	r6,r21
    57ec:	e009883a 	mov	r4,fp
    57f0:	0008b780 	call	8b78 <__pow5mult>
    57f4:	d9800917 	ldw	r6,36(sp)
    57f8:	100b883a 	mov	r5,r2
    57fc:	e009883a 	mov	r4,fp
    5800:	1023883a 	mov	r17,r2
    5804:	00088ec0 	call	88ec <__multiply>
    5808:	1021883a 	mov	r16,r2
    580c:	d8800a17 	ldw	r2,40(sp)
    5810:	d9400917 	ldw	r5,36(sp)
    5814:	e009883a 	mov	r4,fp
    5818:	1545c83a 	sub	r2,r2,r21
    581c:	d8800a15 	stw	r2,40(sp)
    5820:	00085240 	call	8524 <_Bfree>
    5824:	d8c00a17 	ldw	r3,40(sp)
    5828:	18009f1e 	bne	r3,zero,5aa8 <_dtoa_r+0xce4>
    582c:	05c00044 	movi	r23,1
    5830:	e009883a 	mov	r4,fp
    5834:	b80b883a 	mov	r5,r23
    5838:	00088b00 	call	88b0 <__i2b>
    583c:	d9000d17 	ldw	r4,52(sp)
    5840:	102b883a 	mov	r21,r2
    5844:	2000ce26 	beq	r4,zero,5b80 <_dtoa_r+0xdbc>
    5848:	200d883a 	mov	r6,r4
    584c:	100b883a 	mov	r5,r2
    5850:	e009883a 	mov	r4,fp
    5854:	0008b780 	call	8b78 <__pow5mult>
    5858:	d9800317 	ldw	r6,12(sp)
    585c:	102b883a 	mov	r21,r2
    5860:	b981810e 	bge	r23,r6,5e68 <_dtoa_r+0x10a4>
    5864:	0027883a 	mov	r19,zero
    5868:	a8800417 	ldw	r2,16(r21)
    586c:	05c00804 	movi	r23,32
    5870:	10800104 	addi	r2,r2,4
    5874:	1085883a 	add	r2,r2,r2
    5878:	1085883a 	add	r2,r2,r2
    587c:	a885883a 	add	r2,r21,r2
    5880:	11000017 	ldw	r4,0(r2)
    5884:	00087980 	call	8798 <__hi0bits>
    5888:	b885c83a 	sub	r2,r23,r2
    588c:	1585883a 	add	r2,r2,r22
    5890:	108007cc 	andi	r2,r2,31
    5894:	1000b326 	beq	r2,zero,5b64 <_dtoa_r+0xda0>
    5898:	00c00804 	movi	r3,32
    589c:	1887c83a 	sub	r3,r3,r2
    58a0:	01000104 	movi	r4,4
    58a4:	20c2cd0e 	bge	r4,r3,63dc <_dtoa_r+0x1618>
    58a8:	00c00704 	movi	r3,28
    58ac:	1885c83a 	sub	r2,r3,r2
    58b0:	d8c00817 	ldw	r3,32(sp)
    58b4:	a0a9883a 	add	r20,r20,r2
    58b8:	b0ad883a 	add	r22,r22,r2
    58bc:	1887883a 	add	r3,r3,r2
    58c0:	d8c00815 	stw	r3,32(sp)
    58c4:	d9800817 	ldw	r6,32(sp)
    58c8:	0180040e 	bge	zero,r6,58dc <_dtoa_r+0xb18>
    58cc:	800b883a 	mov	r5,r16
    58d0:	e009883a 	mov	r4,fp
    58d4:	0008cb80 	call	8cb8 <__lshift>
    58d8:	1021883a 	mov	r16,r2
    58dc:	0580050e 	bge	zero,r22,58f4 <_dtoa_r+0xb30>
    58e0:	a80b883a 	mov	r5,r21
    58e4:	b00d883a 	mov	r6,r22
    58e8:	e009883a 	mov	r4,fp
    58ec:	0008cb80 	call	8cb8 <__lshift>
    58f0:	102b883a 	mov	r21,r2
    58f4:	d9c00e17 	ldw	r7,56(sp)
    58f8:	3801211e 	bne	r7,zero,5d80 <_dtoa_r+0xfbc>
    58fc:	d9800617 	ldw	r6,24(sp)
    5900:	0181380e 	bge	zero,r6,5de4 <_dtoa_r+0x1020>
    5904:	d8c00b17 	ldw	r3,44(sp)
    5908:	1800ab1e 	bne	r3,zero,5bb8 <_dtoa_r+0xdf4>
    590c:	dc800717 	ldw	r18,28(sp)
    5910:	dcc00617 	ldw	r19,24(sp)
    5914:	9029883a 	mov	r20,r18
    5918:	00000206 	br	5924 <_dtoa_r+0xb60>
    591c:	000854c0 	call	854c <__multadd>
    5920:	1021883a 	mov	r16,r2
    5924:	a80b883a 	mov	r5,r21
    5928:	8009883a 	mov	r4,r16
    592c:	0004b9c0 	call	4b9c <quorem>
    5930:	10800c04 	addi	r2,r2,48
    5934:	90800005 	stb	r2,0(r18)
    5938:	94800044 	addi	r18,r18,1
    593c:	9507c83a 	sub	r3,r18,r20
    5940:	000f883a 	mov	r7,zero
    5944:	01800284 	movi	r6,10
    5948:	800b883a 	mov	r5,r16
    594c:	e009883a 	mov	r4,fp
    5950:	1cfff216 	blt	r3,r19,591c <_gp+0xfffe97c0>
    5954:	1011883a 	mov	r8,r2
    5958:	d8800617 	ldw	r2,24(sp)
    595c:	0082370e 	bge	zero,r2,623c <_dtoa_r+0x1478>
    5960:	d9000717 	ldw	r4,28(sp)
    5964:	0025883a 	mov	r18,zero
    5968:	20af883a 	add	r23,r4,r2
    596c:	01800044 	movi	r6,1
    5970:	800b883a 	mov	r5,r16
    5974:	e009883a 	mov	r4,fp
    5978:	da001715 	stw	r8,92(sp)
    597c:	0008cb80 	call	8cb8 <__lshift>
    5980:	a80b883a 	mov	r5,r21
    5984:	1009883a 	mov	r4,r2
    5988:	d8800915 	stw	r2,36(sp)
    598c:	0008e000 	call	8e00 <__mcmp>
    5990:	da001717 	ldw	r8,92(sp)
    5994:	0081800e 	bge	zero,r2,5f98 <_dtoa_r+0x11d4>
    5998:	b93fffc3 	ldbu	r4,-1(r23)
    599c:	b8bfffc4 	addi	r2,r23,-1
    59a0:	1007883a 	mov	r3,r2
    59a4:	01800e44 	movi	r6,57
    59a8:	d9c00717 	ldw	r7,28(sp)
    59ac:	00000506 	br	59c4 <_dtoa_r+0xc00>
    59b0:	18ffffc4 	addi	r3,r3,-1
    59b4:	11c12326 	beq	r2,r7,5e44 <_dtoa_r+0x1080>
    59b8:	19000003 	ldbu	r4,0(r3)
    59bc:	102f883a 	mov	r23,r2
    59c0:	10bfffc4 	addi	r2,r2,-1
    59c4:	21403fcc 	andi	r5,r4,255
    59c8:	2940201c 	xori	r5,r5,128
    59cc:	297fe004 	addi	r5,r5,-128
    59d0:	29bff726 	beq	r5,r6,59b0 <_gp+0xfffe9854>
    59d4:	21000044 	addi	r4,r4,1
    59d8:	11000005 	stb	r4,0(r2)
    59dc:	a80b883a 	mov	r5,r21
    59e0:	e009883a 	mov	r4,fp
    59e4:	00085240 	call	8524 <_Bfree>
    59e8:	883ea026 	beq	r17,zero,546c <_gp+0xfffe9310>
    59ec:	90000426 	beq	r18,zero,5a00 <_dtoa_r+0xc3c>
    59f0:	94400326 	beq	r18,r17,5a00 <_dtoa_r+0xc3c>
    59f4:	900b883a 	mov	r5,r18
    59f8:	e009883a 	mov	r4,fp
    59fc:	00085240 	call	8524 <_Bfree>
    5a00:	880b883a 	mov	r5,r17
    5a04:	e009883a 	mov	r4,fp
    5a08:	00085240 	call	8524 <_Bfree>
    5a0c:	003e9706 	br	546c <_gp+0xfffe9310>
    5a10:	01800044 	movi	r6,1
    5a14:	d9800e15 	stw	r6,56(sp)
    5a18:	003d9606 	br	5074 <_gp+0xfffe8f18>
    5a1c:	d8800817 	ldw	r2,32(sp)
    5a20:	d8c00517 	ldw	r3,20(sp)
    5a24:	d8000d15 	stw	zero,52(sp)
    5a28:	10c5c83a 	sub	r2,r2,r3
    5a2c:	00c9c83a 	sub	r4,zero,r3
    5a30:	d8800815 	stw	r2,32(sp)
    5a34:	d9000a15 	stw	r4,40(sp)
    5a38:	003d9706 	br	5098 <_gp+0xfffe8f3c>
    5a3c:	05adc83a 	sub	r22,zero,r22
    5a40:	dd800815 	stw	r22,32(sp)
    5a44:	002d883a 	mov	r22,zero
    5a48:	003d8e06 	br	5084 <_gp+0xfffe8f28>
    5a4c:	d9000517 	ldw	r4,20(sp)
    5a50:	000f2140 	call	f214 <__floatsidf>
    5a54:	100d883a 	mov	r6,r2
    5a58:	180f883a 	mov	r7,r3
    5a5c:	a009883a 	mov	r4,r20
    5a60:	880b883a 	mov	r5,r17
    5a64:	000ddd40 	call	ddd4 <__eqdf2>
    5a68:	103d7126 	beq	r2,zero,5030 <_gp+0xfffe8ed4>
    5a6c:	d9c00517 	ldw	r7,20(sp)
    5a70:	39ffffc4 	addi	r7,r7,-1
    5a74:	d9c00515 	stw	r7,20(sp)
    5a78:	003d6d06 	br	5030 <_gp+0xfffe8ed4>
    5a7c:	dd400a17 	ldw	r21,40(sp)
    5a80:	dd000817 	ldw	r20,32(sp)
    5a84:	0023883a 	mov	r17,zero
    5a88:	003f4806 	br	57ac <_gp+0xfffe9650>
    5a8c:	10e3c83a 	sub	r17,r2,r3
    5a90:	9448983a 	sll	r4,r18,r17
    5a94:	003d3206 	br	4f60 <_gp+0xfffe8e04>
    5a98:	d8000e15 	stw	zero,56(sp)
    5a9c:	003d7506 	br	5074 <_gp+0xfffe8f18>
    5aa0:	b005883a 	mov	r2,r22
    5aa4:	003f4506 	br	57bc <_gp+0xfffe9660>
    5aa8:	dc000915 	stw	r16,36(sp)
    5aac:	d9800a17 	ldw	r6,40(sp)
    5ab0:	d9400917 	ldw	r5,36(sp)
    5ab4:	e009883a 	mov	r4,fp
    5ab8:	0008b780 	call	8b78 <__pow5mult>
    5abc:	1021883a 	mov	r16,r2
    5ac0:	003f5a06 	br	582c <_gp+0xfffe96d0>
    5ac4:	01c00044 	movi	r7,1
    5ac8:	d9c00b15 	stw	r7,44(sp)
    5acc:	d8802217 	ldw	r2,136(sp)
    5ad0:	0081280e 	bge	zero,r2,5f74 <_dtoa_r+0x11b0>
    5ad4:	100d883a 	mov	r6,r2
    5ad8:	1021883a 	mov	r16,r2
    5adc:	d8800c15 	stw	r2,48(sp)
    5ae0:	d8800615 	stw	r2,24(sp)
    5ae4:	003d8806 	br	5108 <_gp+0xfffe8fac>
    5ae8:	d8800617 	ldw	r2,24(sp)
    5aec:	00be9b16 	blt	zero,r2,555c <_gp+0xfffe9400>
    5af0:	10010f1e 	bne	r2,zero,5f30 <_dtoa_r+0x116c>
    5af4:	880b883a 	mov	r5,r17
    5af8:	000d883a 	mov	r6,zero
    5afc:	01d00534 	movhi	r7,16404
    5b00:	8009883a 	mov	r4,r16
    5b04:	000e02c0 	call	e02c <__muldf3>
    5b08:	900d883a 	mov	r6,r18
    5b0c:	980f883a 	mov	r7,r19
    5b10:	1009883a 	mov	r4,r2
    5b14:	180b883a 	mov	r5,r3
    5b18:	000de5c0 	call	de5c <__gedf2>
    5b1c:	002b883a 	mov	r21,zero
    5b20:	0023883a 	mov	r17,zero
    5b24:	1000bf16 	blt	r2,zero,5e24 <_dtoa_r+0x1060>
    5b28:	d9802217 	ldw	r6,136(sp)
    5b2c:	ddc00717 	ldw	r23,28(sp)
    5b30:	018c303a 	nor	r6,zero,r6
    5b34:	d9800515 	stw	r6,20(sp)
    5b38:	a80b883a 	mov	r5,r21
    5b3c:	e009883a 	mov	r4,fp
    5b40:	00085240 	call	8524 <_Bfree>
    5b44:	883e4926 	beq	r17,zero,546c <_gp+0xfffe9310>
    5b48:	003fad06 	br	5a00 <_gp+0xfffe98a4>
    5b4c:	d9c01117 	ldw	r7,68(sp)
    5b50:	3801bc26 	beq	r7,zero,6244 <_dtoa_r+0x1480>
    5b54:	10810cc4 	addi	r2,r2,1075
    5b58:	dd400a17 	ldw	r21,40(sp)
    5b5c:	dd000817 	ldw	r20,32(sp)
    5b60:	003f0a06 	br	578c <_gp+0xfffe9630>
    5b64:	00800704 	movi	r2,28
    5b68:	d9000817 	ldw	r4,32(sp)
    5b6c:	a0a9883a 	add	r20,r20,r2
    5b70:	b0ad883a 	add	r22,r22,r2
    5b74:	2089883a 	add	r4,r4,r2
    5b78:	d9000815 	stw	r4,32(sp)
    5b7c:	003f5106 	br	58c4 <_gp+0xfffe9768>
    5b80:	d8c00317 	ldw	r3,12(sp)
    5b84:	b8c1fc0e 	bge	r23,r3,6378 <_dtoa_r+0x15b4>
    5b88:	0027883a 	mov	r19,zero
    5b8c:	b805883a 	mov	r2,r23
    5b90:	003f3e06 	br	588c <_gp+0xfffe9730>
    5b94:	880b883a 	mov	r5,r17
    5b98:	e009883a 	mov	r4,fp
    5b9c:	000f883a 	mov	r7,zero
    5ba0:	01800284 	movi	r6,10
    5ba4:	000854c0 	call	854c <__multadd>
    5ba8:	d9000c17 	ldw	r4,48(sp)
    5bac:	1023883a 	mov	r17,r2
    5bb0:	0102040e 	bge	zero,r4,63c4 <_dtoa_r+0x1600>
    5bb4:	d9000615 	stw	r4,24(sp)
    5bb8:	0500050e 	bge	zero,r20,5bd0 <_dtoa_r+0xe0c>
    5bbc:	880b883a 	mov	r5,r17
    5bc0:	a00d883a 	mov	r6,r20
    5bc4:	e009883a 	mov	r4,fp
    5bc8:	0008cb80 	call	8cb8 <__lshift>
    5bcc:	1023883a 	mov	r17,r2
    5bd0:	9801241e 	bne	r19,zero,6064 <_dtoa_r+0x12a0>
    5bd4:	8829883a 	mov	r20,r17
    5bd8:	d9000617 	ldw	r4,24(sp)
    5bdc:	dcc00717 	ldw	r19,28(sp)
    5be0:	9480004c 	andi	r18,r18,1
    5be4:	20bfffc4 	addi	r2,r4,-1
    5be8:	9885883a 	add	r2,r19,r2
    5bec:	d8800415 	stw	r2,16(sp)
    5bf0:	dc800615 	stw	r18,24(sp)
    5bf4:	a80b883a 	mov	r5,r21
    5bf8:	8009883a 	mov	r4,r16
    5bfc:	0004b9c0 	call	4b9c <quorem>
    5c00:	880b883a 	mov	r5,r17
    5c04:	8009883a 	mov	r4,r16
    5c08:	102f883a 	mov	r23,r2
    5c0c:	0008e000 	call	8e00 <__mcmp>
    5c10:	a80b883a 	mov	r5,r21
    5c14:	a00d883a 	mov	r6,r20
    5c18:	e009883a 	mov	r4,fp
    5c1c:	102d883a 	mov	r22,r2
    5c20:	0008e600 	call	8e60 <__mdiff>
    5c24:	1007883a 	mov	r3,r2
    5c28:	10800317 	ldw	r2,12(r2)
    5c2c:	bc800c04 	addi	r18,r23,48
    5c30:	180b883a 	mov	r5,r3
    5c34:	10004e1e 	bne	r2,zero,5d70 <_dtoa_r+0xfac>
    5c38:	8009883a 	mov	r4,r16
    5c3c:	d8c01615 	stw	r3,88(sp)
    5c40:	0008e000 	call	8e00 <__mcmp>
    5c44:	d8c01617 	ldw	r3,88(sp)
    5c48:	e009883a 	mov	r4,fp
    5c4c:	d8801615 	stw	r2,88(sp)
    5c50:	180b883a 	mov	r5,r3
    5c54:	00085240 	call	8524 <_Bfree>
    5c58:	d8801617 	ldw	r2,88(sp)
    5c5c:	1000041e 	bne	r2,zero,5c70 <_dtoa_r+0xeac>
    5c60:	d9800317 	ldw	r6,12(sp)
    5c64:	3000021e 	bne	r6,zero,5c70 <_dtoa_r+0xeac>
    5c68:	d8c00617 	ldw	r3,24(sp)
    5c6c:	18003726 	beq	r3,zero,5d4c <_dtoa_r+0xf88>
    5c70:	b0002016 	blt	r22,zero,5cf4 <_dtoa_r+0xf30>
    5c74:	b000041e 	bne	r22,zero,5c88 <_dtoa_r+0xec4>
    5c78:	d9000317 	ldw	r4,12(sp)
    5c7c:	2000021e 	bne	r4,zero,5c88 <_dtoa_r+0xec4>
    5c80:	d8c00617 	ldw	r3,24(sp)
    5c84:	18001b26 	beq	r3,zero,5cf4 <_dtoa_r+0xf30>
    5c88:	00810716 	blt	zero,r2,60a8 <_dtoa_r+0x12e4>
    5c8c:	d8c00417 	ldw	r3,16(sp)
    5c90:	9d800044 	addi	r22,r19,1
    5c94:	9c800005 	stb	r18,0(r19)
    5c98:	b02f883a 	mov	r23,r22
    5c9c:	98c10626 	beq	r19,r3,60b8 <_dtoa_r+0x12f4>
    5ca0:	800b883a 	mov	r5,r16
    5ca4:	000f883a 	mov	r7,zero
    5ca8:	01800284 	movi	r6,10
    5cac:	e009883a 	mov	r4,fp
    5cb0:	000854c0 	call	854c <__multadd>
    5cb4:	1021883a 	mov	r16,r2
    5cb8:	000f883a 	mov	r7,zero
    5cbc:	01800284 	movi	r6,10
    5cc0:	880b883a 	mov	r5,r17
    5cc4:	e009883a 	mov	r4,fp
    5cc8:	8d002526 	beq	r17,r20,5d60 <_dtoa_r+0xf9c>
    5ccc:	000854c0 	call	854c <__multadd>
    5cd0:	a00b883a 	mov	r5,r20
    5cd4:	000f883a 	mov	r7,zero
    5cd8:	01800284 	movi	r6,10
    5cdc:	e009883a 	mov	r4,fp
    5ce0:	1023883a 	mov	r17,r2
    5ce4:	000854c0 	call	854c <__multadd>
    5ce8:	1029883a 	mov	r20,r2
    5cec:	b027883a 	mov	r19,r22
    5cf0:	003fc006 	br	5bf4 <_gp+0xfffe9a98>
    5cf4:	9011883a 	mov	r8,r18
    5cf8:	00800e0e 	bge	zero,r2,5d34 <_dtoa_r+0xf70>
    5cfc:	800b883a 	mov	r5,r16
    5d00:	01800044 	movi	r6,1
    5d04:	e009883a 	mov	r4,fp
    5d08:	da001715 	stw	r8,92(sp)
    5d0c:	0008cb80 	call	8cb8 <__lshift>
    5d10:	a80b883a 	mov	r5,r21
    5d14:	1009883a 	mov	r4,r2
    5d18:	1021883a 	mov	r16,r2
    5d1c:	0008e000 	call	8e00 <__mcmp>
    5d20:	da001717 	ldw	r8,92(sp)
    5d24:	0081960e 	bge	zero,r2,6380 <_dtoa_r+0x15bc>
    5d28:	00800e44 	movi	r2,57
    5d2c:	40817026 	beq	r8,r2,62f0 <_dtoa_r+0x152c>
    5d30:	ba000c44 	addi	r8,r23,49
    5d34:	8825883a 	mov	r18,r17
    5d38:	9dc00044 	addi	r23,r19,1
    5d3c:	9a000005 	stb	r8,0(r19)
    5d40:	a023883a 	mov	r17,r20
    5d44:	dc000915 	stw	r16,36(sp)
    5d48:	003f2406 	br	59dc <_gp+0xfffe9880>
    5d4c:	00800e44 	movi	r2,57
    5d50:	9011883a 	mov	r8,r18
    5d54:	90816626 	beq	r18,r2,62f0 <_dtoa_r+0x152c>
    5d58:	05bff516 	blt	zero,r22,5d30 <_gp+0xfffe9bd4>
    5d5c:	003ff506 	br	5d34 <_gp+0xfffe9bd8>
    5d60:	000854c0 	call	854c <__multadd>
    5d64:	1023883a 	mov	r17,r2
    5d68:	1029883a 	mov	r20,r2
    5d6c:	003fdf06 	br	5cec <_gp+0xfffe9b90>
    5d70:	e009883a 	mov	r4,fp
    5d74:	00085240 	call	8524 <_Bfree>
    5d78:	00800044 	movi	r2,1
    5d7c:	003fbc06 	br	5c70 <_gp+0xfffe9b14>
    5d80:	a80b883a 	mov	r5,r21
    5d84:	8009883a 	mov	r4,r16
    5d88:	0008e000 	call	8e00 <__mcmp>
    5d8c:	103edb0e 	bge	r2,zero,58fc <_gp+0xfffe97a0>
    5d90:	800b883a 	mov	r5,r16
    5d94:	000f883a 	mov	r7,zero
    5d98:	01800284 	movi	r6,10
    5d9c:	e009883a 	mov	r4,fp
    5da0:	000854c0 	call	854c <__multadd>
    5da4:	1021883a 	mov	r16,r2
    5da8:	d8800517 	ldw	r2,20(sp)
    5dac:	d8c00b17 	ldw	r3,44(sp)
    5db0:	10bfffc4 	addi	r2,r2,-1
    5db4:	d8800515 	stw	r2,20(sp)
    5db8:	183f761e 	bne	r3,zero,5b94 <_gp+0xfffe9a38>
    5dbc:	d9000c17 	ldw	r4,48(sp)
    5dc0:	0101730e 	bge	zero,r4,6390 <_dtoa_r+0x15cc>
    5dc4:	d9000615 	stw	r4,24(sp)
    5dc8:	003ed006 	br	590c <_gp+0xfffe97b0>
    5dcc:	00800084 	movi	r2,2
    5dd0:	3081861e 	bne	r6,r2,63ec <_dtoa_r+0x1628>
    5dd4:	d8000b15 	stw	zero,44(sp)
    5dd8:	003f3c06 	br	5acc <_gp+0xfffe9970>
    5ddc:	dc000917 	ldw	r16,36(sp)
    5de0:	003e9206 	br	582c <_gp+0xfffe96d0>
    5de4:	d9c00317 	ldw	r7,12(sp)
    5de8:	00800084 	movi	r2,2
    5dec:	11fec50e 	bge	r2,r7,5904 <_gp+0xfffe97a8>
    5df0:	d9000617 	ldw	r4,24(sp)
    5df4:	20013c1e 	bne	r4,zero,62e8 <_dtoa_r+0x1524>
    5df8:	a80b883a 	mov	r5,r21
    5dfc:	000f883a 	mov	r7,zero
    5e00:	01800144 	movi	r6,5
    5e04:	e009883a 	mov	r4,fp
    5e08:	000854c0 	call	854c <__multadd>
    5e0c:	100b883a 	mov	r5,r2
    5e10:	8009883a 	mov	r4,r16
    5e14:	102b883a 	mov	r21,r2
    5e18:	0008e000 	call	8e00 <__mcmp>
    5e1c:	dc000915 	stw	r16,36(sp)
    5e20:	00bf410e 	bge	zero,r2,5b28 <_gp+0xfffe99cc>
    5e24:	d9c00717 	ldw	r7,28(sp)
    5e28:	00800c44 	movi	r2,49
    5e2c:	38800005 	stb	r2,0(r7)
    5e30:	d8800517 	ldw	r2,20(sp)
    5e34:	3dc00044 	addi	r23,r7,1
    5e38:	10800044 	addi	r2,r2,1
    5e3c:	d8800515 	stw	r2,20(sp)
    5e40:	003f3d06 	br	5b38 <_gp+0xfffe99dc>
    5e44:	d9800517 	ldw	r6,20(sp)
    5e48:	d9c00717 	ldw	r7,28(sp)
    5e4c:	00800c44 	movi	r2,49
    5e50:	31800044 	addi	r6,r6,1
    5e54:	d9800515 	stw	r6,20(sp)
    5e58:	38800005 	stb	r2,0(r7)
    5e5c:	003edf06 	br	59dc <_gp+0xfffe9880>
    5e60:	d8000b15 	stw	zero,44(sp)
    5e64:	003c9f06 	br	50e4 <_gp+0xfffe8f88>
    5e68:	903e7e1e 	bne	r18,zero,5864 <_gp+0xfffe9708>
    5e6c:	00800434 	movhi	r2,16
    5e70:	10bfffc4 	addi	r2,r2,-1
    5e74:	9884703a 	and	r2,r19,r2
    5e78:	1000ea1e 	bne	r2,zero,6224 <_dtoa_r+0x1460>
    5e7c:	9cdffc2c 	andhi	r19,r19,32752
    5e80:	9800e826 	beq	r19,zero,6224 <_dtoa_r+0x1460>
    5e84:	d9c00817 	ldw	r7,32(sp)
    5e88:	b5800044 	addi	r22,r22,1
    5e8c:	04c00044 	movi	r19,1
    5e90:	39c00044 	addi	r7,r7,1
    5e94:	d9c00815 	stw	r7,32(sp)
    5e98:	d8800d17 	ldw	r2,52(sp)
    5e9c:	103e721e 	bne	r2,zero,5868 <_gp+0xfffe970c>
    5ea0:	00800044 	movi	r2,1
    5ea4:	003e7906 	br	588c <_gp+0xfffe9730>
    5ea8:	8009883a 	mov	r4,r16
    5eac:	000f2140 	call	f214 <__floatsidf>
    5eb0:	d9800f17 	ldw	r6,60(sp)
    5eb4:	d9c01017 	ldw	r7,64(sp)
    5eb8:	1009883a 	mov	r4,r2
    5ebc:	180b883a 	mov	r5,r3
    5ec0:	000e02c0 	call	e02c <__muldf3>
    5ec4:	000d883a 	mov	r6,zero
    5ec8:	01d00734 	movhi	r7,16412
    5ecc:	1009883a 	mov	r4,r2
    5ed0:	180b883a 	mov	r5,r3
    5ed4:	000cb580 	call	cb58 <__adddf3>
    5ed8:	047f3034 	movhi	r17,64704
    5edc:	1021883a 	mov	r16,r2
    5ee0:	1c63883a 	add	r17,r3,r17
    5ee4:	d9000f17 	ldw	r4,60(sp)
    5ee8:	d9401017 	ldw	r5,64(sp)
    5eec:	000d883a 	mov	r6,zero
    5ef0:	01d00534 	movhi	r7,16404
    5ef4:	000e8980 	call	e898 <__subdf3>
    5ef8:	800d883a 	mov	r6,r16
    5efc:	880f883a 	mov	r7,r17
    5f00:	1009883a 	mov	r4,r2
    5f04:	180b883a 	mov	r5,r3
    5f08:	102b883a 	mov	r21,r2
    5f0c:	1829883a 	mov	r20,r3
    5f10:	000de5c0 	call	de5c <__gedf2>
    5f14:	00806c16 	blt	zero,r2,60c8 <_dtoa_r+0x1304>
    5f18:	89e0003c 	xorhi	r7,r17,32768
    5f1c:	800d883a 	mov	r6,r16
    5f20:	a809883a 	mov	r4,r21
    5f24:	a00b883a 	mov	r5,r20
    5f28:	000df380 	call	df38 <__ledf2>
    5f2c:	103d7e0e 	bge	r2,zero,5528 <_gp+0xfffe93cc>
    5f30:	002b883a 	mov	r21,zero
    5f34:	0023883a 	mov	r17,zero
    5f38:	003efb06 	br	5b28 <_gp+0xfffe99cc>
    5f3c:	d8800717 	ldw	r2,28(sp)
    5f40:	003bd006 	br	4e84 <_gp+0xfffe8d28>
    5f44:	d9000a17 	ldw	r4,40(sp)
    5f48:	d9800d17 	ldw	r6,52(sp)
    5f4c:	dd400a15 	stw	r21,40(sp)
    5f50:	a905c83a 	sub	r2,r21,r4
    5f54:	308d883a 	add	r6,r6,r2
    5f58:	d9800d15 	stw	r6,52(sp)
    5f5c:	002b883a 	mov	r21,zero
    5f60:	003e0606 	br	577c <_gp+0xfffe9620>
    5f64:	9023883a 	mov	r17,r18
    5f68:	9829883a 	mov	r20,r19
    5f6c:	04000084 	movi	r16,2
    5f70:	003c9206 	br	51bc <_gp+0xfffe9060>
    5f74:	04000044 	movi	r16,1
    5f78:	dc000c15 	stw	r16,48(sp)
    5f7c:	dc000615 	stw	r16,24(sp)
    5f80:	dc002215 	stw	r16,136(sp)
    5f84:	e0001115 	stw	zero,68(fp)
    5f88:	000b883a 	mov	r5,zero
    5f8c:	003c6906 	br	5134 <_gp+0xfffe8fd8>
    5f90:	3021883a 	mov	r16,r6
    5f94:	003ffb06 	br	5f84 <_gp+0xfffe9e28>
    5f98:	1000021e 	bne	r2,zero,5fa4 <_dtoa_r+0x11e0>
    5f9c:	4200004c 	andi	r8,r8,1
    5fa0:	403e7d1e 	bne	r8,zero,5998 <_gp+0xfffe983c>
    5fa4:	01000c04 	movi	r4,48
    5fa8:	00000106 	br	5fb0 <_dtoa_r+0x11ec>
    5fac:	102f883a 	mov	r23,r2
    5fb0:	b8bfffc4 	addi	r2,r23,-1
    5fb4:	10c00007 	ldb	r3,0(r2)
    5fb8:	193ffc26 	beq	r3,r4,5fac <_gp+0xfffe9e50>
    5fbc:	003e8706 	br	59dc <_gp+0xfffe9880>
    5fc0:	d8800517 	ldw	r2,20(sp)
    5fc4:	00a3c83a 	sub	r17,zero,r2
    5fc8:	8800a426 	beq	r17,zero,625c <_dtoa_r+0x1498>
    5fcc:	888003cc 	andi	r2,r17,15
    5fd0:	100490fa 	slli	r2,r2,3
    5fd4:	00c00074 	movhi	r3,1
    5fd8:	18c92504 	addi	r3,r3,9364
    5fdc:	1885883a 	add	r2,r3,r2
    5fe0:	11800017 	ldw	r6,0(r2)
    5fe4:	11c00117 	ldw	r7,4(r2)
    5fe8:	9009883a 	mov	r4,r18
    5fec:	980b883a 	mov	r5,r19
    5ff0:	8823d13a 	srai	r17,r17,4
    5ff4:	000e02c0 	call	e02c <__muldf3>
    5ff8:	d8800f15 	stw	r2,60(sp)
    5ffc:	d8c01015 	stw	r3,64(sp)
    6000:	8800e826 	beq	r17,zero,63a4 <_dtoa_r+0x15e0>
    6004:	05000074 	movhi	r20,1
    6008:	a5091b04 	addi	r20,r20,9324
    600c:	04000084 	movi	r16,2
    6010:	8980004c 	andi	r6,r17,1
    6014:	1009883a 	mov	r4,r2
    6018:	8823d07a 	srai	r17,r17,1
    601c:	180b883a 	mov	r5,r3
    6020:	30000426 	beq	r6,zero,6034 <_dtoa_r+0x1270>
    6024:	a1800017 	ldw	r6,0(r20)
    6028:	a1c00117 	ldw	r7,4(r20)
    602c:	84000044 	addi	r16,r16,1
    6030:	000e02c0 	call	e02c <__muldf3>
    6034:	a5000204 	addi	r20,r20,8
    6038:	883ff51e 	bne	r17,zero,6010 <_gp+0xfffe9eb4>
    603c:	d8800f15 	stw	r2,60(sp)
    6040:	d8c01015 	stw	r3,64(sp)
    6044:	003c7606 	br	5220 <_gp+0xfffe90c4>
    6048:	00c00c04 	movi	r3,48
    604c:	10c00005 	stb	r3,0(r2)
    6050:	d8c00517 	ldw	r3,20(sp)
    6054:	bd3fffc3 	ldbu	r20,-1(r23)
    6058:	18c00044 	addi	r3,r3,1
    605c:	d8c00515 	stw	r3,20(sp)
    6060:	003db906 	br	5748 <_gp+0xfffe95ec>
    6064:	89400117 	ldw	r5,4(r17)
    6068:	e009883a 	mov	r4,fp
    606c:	000847c0 	call	847c <_Balloc>
    6070:	89800417 	ldw	r6,16(r17)
    6074:	89400304 	addi	r5,r17,12
    6078:	11000304 	addi	r4,r2,12
    607c:	31800084 	addi	r6,r6,2
    6080:	318d883a 	add	r6,r6,r6
    6084:	318d883a 	add	r6,r6,r6
    6088:	1027883a 	mov	r19,r2
    608c:	00080b00 	call	80b0 <memcpy>
    6090:	01800044 	movi	r6,1
    6094:	980b883a 	mov	r5,r19
    6098:	e009883a 	mov	r4,fp
    609c:	0008cb80 	call	8cb8 <__lshift>
    60a0:	1029883a 	mov	r20,r2
    60a4:	003ecc06 	br	5bd8 <_gp+0xfffe9a7c>
    60a8:	00800e44 	movi	r2,57
    60ac:	90809026 	beq	r18,r2,62f0 <_dtoa_r+0x152c>
    60b0:	92000044 	addi	r8,r18,1
    60b4:	003f1f06 	br	5d34 <_gp+0xfffe9bd8>
    60b8:	9011883a 	mov	r8,r18
    60bc:	8825883a 	mov	r18,r17
    60c0:	a023883a 	mov	r17,r20
    60c4:	003e2906 	br	596c <_gp+0xfffe9810>
    60c8:	002b883a 	mov	r21,zero
    60cc:	0023883a 	mov	r17,zero
    60d0:	003f5406 	br	5e24 <_gp+0xfffe9cc8>
    60d4:	61bfffc4 	addi	r6,r12,-1
    60d8:	300490fa 	slli	r2,r6,3
    60dc:	00c00074 	movhi	r3,1
    60e0:	18c92504 	addi	r3,r3,9364
    60e4:	1885883a 	add	r2,r3,r2
    60e8:	11000017 	ldw	r4,0(r2)
    60ec:	11400117 	ldw	r5,4(r2)
    60f0:	d8800717 	ldw	r2,28(sp)
    60f4:	880f883a 	mov	r7,r17
    60f8:	d9801215 	stw	r6,72(sp)
    60fc:	800d883a 	mov	r6,r16
    6100:	db001615 	stw	r12,88(sp)
    6104:	15c00044 	addi	r23,r2,1
    6108:	000e02c0 	call	e02c <__muldf3>
    610c:	d9401017 	ldw	r5,64(sp)
    6110:	d9000f17 	ldw	r4,60(sp)
    6114:	d8c01515 	stw	r3,84(sp)
    6118:	d8801415 	stw	r2,80(sp)
    611c:	000f1940 	call	f194 <__fixdfsi>
    6120:	1009883a 	mov	r4,r2
    6124:	1021883a 	mov	r16,r2
    6128:	000f2140 	call	f214 <__floatsidf>
    612c:	d9000f17 	ldw	r4,60(sp)
    6130:	d9401017 	ldw	r5,64(sp)
    6134:	100d883a 	mov	r6,r2
    6138:	180f883a 	mov	r7,r3
    613c:	000e8980 	call	e898 <__subdf3>
    6140:	1829883a 	mov	r20,r3
    6144:	d8c00717 	ldw	r3,28(sp)
    6148:	84000c04 	addi	r16,r16,48
    614c:	1023883a 	mov	r17,r2
    6150:	1c000005 	stb	r16,0(r3)
    6154:	db001617 	ldw	r12,88(sp)
    6158:	00800044 	movi	r2,1
    615c:	60802226 	beq	r12,r2,61e8 <_dtoa_r+0x1424>
    6160:	d9c00717 	ldw	r7,28(sp)
    6164:	8805883a 	mov	r2,r17
    6168:	b82b883a 	mov	r21,r23
    616c:	3b19883a 	add	r12,r7,r12
    6170:	6023883a 	mov	r17,r12
    6174:	a007883a 	mov	r3,r20
    6178:	dc800f15 	stw	r18,60(sp)
    617c:	000d883a 	mov	r6,zero
    6180:	01d00934 	movhi	r7,16420
    6184:	1009883a 	mov	r4,r2
    6188:	180b883a 	mov	r5,r3
    618c:	000e02c0 	call	e02c <__muldf3>
    6190:	180b883a 	mov	r5,r3
    6194:	1009883a 	mov	r4,r2
    6198:	1829883a 	mov	r20,r3
    619c:	1025883a 	mov	r18,r2
    61a0:	000f1940 	call	f194 <__fixdfsi>
    61a4:	1009883a 	mov	r4,r2
    61a8:	1021883a 	mov	r16,r2
    61ac:	000f2140 	call	f214 <__floatsidf>
    61b0:	100d883a 	mov	r6,r2
    61b4:	180f883a 	mov	r7,r3
    61b8:	9009883a 	mov	r4,r18
    61bc:	a00b883a 	mov	r5,r20
    61c0:	84000c04 	addi	r16,r16,48
    61c4:	000e8980 	call	e898 <__subdf3>
    61c8:	ad400044 	addi	r21,r21,1
    61cc:	ac3fffc5 	stb	r16,-1(r21)
    61d0:	ac7fea1e 	bne	r21,r17,617c <_gp+0xfffea020>
    61d4:	1023883a 	mov	r17,r2
    61d8:	d8801217 	ldw	r2,72(sp)
    61dc:	dc800f17 	ldw	r18,60(sp)
    61e0:	1829883a 	mov	r20,r3
    61e4:	b8af883a 	add	r23,r23,r2
    61e8:	d9001417 	ldw	r4,80(sp)
    61ec:	d9401517 	ldw	r5,84(sp)
    61f0:	000d883a 	mov	r6,zero
    61f4:	01cff834 	movhi	r7,16352
    61f8:	000cb580 	call	cb58 <__adddf3>
    61fc:	880d883a 	mov	r6,r17
    6200:	a00f883a 	mov	r7,r20
    6204:	1009883a 	mov	r4,r2
    6208:	180b883a 	mov	r5,r3
    620c:	000df380 	call	df38 <__ledf2>
    6210:	10003e0e 	bge	r2,zero,630c <_dtoa_r+0x1548>
    6214:	d9001317 	ldw	r4,76(sp)
    6218:	bd3fffc3 	ldbu	r20,-1(r23)
    621c:	d9000515 	stw	r4,20(sp)
    6220:	003d3b06 	br	5710 <_gp+0xfffe95b4>
    6224:	0027883a 	mov	r19,zero
    6228:	003f1b06 	br	5e98 <_gp+0xfffe9d3c>
    622c:	d8800817 	ldw	r2,32(sp)
    6230:	11e9c83a 	sub	r20,r2,r7
    6234:	0005883a 	mov	r2,zero
    6238:	003d5406 	br	578c <_gp+0xfffe9630>
    623c:	00800044 	movi	r2,1
    6240:	003dc706 	br	5960 <_gp+0xfffe9804>
    6244:	d8c00217 	ldw	r3,8(sp)
    6248:	00800d84 	movi	r2,54
    624c:	dd400a17 	ldw	r21,40(sp)
    6250:	10c5c83a 	sub	r2,r2,r3
    6254:	dd000817 	ldw	r20,32(sp)
    6258:	003d4c06 	br	578c <_gp+0xfffe9630>
    625c:	dc800f15 	stw	r18,60(sp)
    6260:	dcc01015 	stw	r19,64(sp)
    6264:	04000084 	movi	r16,2
    6268:	003bed06 	br	5220 <_gp+0xfffe90c4>
    626c:	d9000617 	ldw	r4,24(sp)
    6270:	203f0d26 	beq	r4,zero,5ea8 <_gp+0xfffe9d4c>
    6274:	d9800c17 	ldw	r6,48(sp)
    6278:	01bcab0e 	bge	zero,r6,5528 <_gp+0xfffe93cc>
    627c:	d9401017 	ldw	r5,64(sp)
    6280:	d9000f17 	ldw	r4,60(sp)
    6284:	000d883a 	mov	r6,zero
    6288:	01d00934 	movhi	r7,16420
    628c:	000e02c0 	call	e02c <__muldf3>
    6290:	81000044 	addi	r4,r16,1
    6294:	d8800f15 	stw	r2,60(sp)
    6298:	d8c01015 	stw	r3,64(sp)
    629c:	000f2140 	call	f214 <__floatsidf>
    62a0:	d9800f17 	ldw	r6,60(sp)
    62a4:	d9c01017 	ldw	r7,64(sp)
    62a8:	1009883a 	mov	r4,r2
    62ac:	180b883a 	mov	r5,r3
    62b0:	000e02c0 	call	e02c <__muldf3>
    62b4:	01d00734 	movhi	r7,16412
    62b8:	000d883a 	mov	r6,zero
    62bc:	1009883a 	mov	r4,r2
    62c0:	180b883a 	mov	r5,r3
    62c4:	000cb580 	call	cb58 <__adddf3>
    62c8:	d9c00517 	ldw	r7,20(sp)
    62cc:	047f3034 	movhi	r17,64704
    62d0:	1021883a 	mov	r16,r2
    62d4:	39ffffc4 	addi	r7,r7,-1
    62d8:	d9c01315 	stw	r7,76(sp)
    62dc:	1c63883a 	add	r17,r3,r17
    62e0:	db000c17 	ldw	r12,48(sp)
    62e4:	003bea06 	br	5290 <_gp+0xfffe9134>
    62e8:	dc000915 	stw	r16,36(sp)
    62ec:	003e0e06 	br	5b28 <_gp+0xfffe99cc>
    62f0:	01000e44 	movi	r4,57
    62f4:	8825883a 	mov	r18,r17
    62f8:	9dc00044 	addi	r23,r19,1
    62fc:	99000005 	stb	r4,0(r19)
    6300:	a023883a 	mov	r17,r20
    6304:	dc000915 	stw	r16,36(sp)
    6308:	003da406 	br	599c <_gp+0xfffe9840>
    630c:	d9801417 	ldw	r6,80(sp)
    6310:	d9c01517 	ldw	r7,84(sp)
    6314:	0009883a 	mov	r4,zero
    6318:	014ff834 	movhi	r5,16352
    631c:	000e8980 	call	e898 <__subdf3>
    6320:	880d883a 	mov	r6,r17
    6324:	a00f883a 	mov	r7,r20
    6328:	1009883a 	mov	r4,r2
    632c:	180b883a 	mov	r5,r3
    6330:	000de5c0 	call	de5c <__gedf2>
    6334:	00bc7c0e 	bge	zero,r2,5528 <_gp+0xfffe93cc>
    6338:	01000c04 	movi	r4,48
    633c:	00000106 	br	6344 <_dtoa_r+0x1580>
    6340:	102f883a 	mov	r23,r2
    6344:	b8bfffc4 	addi	r2,r23,-1
    6348:	10c00007 	ldb	r3,0(r2)
    634c:	193ffc26 	beq	r3,r4,6340 <_gp+0xfffea1e4>
    6350:	d9801317 	ldw	r6,76(sp)
    6354:	d9800515 	stw	r6,20(sp)
    6358:	003c4406 	br	546c <_gp+0xfffe9310>
    635c:	d9801317 	ldw	r6,76(sp)
    6360:	d9800515 	stw	r6,20(sp)
    6364:	003cea06 	br	5710 <_gp+0xfffe95b4>
    6368:	dd800f17 	ldw	r22,60(sp)
    636c:	dcc01017 	ldw	r19,64(sp)
    6370:	dc801217 	ldw	r18,72(sp)
    6374:	003c6c06 	br	5528 <_gp+0xfffe93cc>
    6378:	903e031e 	bne	r18,zero,5b88 <_gp+0xfffe9a2c>
    637c:	003ebb06 	br	5e6c <_gp+0xfffe9d10>
    6380:	103e6c1e 	bne	r2,zero,5d34 <_gp+0xfffe9bd8>
    6384:	4080004c 	andi	r2,r8,1
    6388:	103e6a26 	beq	r2,zero,5d34 <_gp+0xfffe9bd8>
    638c:	003e6606 	br	5d28 <_gp+0xfffe9bcc>
    6390:	d8c00317 	ldw	r3,12(sp)
    6394:	00800084 	movi	r2,2
    6398:	10c02916 	blt	r2,r3,6440 <_dtoa_r+0x167c>
    639c:	d9000c17 	ldw	r4,48(sp)
    63a0:	003e8806 	br	5dc4 <_gp+0xfffe9c68>
    63a4:	04000084 	movi	r16,2
    63a8:	003b9d06 	br	5220 <_gp+0xfffe90c4>
    63ac:	d9001317 	ldw	r4,76(sp)
    63b0:	d9000515 	stw	r4,20(sp)
    63b4:	003cd606 	br	5710 <_gp+0xfffe95b4>
    63b8:	d8801317 	ldw	r2,76(sp)
    63bc:	d8800515 	stw	r2,20(sp)
    63c0:	003c2a06 	br	546c <_gp+0xfffe9310>
    63c4:	d9800317 	ldw	r6,12(sp)
    63c8:	00800084 	movi	r2,2
    63cc:	11801516 	blt	r2,r6,6424 <_dtoa_r+0x1660>
    63d0:	d9c00c17 	ldw	r7,48(sp)
    63d4:	d9c00615 	stw	r7,24(sp)
    63d8:	003df706 	br	5bb8 <_gp+0xfffe9a5c>
    63dc:	193d3926 	beq	r3,r4,58c4 <_gp+0xfffe9768>
    63e0:	00c00f04 	movi	r3,60
    63e4:	1885c83a 	sub	r2,r3,r2
    63e8:	003ddf06 	br	5b68 <_gp+0xfffe9a0c>
    63ec:	e009883a 	mov	r4,fp
    63f0:	e0001115 	stw	zero,68(fp)
    63f4:	000b883a 	mov	r5,zero
    63f8:	000847c0 	call	847c <_Balloc>
    63fc:	d8800715 	stw	r2,28(sp)
    6400:	d8c00717 	ldw	r3,28(sp)
    6404:	00bfffc4 	movi	r2,-1
    6408:	01000044 	movi	r4,1
    640c:	d8800c15 	stw	r2,48(sp)
    6410:	e0c01015 	stw	r3,64(fp)
    6414:	d9000b15 	stw	r4,44(sp)
    6418:	d8800615 	stw	r2,24(sp)
    641c:	d8002215 	stw	zero,136(sp)
    6420:	003c4106 	br	5528 <_gp+0xfffe93cc>
    6424:	d8c00c17 	ldw	r3,48(sp)
    6428:	d8c00615 	stw	r3,24(sp)
    642c:	003e7006 	br	5df0 <_gp+0xfffe9c94>
    6430:	04400044 	movi	r17,1
    6434:	003b2006 	br	50b8 <_gp+0xfffe8f5c>
    6438:	000b883a 	mov	r5,zero
    643c:	003b3d06 	br	5134 <_gp+0xfffe8fd8>
    6440:	d8800c17 	ldw	r2,48(sp)
    6444:	d8800615 	stw	r2,24(sp)
    6448:	003e6906 	br	5df0 <_gp+0xfffe9c94>

0000644c <__sflush_r>:
    644c:	2880030b 	ldhu	r2,12(r5)
    6450:	defffb04 	addi	sp,sp,-20
    6454:	dcc00315 	stw	r19,12(sp)
    6458:	dc400115 	stw	r17,4(sp)
    645c:	dfc00415 	stw	ra,16(sp)
    6460:	dc800215 	stw	r18,8(sp)
    6464:	dc000015 	stw	r16,0(sp)
    6468:	10c0020c 	andi	r3,r2,8
    646c:	2823883a 	mov	r17,r5
    6470:	2027883a 	mov	r19,r4
    6474:	1800311e 	bne	r3,zero,653c <__sflush_r+0xf0>
    6478:	28c00117 	ldw	r3,4(r5)
    647c:	10820014 	ori	r2,r2,2048
    6480:	2880030d 	sth	r2,12(r5)
    6484:	00c04b0e 	bge	zero,r3,65b4 <__sflush_r+0x168>
    6488:	8a000a17 	ldw	r8,40(r17)
    648c:	40002326 	beq	r8,zero,651c <__sflush_r+0xd0>
    6490:	9c000017 	ldw	r16,0(r19)
    6494:	10c4000c 	andi	r3,r2,4096
    6498:	98000015 	stw	zero,0(r19)
    649c:	18004826 	beq	r3,zero,65c0 <__sflush_r+0x174>
    64a0:	89801417 	ldw	r6,80(r17)
    64a4:	10c0010c 	andi	r3,r2,4
    64a8:	18000626 	beq	r3,zero,64c4 <__sflush_r+0x78>
    64ac:	88c00117 	ldw	r3,4(r17)
    64b0:	88800c17 	ldw	r2,48(r17)
    64b4:	30cdc83a 	sub	r6,r6,r3
    64b8:	10000226 	beq	r2,zero,64c4 <__sflush_r+0x78>
    64bc:	88800f17 	ldw	r2,60(r17)
    64c0:	308dc83a 	sub	r6,r6,r2
    64c4:	89400717 	ldw	r5,28(r17)
    64c8:	000f883a 	mov	r7,zero
    64cc:	9809883a 	mov	r4,r19
    64d0:	403ee83a 	callr	r8
    64d4:	00ffffc4 	movi	r3,-1
    64d8:	10c04426 	beq	r2,r3,65ec <__sflush_r+0x1a0>
    64dc:	88c0030b 	ldhu	r3,12(r17)
    64e0:	89000417 	ldw	r4,16(r17)
    64e4:	88000115 	stw	zero,4(r17)
    64e8:	197dffcc 	andi	r5,r3,63487
    64ec:	8940030d 	sth	r5,12(r17)
    64f0:	89000015 	stw	r4,0(r17)
    64f4:	18c4000c 	andi	r3,r3,4096
    64f8:	18002c1e 	bne	r3,zero,65ac <__sflush_r+0x160>
    64fc:	89400c17 	ldw	r5,48(r17)
    6500:	9c000015 	stw	r16,0(r19)
    6504:	28000526 	beq	r5,zero,651c <__sflush_r+0xd0>
    6508:	88801004 	addi	r2,r17,64
    650c:	28800226 	beq	r5,r2,6518 <__sflush_r+0xcc>
    6510:	9809883a 	mov	r4,r19
    6514:	0006bc80 	call	6bc8 <_free_r>
    6518:	88000c15 	stw	zero,48(r17)
    651c:	0005883a 	mov	r2,zero
    6520:	dfc00417 	ldw	ra,16(sp)
    6524:	dcc00317 	ldw	r19,12(sp)
    6528:	dc800217 	ldw	r18,8(sp)
    652c:	dc400117 	ldw	r17,4(sp)
    6530:	dc000017 	ldw	r16,0(sp)
    6534:	dec00504 	addi	sp,sp,20
    6538:	f800283a 	ret
    653c:	2c800417 	ldw	r18,16(r5)
    6540:	903ff626 	beq	r18,zero,651c <_gp+0xfffea3c0>
    6544:	2c000017 	ldw	r16,0(r5)
    6548:	108000cc 	andi	r2,r2,3
    654c:	2c800015 	stw	r18,0(r5)
    6550:	84a1c83a 	sub	r16,r16,r18
    6554:	1000131e 	bne	r2,zero,65a4 <__sflush_r+0x158>
    6558:	28800517 	ldw	r2,20(r5)
    655c:	88800215 	stw	r2,8(r17)
    6560:	04000316 	blt	zero,r16,6570 <__sflush_r+0x124>
    6564:	003fed06 	br	651c <_gp+0xfffea3c0>
    6568:	90a5883a 	add	r18,r18,r2
    656c:	043feb0e 	bge	zero,r16,651c <_gp+0xfffea3c0>
    6570:	88800917 	ldw	r2,36(r17)
    6574:	89400717 	ldw	r5,28(r17)
    6578:	800f883a 	mov	r7,r16
    657c:	900d883a 	mov	r6,r18
    6580:	9809883a 	mov	r4,r19
    6584:	103ee83a 	callr	r2
    6588:	80a1c83a 	sub	r16,r16,r2
    658c:	00bff616 	blt	zero,r2,6568 <_gp+0xfffea40c>
    6590:	88c0030b 	ldhu	r3,12(r17)
    6594:	00bfffc4 	movi	r2,-1
    6598:	18c01014 	ori	r3,r3,64
    659c:	88c0030d 	sth	r3,12(r17)
    65a0:	003fdf06 	br	6520 <_gp+0xfffea3c4>
    65a4:	0005883a 	mov	r2,zero
    65a8:	003fec06 	br	655c <_gp+0xfffea400>
    65ac:	88801415 	stw	r2,80(r17)
    65b0:	003fd206 	br	64fc <_gp+0xfffea3a0>
    65b4:	28c00f17 	ldw	r3,60(r5)
    65b8:	00ffb316 	blt	zero,r3,6488 <_gp+0xfffea32c>
    65bc:	003fd706 	br	651c <_gp+0xfffea3c0>
    65c0:	89400717 	ldw	r5,28(r17)
    65c4:	000d883a 	mov	r6,zero
    65c8:	01c00044 	movi	r7,1
    65cc:	9809883a 	mov	r4,r19
    65d0:	403ee83a 	callr	r8
    65d4:	100d883a 	mov	r6,r2
    65d8:	00bfffc4 	movi	r2,-1
    65dc:	30801426 	beq	r6,r2,6630 <__sflush_r+0x1e4>
    65e0:	8880030b 	ldhu	r2,12(r17)
    65e4:	8a000a17 	ldw	r8,40(r17)
    65e8:	003fae06 	br	64a4 <_gp+0xfffea348>
    65ec:	98c00017 	ldw	r3,0(r19)
    65f0:	183fba26 	beq	r3,zero,64dc <_gp+0xfffea380>
    65f4:	01000744 	movi	r4,29
    65f8:	19000626 	beq	r3,r4,6614 <__sflush_r+0x1c8>
    65fc:	01000584 	movi	r4,22
    6600:	19000426 	beq	r3,r4,6614 <__sflush_r+0x1c8>
    6604:	88c0030b 	ldhu	r3,12(r17)
    6608:	18c01014 	ori	r3,r3,64
    660c:	88c0030d 	sth	r3,12(r17)
    6610:	003fc306 	br	6520 <_gp+0xfffea3c4>
    6614:	8880030b 	ldhu	r2,12(r17)
    6618:	88c00417 	ldw	r3,16(r17)
    661c:	88000115 	stw	zero,4(r17)
    6620:	10bdffcc 	andi	r2,r2,63487
    6624:	8880030d 	sth	r2,12(r17)
    6628:	88c00015 	stw	r3,0(r17)
    662c:	003fb306 	br	64fc <_gp+0xfffea3a0>
    6630:	98800017 	ldw	r2,0(r19)
    6634:	103fea26 	beq	r2,zero,65e0 <_gp+0xfffea484>
    6638:	00c00744 	movi	r3,29
    663c:	10c00226 	beq	r2,r3,6648 <__sflush_r+0x1fc>
    6640:	00c00584 	movi	r3,22
    6644:	10c0031e 	bne	r2,r3,6654 <__sflush_r+0x208>
    6648:	9c000015 	stw	r16,0(r19)
    664c:	0005883a 	mov	r2,zero
    6650:	003fb306 	br	6520 <_gp+0xfffea3c4>
    6654:	88c0030b 	ldhu	r3,12(r17)
    6658:	3005883a 	mov	r2,r6
    665c:	18c01014 	ori	r3,r3,64
    6660:	88c0030d 	sth	r3,12(r17)
    6664:	003fae06 	br	6520 <_gp+0xfffea3c4>

00006668 <_fflush_r>:
    6668:	defffd04 	addi	sp,sp,-12
    666c:	dc000115 	stw	r16,4(sp)
    6670:	dfc00215 	stw	ra,8(sp)
    6674:	2021883a 	mov	r16,r4
    6678:	20000226 	beq	r4,zero,6684 <_fflush_r+0x1c>
    667c:	20800e17 	ldw	r2,56(r4)
    6680:	10000c26 	beq	r2,zero,66b4 <_fflush_r+0x4c>
    6684:	2880030f 	ldh	r2,12(r5)
    6688:	1000051e 	bne	r2,zero,66a0 <_fflush_r+0x38>
    668c:	0005883a 	mov	r2,zero
    6690:	dfc00217 	ldw	ra,8(sp)
    6694:	dc000117 	ldw	r16,4(sp)
    6698:	dec00304 	addi	sp,sp,12
    669c:	f800283a 	ret
    66a0:	8009883a 	mov	r4,r16
    66a4:	dfc00217 	ldw	ra,8(sp)
    66a8:	dc000117 	ldw	r16,4(sp)
    66ac:	dec00304 	addi	sp,sp,12
    66b0:	000644c1 	jmpi	644c <__sflush_r>
    66b4:	d9400015 	stw	r5,0(sp)
    66b8:	0006a540 	call	6a54 <__sinit>
    66bc:	d9400017 	ldw	r5,0(sp)
    66c0:	003ff006 	br	6684 <_gp+0xfffea528>

000066c4 <fflush>:
    66c4:	20000526 	beq	r4,zero,66dc <fflush+0x18>
    66c8:	00800074 	movhi	r2,1
    66cc:	10905804 	addi	r2,r2,16736
    66d0:	200b883a 	mov	r5,r4
    66d4:	11000017 	ldw	r4,0(r2)
    66d8:	00066681 	jmpi	6668 <_fflush_r>
    66dc:	00800074 	movhi	r2,1
    66e0:	10905704 	addi	r2,r2,16732
    66e4:	11000017 	ldw	r4,0(r2)
    66e8:	01400034 	movhi	r5,0
    66ec:	29599a04 	addi	r5,r5,26216
    66f0:	00074641 	jmpi	7464 <_fwalk_reent>

000066f4 <__fp_unlock>:
    66f4:	0005883a 	mov	r2,zero
    66f8:	f800283a 	ret

000066fc <_cleanup_r>:
    66fc:	01400074 	movhi	r5,1
    6700:	296d8004 	addi	r5,r5,-18944
    6704:	00074641 	jmpi	7464 <_fwalk_reent>

00006708 <__sinit.part.1>:
    6708:	defff704 	addi	sp,sp,-36
    670c:	00c00034 	movhi	r3,0
    6710:	dfc00815 	stw	ra,32(sp)
    6714:	ddc00715 	stw	r23,28(sp)
    6718:	dd800615 	stw	r22,24(sp)
    671c:	dd400515 	stw	r21,20(sp)
    6720:	dd000415 	stw	r20,16(sp)
    6724:	dcc00315 	stw	r19,12(sp)
    6728:	dc800215 	stw	r18,8(sp)
    672c:	dc400115 	stw	r17,4(sp)
    6730:	dc000015 	stw	r16,0(sp)
    6734:	18d9bf04 	addi	r3,r3,26364
    6738:	24000117 	ldw	r16,4(r4)
    673c:	20c00f15 	stw	r3,60(r4)
    6740:	2080bb04 	addi	r2,r4,748
    6744:	00c000c4 	movi	r3,3
    6748:	20c0b915 	stw	r3,740(r4)
    674c:	2080ba15 	stw	r2,744(r4)
    6750:	2000b815 	stw	zero,736(r4)
    6754:	05c00204 	movi	r23,8
    6758:	00800104 	movi	r2,4
    675c:	2025883a 	mov	r18,r4
    6760:	b80d883a 	mov	r6,r23
    6764:	81001704 	addi	r4,r16,92
    6768:	000b883a 	mov	r5,zero
    676c:	80000015 	stw	zero,0(r16)
    6770:	80000115 	stw	zero,4(r16)
    6774:	80000215 	stw	zero,8(r16)
    6778:	8080030d 	sth	r2,12(r16)
    677c:	80001915 	stw	zero,100(r16)
    6780:	8000038d 	sth	zero,14(r16)
    6784:	80000415 	stw	zero,16(r16)
    6788:	80000515 	stw	zero,20(r16)
    678c:	80000615 	stw	zero,24(r16)
    6790:	00083540 	call	8354 <memset>
    6794:	05800074 	movhi	r22,1
    6798:	94400217 	ldw	r17,8(r18)
    679c:	05400074 	movhi	r21,1
    67a0:	05000074 	movhi	r20,1
    67a4:	04c00074 	movhi	r19,1
    67a8:	b5a6d804 	addi	r22,r22,-25760
    67ac:	ad66ef04 	addi	r21,r21,-25668
    67b0:	a5270e04 	addi	r20,r20,-25544
    67b4:	9ce72504 	addi	r19,r19,-25452
    67b8:	85800815 	stw	r22,32(r16)
    67bc:	85400915 	stw	r21,36(r16)
    67c0:	85000a15 	stw	r20,40(r16)
    67c4:	84c00b15 	stw	r19,44(r16)
    67c8:	84000715 	stw	r16,28(r16)
    67cc:	00800284 	movi	r2,10
    67d0:	8880030d 	sth	r2,12(r17)
    67d4:	00800044 	movi	r2,1
    67d8:	b80d883a 	mov	r6,r23
    67dc:	89001704 	addi	r4,r17,92
    67e0:	000b883a 	mov	r5,zero
    67e4:	88000015 	stw	zero,0(r17)
    67e8:	88000115 	stw	zero,4(r17)
    67ec:	88000215 	stw	zero,8(r17)
    67f0:	88001915 	stw	zero,100(r17)
    67f4:	8880038d 	sth	r2,14(r17)
    67f8:	88000415 	stw	zero,16(r17)
    67fc:	88000515 	stw	zero,20(r17)
    6800:	88000615 	stw	zero,24(r17)
    6804:	00083540 	call	8354 <memset>
    6808:	94000317 	ldw	r16,12(r18)
    680c:	00800484 	movi	r2,18
    6810:	8c400715 	stw	r17,28(r17)
    6814:	8d800815 	stw	r22,32(r17)
    6818:	8d400915 	stw	r21,36(r17)
    681c:	8d000a15 	stw	r20,40(r17)
    6820:	8cc00b15 	stw	r19,44(r17)
    6824:	8080030d 	sth	r2,12(r16)
    6828:	00800084 	movi	r2,2
    682c:	80000015 	stw	zero,0(r16)
    6830:	80000115 	stw	zero,4(r16)
    6834:	80000215 	stw	zero,8(r16)
    6838:	80001915 	stw	zero,100(r16)
    683c:	8080038d 	sth	r2,14(r16)
    6840:	80000415 	stw	zero,16(r16)
    6844:	80000515 	stw	zero,20(r16)
    6848:	80000615 	stw	zero,24(r16)
    684c:	b80d883a 	mov	r6,r23
    6850:	000b883a 	mov	r5,zero
    6854:	81001704 	addi	r4,r16,92
    6858:	00083540 	call	8354 <memset>
    685c:	00800044 	movi	r2,1
    6860:	84000715 	stw	r16,28(r16)
    6864:	85800815 	stw	r22,32(r16)
    6868:	85400915 	stw	r21,36(r16)
    686c:	85000a15 	stw	r20,40(r16)
    6870:	84c00b15 	stw	r19,44(r16)
    6874:	90800e15 	stw	r2,56(r18)
    6878:	dfc00817 	ldw	ra,32(sp)
    687c:	ddc00717 	ldw	r23,28(sp)
    6880:	dd800617 	ldw	r22,24(sp)
    6884:	dd400517 	ldw	r21,20(sp)
    6888:	dd000417 	ldw	r20,16(sp)
    688c:	dcc00317 	ldw	r19,12(sp)
    6890:	dc800217 	ldw	r18,8(sp)
    6894:	dc400117 	ldw	r17,4(sp)
    6898:	dc000017 	ldw	r16,0(sp)
    689c:	dec00904 	addi	sp,sp,36
    68a0:	f800283a 	ret

000068a4 <__fp_lock>:
    68a4:	0005883a 	mov	r2,zero
    68a8:	f800283a 	ret

000068ac <__sfmoreglue>:
    68ac:	defffc04 	addi	sp,sp,-16
    68b0:	dc800215 	stw	r18,8(sp)
    68b4:	2825883a 	mov	r18,r5
    68b8:	dc000015 	stw	r16,0(sp)
    68bc:	01401a04 	movi	r5,104
    68c0:	2021883a 	mov	r16,r4
    68c4:	913fffc4 	addi	r4,r18,-1
    68c8:	dfc00315 	stw	ra,12(sp)
    68cc:	dc400115 	stw	r17,4(sp)
    68d0:	000cb300 	call	cb30 <__mulsi3>
    68d4:	8009883a 	mov	r4,r16
    68d8:	11401d04 	addi	r5,r2,116
    68dc:	1023883a 	mov	r17,r2
    68e0:	00077c00 	call	77c0 <_malloc_r>
    68e4:	1021883a 	mov	r16,r2
    68e8:	10000726 	beq	r2,zero,6908 <__sfmoreglue+0x5c>
    68ec:	11000304 	addi	r4,r2,12
    68f0:	10000015 	stw	zero,0(r2)
    68f4:	14800115 	stw	r18,4(r2)
    68f8:	11000215 	stw	r4,8(r2)
    68fc:	89801a04 	addi	r6,r17,104
    6900:	000b883a 	mov	r5,zero
    6904:	00083540 	call	8354 <memset>
    6908:	8005883a 	mov	r2,r16
    690c:	dfc00317 	ldw	ra,12(sp)
    6910:	dc800217 	ldw	r18,8(sp)
    6914:	dc400117 	ldw	r17,4(sp)
    6918:	dc000017 	ldw	r16,0(sp)
    691c:	dec00404 	addi	sp,sp,16
    6920:	f800283a 	ret

00006924 <__sfp>:
    6924:	defffb04 	addi	sp,sp,-20
    6928:	dc000015 	stw	r16,0(sp)
    692c:	04000074 	movhi	r16,1
    6930:	84105704 	addi	r16,r16,16732
    6934:	dcc00315 	stw	r19,12(sp)
    6938:	2027883a 	mov	r19,r4
    693c:	81000017 	ldw	r4,0(r16)
    6940:	dfc00415 	stw	ra,16(sp)
    6944:	dc800215 	stw	r18,8(sp)
    6948:	20800e17 	ldw	r2,56(r4)
    694c:	dc400115 	stw	r17,4(sp)
    6950:	1000021e 	bne	r2,zero,695c <__sfp+0x38>
    6954:	00067080 	call	6708 <__sinit.part.1>
    6958:	81000017 	ldw	r4,0(r16)
    695c:	2480b804 	addi	r18,r4,736
    6960:	047fffc4 	movi	r17,-1
    6964:	91000117 	ldw	r4,4(r18)
    6968:	94000217 	ldw	r16,8(r18)
    696c:	213fffc4 	addi	r4,r4,-1
    6970:	20000a16 	blt	r4,zero,699c <__sfp+0x78>
    6974:	8080030f 	ldh	r2,12(r16)
    6978:	10000c26 	beq	r2,zero,69ac <__sfp+0x88>
    697c:	80c01d04 	addi	r3,r16,116
    6980:	00000206 	br	698c <__sfp+0x68>
    6984:	18bfe60f 	ldh	r2,-104(r3)
    6988:	10000826 	beq	r2,zero,69ac <__sfp+0x88>
    698c:	213fffc4 	addi	r4,r4,-1
    6990:	1c3ffd04 	addi	r16,r3,-12
    6994:	18c01a04 	addi	r3,r3,104
    6998:	247ffa1e 	bne	r4,r17,6984 <_gp+0xfffea828>
    699c:	90800017 	ldw	r2,0(r18)
    69a0:	10001d26 	beq	r2,zero,6a18 <__sfp+0xf4>
    69a4:	1025883a 	mov	r18,r2
    69a8:	003fee06 	br	6964 <_gp+0xfffea808>
    69ac:	00bfffc4 	movi	r2,-1
    69b0:	8080038d 	sth	r2,14(r16)
    69b4:	00800044 	movi	r2,1
    69b8:	8080030d 	sth	r2,12(r16)
    69bc:	80001915 	stw	zero,100(r16)
    69c0:	80000015 	stw	zero,0(r16)
    69c4:	80000215 	stw	zero,8(r16)
    69c8:	80000115 	stw	zero,4(r16)
    69cc:	80000415 	stw	zero,16(r16)
    69d0:	80000515 	stw	zero,20(r16)
    69d4:	80000615 	stw	zero,24(r16)
    69d8:	01800204 	movi	r6,8
    69dc:	000b883a 	mov	r5,zero
    69e0:	81001704 	addi	r4,r16,92
    69e4:	00083540 	call	8354 <memset>
    69e8:	8005883a 	mov	r2,r16
    69ec:	80000c15 	stw	zero,48(r16)
    69f0:	80000d15 	stw	zero,52(r16)
    69f4:	80001115 	stw	zero,68(r16)
    69f8:	80001215 	stw	zero,72(r16)
    69fc:	dfc00417 	ldw	ra,16(sp)
    6a00:	dcc00317 	ldw	r19,12(sp)
    6a04:	dc800217 	ldw	r18,8(sp)
    6a08:	dc400117 	ldw	r17,4(sp)
    6a0c:	dc000017 	ldw	r16,0(sp)
    6a10:	dec00504 	addi	sp,sp,20
    6a14:	f800283a 	ret
    6a18:	01400104 	movi	r5,4
    6a1c:	9809883a 	mov	r4,r19
    6a20:	00068ac0 	call	68ac <__sfmoreglue>
    6a24:	90800015 	stw	r2,0(r18)
    6a28:	103fde1e 	bne	r2,zero,69a4 <_gp+0xfffea848>
    6a2c:	00800304 	movi	r2,12
    6a30:	98800015 	stw	r2,0(r19)
    6a34:	0005883a 	mov	r2,zero
    6a38:	003ff006 	br	69fc <_gp+0xfffea8a0>

00006a3c <_cleanup>:
    6a3c:	00800074 	movhi	r2,1
    6a40:	10905704 	addi	r2,r2,16732
    6a44:	11000017 	ldw	r4,0(r2)
    6a48:	01400074 	movhi	r5,1
    6a4c:	296d8004 	addi	r5,r5,-18944
    6a50:	00074641 	jmpi	7464 <_fwalk_reent>

00006a54 <__sinit>:
    6a54:	20800e17 	ldw	r2,56(r4)
    6a58:	10000126 	beq	r2,zero,6a60 <__sinit+0xc>
    6a5c:	f800283a 	ret
    6a60:	00067081 	jmpi	6708 <__sinit.part.1>

00006a64 <__sfp_lock_acquire>:
    6a64:	f800283a 	ret

00006a68 <__sfp_lock_release>:
    6a68:	f800283a 	ret

00006a6c <__sinit_lock_acquire>:
    6a6c:	f800283a 	ret

00006a70 <__sinit_lock_release>:
    6a70:	f800283a 	ret

00006a74 <__fp_lock_all>:
    6a74:	00800074 	movhi	r2,1
    6a78:	10905804 	addi	r2,r2,16736
    6a7c:	11000017 	ldw	r4,0(r2)
    6a80:	01400034 	movhi	r5,0
    6a84:	295a2904 	addi	r5,r5,26788
    6a88:	00073a01 	jmpi	73a0 <_fwalk>

00006a8c <__fp_unlock_all>:
    6a8c:	00800074 	movhi	r2,1
    6a90:	10905804 	addi	r2,r2,16736
    6a94:	11000017 	ldw	r4,0(r2)
    6a98:	01400034 	movhi	r5,0
    6a9c:	2959bd04 	addi	r5,r5,26356
    6aa0:	00073a01 	jmpi	73a0 <_fwalk>

00006aa4 <_malloc_trim_r>:
    6aa4:	defffb04 	addi	sp,sp,-20
    6aa8:	dcc00315 	stw	r19,12(sp)
    6aac:	04c00074 	movhi	r19,1
    6ab0:	dc800215 	stw	r18,8(sp)
    6ab4:	dc400115 	stw	r17,4(sp)
    6ab8:	dc000015 	stw	r16,0(sp)
    6abc:	dfc00415 	stw	ra,16(sp)
    6ac0:	2821883a 	mov	r16,r5
    6ac4:	9ccad304 	addi	r19,r19,11084
    6ac8:	2025883a 	mov	r18,r4
    6acc:	000f9980 	call	f998 <__malloc_lock>
    6ad0:	98800217 	ldw	r2,8(r19)
    6ad4:	14400117 	ldw	r17,4(r2)
    6ad8:	00bfff04 	movi	r2,-4
    6adc:	88a2703a 	and	r17,r17,r2
    6ae0:	8c21c83a 	sub	r16,r17,r16
    6ae4:	8403fbc4 	addi	r16,r16,4079
    6ae8:	8020d33a 	srli	r16,r16,12
    6aec:	0083ffc4 	movi	r2,4095
    6af0:	843fffc4 	addi	r16,r16,-1
    6af4:	8020933a 	slli	r16,r16,12
    6af8:	1400060e 	bge	r2,r16,6b14 <_malloc_trim_r+0x70>
    6afc:	000b883a 	mov	r5,zero
    6b00:	9009883a 	mov	r4,r18
    6b04:	0009b0c0 	call	9b0c <_sbrk_r>
    6b08:	98c00217 	ldw	r3,8(r19)
    6b0c:	1c47883a 	add	r3,r3,r17
    6b10:	10c00a26 	beq	r2,r3,6b3c <_malloc_trim_r+0x98>
    6b14:	9009883a 	mov	r4,r18
    6b18:	000f9bc0 	call	f9bc <__malloc_unlock>
    6b1c:	0005883a 	mov	r2,zero
    6b20:	dfc00417 	ldw	ra,16(sp)
    6b24:	dcc00317 	ldw	r19,12(sp)
    6b28:	dc800217 	ldw	r18,8(sp)
    6b2c:	dc400117 	ldw	r17,4(sp)
    6b30:	dc000017 	ldw	r16,0(sp)
    6b34:	dec00504 	addi	sp,sp,20
    6b38:	f800283a 	ret
    6b3c:	040bc83a 	sub	r5,zero,r16
    6b40:	9009883a 	mov	r4,r18
    6b44:	0009b0c0 	call	9b0c <_sbrk_r>
    6b48:	00ffffc4 	movi	r3,-1
    6b4c:	10c00d26 	beq	r2,r3,6b84 <_malloc_trim_r+0xe0>
    6b50:	00c00074 	movhi	r3,1
    6b54:	18d73104 	addi	r3,r3,23748
    6b58:	18800017 	ldw	r2,0(r3)
    6b5c:	99000217 	ldw	r4,8(r19)
    6b60:	8c23c83a 	sub	r17,r17,r16
    6b64:	8c400054 	ori	r17,r17,1
    6b68:	1421c83a 	sub	r16,r2,r16
    6b6c:	24400115 	stw	r17,4(r4)
    6b70:	9009883a 	mov	r4,r18
    6b74:	1c000015 	stw	r16,0(r3)
    6b78:	000f9bc0 	call	f9bc <__malloc_unlock>
    6b7c:	00800044 	movi	r2,1
    6b80:	003fe706 	br	6b20 <_gp+0xfffea9c4>
    6b84:	000b883a 	mov	r5,zero
    6b88:	9009883a 	mov	r4,r18
    6b8c:	0009b0c0 	call	9b0c <_sbrk_r>
    6b90:	99000217 	ldw	r4,8(r19)
    6b94:	014003c4 	movi	r5,15
    6b98:	1107c83a 	sub	r3,r2,r4
    6b9c:	28ffdd0e 	bge	r5,r3,6b14 <_gp+0xfffea9b8>
    6ba0:	01400074 	movhi	r5,1
    6ba4:	29505a04 	addi	r5,r5,16744
    6ba8:	29400017 	ldw	r5,0(r5)
    6bac:	18c00054 	ori	r3,r3,1
    6bb0:	20c00115 	stw	r3,4(r4)
    6bb4:	00c00074 	movhi	r3,1
    6bb8:	1145c83a 	sub	r2,r2,r5
    6bbc:	18d73104 	addi	r3,r3,23748
    6bc0:	18800015 	stw	r2,0(r3)
    6bc4:	003fd306 	br	6b14 <_gp+0xfffea9b8>

00006bc8 <_free_r>:
    6bc8:	28004126 	beq	r5,zero,6cd0 <_free_r+0x108>
    6bcc:	defffd04 	addi	sp,sp,-12
    6bd0:	dc400115 	stw	r17,4(sp)
    6bd4:	dc000015 	stw	r16,0(sp)
    6bd8:	2023883a 	mov	r17,r4
    6bdc:	2821883a 	mov	r16,r5
    6be0:	dfc00215 	stw	ra,8(sp)
    6be4:	000f9980 	call	f998 <__malloc_lock>
    6be8:	81ffff17 	ldw	r7,-4(r16)
    6bec:	00bfff84 	movi	r2,-2
    6bf0:	01000074 	movhi	r4,1
    6bf4:	81bffe04 	addi	r6,r16,-8
    6bf8:	3884703a 	and	r2,r7,r2
    6bfc:	210ad304 	addi	r4,r4,11084
    6c00:	308b883a 	add	r5,r6,r2
    6c04:	2a400117 	ldw	r9,4(r5)
    6c08:	22000217 	ldw	r8,8(r4)
    6c0c:	00ffff04 	movi	r3,-4
    6c10:	48c6703a 	and	r3,r9,r3
    6c14:	2a005726 	beq	r5,r8,6d74 <_free_r+0x1ac>
    6c18:	28c00115 	stw	r3,4(r5)
    6c1c:	39c0004c 	andi	r7,r7,1
    6c20:	3800091e 	bne	r7,zero,6c48 <_free_r+0x80>
    6c24:	823ffe17 	ldw	r8,-8(r16)
    6c28:	22400204 	addi	r9,r4,8
    6c2c:	320dc83a 	sub	r6,r6,r8
    6c30:	31c00217 	ldw	r7,8(r6)
    6c34:	1205883a 	add	r2,r2,r8
    6c38:	3a406526 	beq	r7,r9,6dd0 <_free_r+0x208>
    6c3c:	32000317 	ldw	r8,12(r6)
    6c40:	3a000315 	stw	r8,12(r7)
    6c44:	41c00215 	stw	r7,8(r8)
    6c48:	28cf883a 	add	r7,r5,r3
    6c4c:	39c00117 	ldw	r7,4(r7)
    6c50:	39c0004c 	andi	r7,r7,1
    6c54:	38003a26 	beq	r7,zero,6d40 <_free_r+0x178>
    6c58:	10c00054 	ori	r3,r2,1
    6c5c:	30c00115 	stw	r3,4(r6)
    6c60:	3087883a 	add	r3,r6,r2
    6c64:	18800015 	stw	r2,0(r3)
    6c68:	00c07fc4 	movi	r3,511
    6c6c:	18801936 	bltu	r3,r2,6cd4 <_free_r+0x10c>
    6c70:	1004d0fa 	srli	r2,r2,3
    6c74:	01c00044 	movi	r7,1
    6c78:	21400117 	ldw	r5,4(r4)
    6c7c:	10c00044 	addi	r3,r2,1
    6c80:	18c7883a 	add	r3,r3,r3
    6c84:	1005d0ba 	srai	r2,r2,2
    6c88:	18c7883a 	add	r3,r3,r3
    6c8c:	18c7883a 	add	r3,r3,r3
    6c90:	1907883a 	add	r3,r3,r4
    6c94:	3884983a 	sll	r2,r7,r2
    6c98:	19c00017 	ldw	r7,0(r3)
    6c9c:	1a3ffe04 	addi	r8,r3,-8
    6ca0:	1144b03a 	or	r2,r2,r5
    6ca4:	32000315 	stw	r8,12(r6)
    6ca8:	31c00215 	stw	r7,8(r6)
    6cac:	20800115 	stw	r2,4(r4)
    6cb0:	19800015 	stw	r6,0(r3)
    6cb4:	39800315 	stw	r6,12(r7)
    6cb8:	8809883a 	mov	r4,r17
    6cbc:	dfc00217 	ldw	ra,8(sp)
    6cc0:	dc400117 	ldw	r17,4(sp)
    6cc4:	dc000017 	ldw	r16,0(sp)
    6cc8:	dec00304 	addi	sp,sp,12
    6ccc:	000f9bc1 	jmpi	f9bc <__malloc_unlock>
    6cd0:	f800283a 	ret
    6cd4:	100ad27a 	srli	r5,r2,9
    6cd8:	00c00104 	movi	r3,4
    6cdc:	19404a36 	bltu	r3,r5,6e08 <_free_r+0x240>
    6ce0:	100ad1ba 	srli	r5,r2,6
    6ce4:	28c00e44 	addi	r3,r5,57
    6ce8:	18c7883a 	add	r3,r3,r3
    6cec:	29400e04 	addi	r5,r5,56
    6cf0:	18c7883a 	add	r3,r3,r3
    6cf4:	18c7883a 	add	r3,r3,r3
    6cf8:	1909883a 	add	r4,r3,r4
    6cfc:	20c00017 	ldw	r3,0(r4)
    6d00:	01c00074 	movhi	r7,1
    6d04:	213ffe04 	addi	r4,r4,-8
    6d08:	39cad304 	addi	r7,r7,11084
    6d0c:	20c04426 	beq	r4,r3,6e20 <_free_r+0x258>
    6d10:	01ffff04 	movi	r7,-4
    6d14:	19400117 	ldw	r5,4(r3)
    6d18:	29ca703a 	and	r5,r5,r7
    6d1c:	1140022e 	bgeu	r2,r5,6d28 <_free_r+0x160>
    6d20:	18c00217 	ldw	r3,8(r3)
    6d24:	20fffb1e 	bne	r4,r3,6d14 <_gp+0xfffeabb8>
    6d28:	19000317 	ldw	r4,12(r3)
    6d2c:	31000315 	stw	r4,12(r6)
    6d30:	30c00215 	stw	r3,8(r6)
    6d34:	21800215 	stw	r6,8(r4)
    6d38:	19800315 	stw	r6,12(r3)
    6d3c:	003fde06 	br	6cb8 <_gp+0xfffeab5c>
    6d40:	29c00217 	ldw	r7,8(r5)
    6d44:	10c5883a 	add	r2,r2,r3
    6d48:	00c00074 	movhi	r3,1
    6d4c:	18cad504 	addi	r3,r3,11092
    6d50:	38c03b26 	beq	r7,r3,6e40 <_free_r+0x278>
    6d54:	2a000317 	ldw	r8,12(r5)
    6d58:	11400054 	ori	r5,r2,1
    6d5c:	3087883a 	add	r3,r6,r2
    6d60:	3a000315 	stw	r8,12(r7)
    6d64:	41c00215 	stw	r7,8(r8)
    6d68:	31400115 	stw	r5,4(r6)
    6d6c:	18800015 	stw	r2,0(r3)
    6d70:	003fbd06 	br	6c68 <_gp+0xfffeab0c>
    6d74:	39c0004c 	andi	r7,r7,1
    6d78:	10c5883a 	add	r2,r2,r3
    6d7c:	3800071e 	bne	r7,zero,6d9c <_free_r+0x1d4>
    6d80:	81fffe17 	ldw	r7,-8(r16)
    6d84:	31cdc83a 	sub	r6,r6,r7
    6d88:	30c00317 	ldw	r3,12(r6)
    6d8c:	31400217 	ldw	r5,8(r6)
    6d90:	11c5883a 	add	r2,r2,r7
    6d94:	28c00315 	stw	r3,12(r5)
    6d98:	19400215 	stw	r5,8(r3)
    6d9c:	10c00054 	ori	r3,r2,1
    6da0:	30c00115 	stw	r3,4(r6)
    6da4:	00c00074 	movhi	r3,1
    6da8:	18d05b04 	addi	r3,r3,16748
    6dac:	18c00017 	ldw	r3,0(r3)
    6db0:	21800215 	stw	r6,8(r4)
    6db4:	10ffc036 	bltu	r2,r3,6cb8 <_gp+0xfffeab5c>
    6db8:	00800074 	movhi	r2,1
    6dbc:	10972804 	addi	r2,r2,23712
    6dc0:	11400017 	ldw	r5,0(r2)
    6dc4:	8809883a 	mov	r4,r17
    6dc8:	0006aa40 	call	6aa4 <_malloc_trim_r>
    6dcc:	003fba06 	br	6cb8 <_gp+0xfffeab5c>
    6dd0:	28c9883a 	add	r4,r5,r3
    6dd4:	21000117 	ldw	r4,4(r4)
    6dd8:	2100004c 	andi	r4,r4,1
    6ddc:	2000391e 	bne	r4,zero,6ec4 <_free_r+0x2fc>
    6de0:	29c00217 	ldw	r7,8(r5)
    6de4:	29000317 	ldw	r4,12(r5)
    6de8:	1885883a 	add	r2,r3,r2
    6dec:	10c00054 	ori	r3,r2,1
    6df0:	39000315 	stw	r4,12(r7)
    6df4:	21c00215 	stw	r7,8(r4)
    6df8:	30c00115 	stw	r3,4(r6)
    6dfc:	308d883a 	add	r6,r6,r2
    6e00:	30800015 	stw	r2,0(r6)
    6e04:	003fac06 	br	6cb8 <_gp+0xfffeab5c>
    6e08:	00c00504 	movi	r3,20
    6e0c:	19401536 	bltu	r3,r5,6e64 <_free_r+0x29c>
    6e10:	28c01704 	addi	r3,r5,92
    6e14:	18c7883a 	add	r3,r3,r3
    6e18:	294016c4 	addi	r5,r5,91
    6e1c:	003fb406 	br	6cf0 <_gp+0xfffeab94>
    6e20:	280bd0ba 	srai	r5,r5,2
    6e24:	00c00044 	movi	r3,1
    6e28:	38800117 	ldw	r2,4(r7)
    6e2c:	194a983a 	sll	r5,r3,r5
    6e30:	2007883a 	mov	r3,r4
    6e34:	2884b03a 	or	r2,r5,r2
    6e38:	38800115 	stw	r2,4(r7)
    6e3c:	003fbb06 	br	6d2c <_gp+0xfffeabd0>
    6e40:	21800515 	stw	r6,20(r4)
    6e44:	21800415 	stw	r6,16(r4)
    6e48:	10c00054 	ori	r3,r2,1
    6e4c:	31c00315 	stw	r7,12(r6)
    6e50:	31c00215 	stw	r7,8(r6)
    6e54:	30c00115 	stw	r3,4(r6)
    6e58:	308d883a 	add	r6,r6,r2
    6e5c:	30800015 	stw	r2,0(r6)
    6e60:	003f9506 	br	6cb8 <_gp+0xfffeab5c>
    6e64:	00c01504 	movi	r3,84
    6e68:	19400536 	bltu	r3,r5,6e80 <_free_r+0x2b8>
    6e6c:	100ad33a 	srli	r5,r2,12
    6e70:	28c01bc4 	addi	r3,r5,111
    6e74:	18c7883a 	add	r3,r3,r3
    6e78:	29401b84 	addi	r5,r5,110
    6e7c:	003f9c06 	br	6cf0 <_gp+0xfffeab94>
    6e80:	00c05504 	movi	r3,340
    6e84:	19400536 	bltu	r3,r5,6e9c <_free_r+0x2d4>
    6e88:	100ad3fa 	srli	r5,r2,15
    6e8c:	28c01e04 	addi	r3,r5,120
    6e90:	18c7883a 	add	r3,r3,r3
    6e94:	29401dc4 	addi	r5,r5,119
    6e98:	003f9506 	br	6cf0 <_gp+0xfffeab94>
    6e9c:	00c15504 	movi	r3,1364
    6ea0:	19400536 	bltu	r3,r5,6eb8 <_free_r+0x2f0>
    6ea4:	100ad4ba 	srli	r5,r2,18
    6ea8:	28c01f44 	addi	r3,r5,125
    6eac:	18c7883a 	add	r3,r3,r3
    6eb0:	29401f04 	addi	r5,r5,124
    6eb4:	003f8e06 	br	6cf0 <_gp+0xfffeab94>
    6eb8:	00c03f84 	movi	r3,254
    6ebc:	01401f84 	movi	r5,126
    6ec0:	003f8b06 	br	6cf0 <_gp+0xfffeab94>
    6ec4:	10c00054 	ori	r3,r2,1
    6ec8:	30c00115 	stw	r3,4(r6)
    6ecc:	308d883a 	add	r6,r6,r2
    6ed0:	30800015 	stw	r2,0(r6)
    6ed4:	003f7806 	br	6cb8 <_gp+0xfffeab5c>

00006ed8 <__sfvwrite_r>:
    6ed8:	30800217 	ldw	r2,8(r6)
    6edc:	10006726 	beq	r2,zero,707c <__sfvwrite_r+0x1a4>
    6ee0:	28c0030b 	ldhu	r3,12(r5)
    6ee4:	defff404 	addi	sp,sp,-48
    6ee8:	dd400715 	stw	r21,28(sp)
    6eec:	dd000615 	stw	r20,24(sp)
    6ef0:	dc000215 	stw	r16,8(sp)
    6ef4:	dfc00b15 	stw	ra,44(sp)
    6ef8:	df000a15 	stw	fp,40(sp)
    6efc:	ddc00915 	stw	r23,36(sp)
    6f00:	dd800815 	stw	r22,32(sp)
    6f04:	dcc00515 	stw	r19,20(sp)
    6f08:	dc800415 	stw	r18,16(sp)
    6f0c:	dc400315 	stw	r17,12(sp)
    6f10:	1880020c 	andi	r2,r3,8
    6f14:	2821883a 	mov	r16,r5
    6f18:	202b883a 	mov	r21,r4
    6f1c:	3029883a 	mov	r20,r6
    6f20:	10002726 	beq	r2,zero,6fc0 <__sfvwrite_r+0xe8>
    6f24:	28800417 	ldw	r2,16(r5)
    6f28:	10002526 	beq	r2,zero,6fc0 <__sfvwrite_r+0xe8>
    6f2c:	1880008c 	andi	r2,r3,2
    6f30:	a4400017 	ldw	r17,0(r20)
    6f34:	10002a26 	beq	r2,zero,6fe0 <__sfvwrite_r+0x108>
    6f38:	05a00034 	movhi	r22,32768
    6f3c:	0027883a 	mov	r19,zero
    6f40:	0025883a 	mov	r18,zero
    6f44:	b5bf0004 	addi	r22,r22,-1024
    6f48:	980d883a 	mov	r6,r19
    6f4c:	a809883a 	mov	r4,r21
    6f50:	90004626 	beq	r18,zero,706c <__sfvwrite_r+0x194>
    6f54:	900f883a 	mov	r7,r18
    6f58:	b480022e 	bgeu	r22,r18,6f64 <__sfvwrite_r+0x8c>
    6f5c:	01e00034 	movhi	r7,32768
    6f60:	39ff0004 	addi	r7,r7,-1024
    6f64:	80800917 	ldw	r2,36(r16)
    6f68:	81400717 	ldw	r5,28(r16)
    6f6c:	103ee83a 	callr	r2
    6f70:	00805a0e 	bge	zero,r2,70dc <__sfvwrite_r+0x204>
    6f74:	a0c00217 	ldw	r3,8(r20)
    6f78:	98a7883a 	add	r19,r19,r2
    6f7c:	90a5c83a 	sub	r18,r18,r2
    6f80:	1885c83a 	sub	r2,r3,r2
    6f84:	a0800215 	stw	r2,8(r20)
    6f88:	103fef1e 	bne	r2,zero,6f48 <_gp+0xfffeadec>
    6f8c:	0005883a 	mov	r2,zero
    6f90:	dfc00b17 	ldw	ra,44(sp)
    6f94:	df000a17 	ldw	fp,40(sp)
    6f98:	ddc00917 	ldw	r23,36(sp)
    6f9c:	dd800817 	ldw	r22,32(sp)
    6fa0:	dd400717 	ldw	r21,28(sp)
    6fa4:	dd000617 	ldw	r20,24(sp)
    6fa8:	dcc00517 	ldw	r19,20(sp)
    6fac:	dc800417 	ldw	r18,16(sp)
    6fb0:	dc400317 	ldw	r17,12(sp)
    6fb4:	dc000217 	ldw	r16,8(sp)
    6fb8:	dec00c04 	addi	sp,sp,48
    6fbc:	f800283a 	ret
    6fc0:	800b883a 	mov	r5,r16
    6fc4:	a809883a 	mov	r4,r21
    6fc8:	0004a480 	call	4a48 <__swsetup_r>
    6fcc:	1000ee1e 	bne	r2,zero,7388 <__sfvwrite_r+0x4b0>
    6fd0:	80c0030b 	ldhu	r3,12(r16)
    6fd4:	a4400017 	ldw	r17,0(r20)
    6fd8:	1880008c 	andi	r2,r3,2
    6fdc:	103fd61e 	bne	r2,zero,6f38 <_gp+0xfffeaddc>
    6fe0:	1880004c 	andi	r2,r3,1
    6fe4:	1000421e 	bne	r2,zero,70f0 <__sfvwrite_r+0x218>
    6fe8:	0039883a 	mov	fp,zero
    6fec:	0025883a 	mov	r18,zero
    6ff0:	90001a26 	beq	r18,zero,705c <__sfvwrite_r+0x184>
    6ff4:	1880800c 	andi	r2,r3,512
    6ff8:	84c00217 	ldw	r19,8(r16)
    6ffc:	10002126 	beq	r2,zero,7084 <__sfvwrite_r+0x1ac>
    7000:	982f883a 	mov	r23,r19
    7004:	94c09636 	bltu	r18,r19,7260 <__sfvwrite_r+0x388>
    7008:	1881200c 	andi	r2,r3,1152
    700c:	1000a11e 	bne	r2,zero,7294 <__sfvwrite_r+0x3bc>
    7010:	81000017 	ldw	r4,0(r16)
    7014:	b80d883a 	mov	r6,r23
    7018:	e00b883a 	mov	r5,fp
    701c:	00081f80 	call	81f8 <memmove>
    7020:	80c00217 	ldw	r3,8(r16)
    7024:	81000017 	ldw	r4,0(r16)
    7028:	9005883a 	mov	r2,r18
    702c:	1ce7c83a 	sub	r19,r3,r19
    7030:	25cf883a 	add	r7,r4,r23
    7034:	84c00215 	stw	r19,8(r16)
    7038:	81c00015 	stw	r7,0(r16)
    703c:	a0c00217 	ldw	r3,8(r20)
    7040:	e0b9883a 	add	fp,fp,r2
    7044:	90a5c83a 	sub	r18,r18,r2
    7048:	18a7c83a 	sub	r19,r3,r2
    704c:	a4c00215 	stw	r19,8(r20)
    7050:	983fce26 	beq	r19,zero,6f8c <_gp+0xfffeae30>
    7054:	80c0030b 	ldhu	r3,12(r16)
    7058:	903fe61e 	bne	r18,zero,6ff4 <_gp+0xfffeae98>
    705c:	8f000017 	ldw	fp,0(r17)
    7060:	8c800117 	ldw	r18,4(r17)
    7064:	8c400204 	addi	r17,r17,8
    7068:	003fe106 	br	6ff0 <_gp+0xfffeae94>
    706c:	8cc00017 	ldw	r19,0(r17)
    7070:	8c800117 	ldw	r18,4(r17)
    7074:	8c400204 	addi	r17,r17,8
    7078:	003fb306 	br	6f48 <_gp+0xfffeadec>
    707c:	0005883a 	mov	r2,zero
    7080:	f800283a 	ret
    7084:	81000017 	ldw	r4,0(r16)
    7088:	80800417 	ldw	r2,16(r16)
    708c:	11005a36 	bltu	r2,r4,71f8 <__sfvwrite_r+0x320>
    7090:	85c00517 	ldw	r23,20(r16)
    7094:	95c05836 	bltu	r18,r23,71f8 <__sfvwrite_r+0x320>
    7098:	00a00034 	movhi	r2,32768
    709c:	10bfffc4 	addi	r2,r2,-1
    70a0:	9009883a 	mov	r4,r18
    70a4:	1480012e 	bgeu	r2,r18,70ac <__sfvwrite_r+0x1d4>
    70a8:	1009883a 	mov	r4,r2
    70ac:	b80b883a 	mov	r5,r23
    70b0:	000c97c0 	call	c97c <__divsi3>
    70b4:	b80b883a 	mov	r5,r23
    70b8:	1009883a 	mov	r4,r2
    70bc:	000cb300 	call	cb30 <__mulsi3>
    70c0:	81400717 	ldw	r5,28(r16)
    70c4:	80c00917 	ldw	r3,36(r16)
    70c8:	100f883a 	mov	r7,r2
    70cc:	e00d883a 	mov	r6,fp
    70d0:	a809883a 	mov	r4,r21
    70d4:	183ee83a 	callr	r3
    70d8:	00bfd816 	blt	zero,r2,703c <_gp+0xfffeaee0>
    70dc:	8080030b 	ldhu	r2,12(r16)
    70e0:	10801014 	ori	r2,r2,64
    70e4:	8080030d 	sth	r2,12(r16)
    70e8:	00bfffc4 	movi	r2,-1
    70ec:	003fa806 	br	6f90 <_gp+0xfffeae34>
    70f0:	0027883a 	mov	r19,zero
    70f4:	0011883a 	mov	r8,zero
    70f8:	0039883a 	mov	fp,zero
    70fc:	0025883a 	mov	r18,zero
    7100:	90001f26 	beq	r18,zero,7180 <__sfvwrite_r+0x2a8>
    7104:	40005a26 	beq	r8,zero,7270 <__sfvwrite_r+0x398>
    7108:	982d883a 	mov	r22,r19
    710c:	94c0012e 	bgeu	r18,r19,7114 <__sfvwrite_r+0x23c>
    7110:	902d883a 	mov	r22,r18
    7114:	81000017 	ldw	r4,0(r16)
    7118:	80800417 	ldw	r2,16(r16)
    711c:	b02f883a 	mov	r23,r22
    7120:	81c00517 	ldw	r7,20(r16)
    7124:	1100032e 	bgeu	r2,r4,7134 <__sfvwrite_r+0x25c>
    7128:	80c00217 	ldw	r3,8(r16)
    712c:	38c7883a 	add	r3,r7,r3
    7130:	1d801816 	blt	r3,r22,7194 <__sfvwrite_r+0x2bc>
    7134:	b1c03e16 	blt	r22,r7,7230 <__sfvwrite_r+0x358>
    7138:	80800917 	ldw	r2,36(r16)
    713c:	81400717 	ldw	r5,28(r16)
    7140:	e00d883a 	mov	r6,fp
    7144:	da000115 	stw	r8,4(sp)
    7148:	a809883a 	mov	r4,r21
    714c:	103ee83a 	callr	r2
    7150:	102f883a 	mov	r23,r2
    7154:	da000117 	ldw	r8,4(sp)
    7158:	00bfe00e 	bge	zero,r2,70dc <_gp+0xfffeaf80>
    715c:	9de7c83a 	sub	r19,r19,r23
    7160:	98001f26 	beq	r19,zero,71e0 <__sfvwrite_r+0x308>
    7164:	a0800217 	ldw	r2,8(r20)
    7168:	e5f9883a 	add	fp,fp,r23
    716c:	95e5c83a 	sub	r18,r18,r23
    7170:	15efc83a 	sub	r23,r2,r23
    7174:	a5c00215 	stw	r23,8(r20)
    7178:	b83f8426 	beq	r23,zero,6f8c <_gp+0xfffeae30>
    717c:	903fe11e 	bne	r18,zero,7104 <_gp+0xfffeafa8>
    7180:	8f000017 	ldw	fp,0(r17)
    7184:	8c800117 	ldw	r18,4(r17)
    7188:	0011883a 	mov	r8,zero
    718c:	8c400204 	addi	r17,r17,8
    7190:	003fdb06 	br	7100 <_gp+0xfffeafa4>
    7194:	180d883a 	mov	r6,r3
    7198:	e00b883a 	mov	r5,fp
    719c:	da000115 	stw	r8,4(sp)
    71a0:	d8c00015 	stw	r3,0(sp)
    71a4:	00081f80 	call	81f8 <memmove>
    71a8:	d8c00017 	ldw	r3,0(sp)
    71ac:	80800017 	ldw	r2,0(r16)
    71b0:	800b883a 	mov	r5,r16
    71b4:	a809883a 	mov	r4,r21
    71b8:	10c5883a 	add	r2,r2,r3
    71bc:	80800015 	stw	r2,0(r16)
    71c0:	d8c00015 	stw	r3,0(sp)
    71c4:	00066680 	call	6668 <_fflush_r>
    71c8:	d8c00017 	ldw	r3,0(sp)
    71cc:	da000117 	ldw	r8,4(sp)
    71d0:	103fc21e 	bne	r2,zero,70dc <_gp+0xfffeaf80>
    71d4:	182f883a 	mov	r23,r3
    71d8:	9de7c83a 	sub	r19,r19,r23
    71dc:	983fe11e 	bne	r19,zero,7164 <_gp+0xfffeb008>
    71e0:	800b883a 	mov	r5,r16
    71e4:	a809883a 	mov	r4,r21
    71e8:	00066680 	call	6668 <_fflush_r>
    71ec:	103fbb1e 	bne	r2,zero,70dc <_gp+0xfffeaf80>
    71f0:	0011883a 	mov	r8,zero
    71f4:	003fdb06 	br	7164 <_gp+0xfffeb008>
    71f8:	94c0012e 	bgeu	r18,r19,7200 <__sfvwrite_r+0x328>
    71fc:	9027883a 	mov	r19,r18
    7200:	980d883a 	mov	r6,r19
    7204:	e00b883a 	mov	r5,fp
    7208:	00081f80 	call	81f8 <memmove>
    720c:	80800217 	ldw	r2,8(r16)
    7210:	80c00017 	ldw	r3,0(r16)
    7214:	14c5c83a 	sub	r2,r2,r19
    7218:	1cc7883a 	add	r3,r3,r19
    721c:	80800215 	stw	r2,8(r16)
    7220:	80c00015 	stw	r3,0(r16)
    7224:	10004326 	beq	r2,zero,7334 <__sfvwrite_r+0x45c>
    7228:	9805883a 	mov	r2,r19
    722c:	003f8306 	br	703c <_gp+0xfffeaee0>
    7230:	b00d883a 	mov	r6,r22
    7234:	e00b883a 	mov	r5,fp
    7238:	da000115 	stw	r8,4(sp)
    723c:	00081f80 	call	81f8 <memmove>
    7240:	80800217 	ldw	r2,8(r16)
    7244:	80c00017 	ldw	r3,0(r16)
    7248:	da000117 	ldw	r8,4(sp)
    724c:	1585c83a 	sub	r2,r2,r22
    7250:	1dad883a 	add	r22,r3,r22
    7254:	80800215 	stw	r2,8(r16)
    7258:	85800015 	stw	r22,0(r16)
    725c:	003fbf06 	br	715c <_gp+0xfffeb000>
    7260:	81000017 	ldw	r4,0(r16)
    7264:	9027883a 	mov	r19,r18
    7268:	902f883a 	mov	r23,r18
    726c:	003f6906 	br	7014 <_gp+0xfffeaeb8>
    7270:	900d883a 	mov	r6,r18
    7274:	01400284 	movi	r5,10
    7278:	e009883a 	mov	r4,fp
    727c:	0007fcc0 	call	7fcc <memchr>
    7280:	10003e26 	beq	r2,zero,737c <__sfvwrite_r+0x4a4>
    7284:	10800044 	addi	r2,r2,1
    7288:	1727c83a 	sub	r19,r2,fp
    728c:	02000044 	movi	r8,1
    7290:	003f9d06 	br	7108 <_gp+0xfffeafac>
    7294:	80800517 	ldw	r2,20(r16)
    7298:	81400417 	ldw	r5,16(r16)
    729c:	81c00017 	ldw	r7,0(r16)
    72a0:	10a7883a 	add	r19,r2,r2
    72a4:	9885883a 	add	r2,r19,r2
    72a8:	1026d7fa 	srli	r19,r2,31
    72ac:	396dc83a 	sub	r22,r7,r5
    72b0:	b1000044 	addi	r4,r22,1
    72b4:	9885883a 	add	r2,r19,r2
    72b8:	1027d07a 	srai	r19,r2,1
    72bc:	2485883a 	add	r2,r4,r18
    72c0:	980d883a 	mov	r6,r19
    72c4:	9880022e 	bgeu	r19,r2,72d0 <__sfvwrite_r+0x3f8>
    72c8:	1027883a 	mov	r19,r2
    72cc:	100d883a 	mov	r6,r2
    72d0:	18c1000c 	andi	r3,r3,1024
    72d4:	18001c26 	beq	r3,zero,7348 <__sfvwrite_r+0x470>
    72d8:	300b883a 	mov	r5,r6
    72dc:	a809883a 	mov	r4,r21
    72e0:	00077c00 	call	77c0 <_malloc_r>
    72e4:	102f883a 	mov	r23,r2
    72e8:	10002926 	beq	r2,zero,7390 <__sfvwrite_r+0x4b8>
    72ec:	81400417 	ldw	r5,16(r16)
    72f0:	b00d883a 	mov	r6,r22
    72f4:	1009883a 	mov	r4,r2
    72f8:	00080b00 	call	80b0 <memcpy>
    72fc:	8080030b 	ldhu	r2,12(r16)
    7300:	00fedfc4 	movi	r3,-1153
    7304:	10c4703a 	and	r2,r2,r3
    7308:	10802014 	ori	r2,r2,128
    730c:	8080030d 	sth	r2,12(r16)
    7310:	bd89883a 	add	r4,r23,r22
    7314:	9d8fc83a 	sub	r7,r19,r22
    7318:	85c00415 	stw	r23,16(r16)
    731c:	84c00515 	stw	r19,20(r16)
    7320:	81000015 	stw	r4,0(r16)
    7324:	9027883a 	mov	r19,r18
    7328:	81c00215 	stw	r7,8(r16)
    732c:	902f883a 	mov	r23,r18
    7330:	003f3806 	br	7014 <_gp+0xfffeaeb8>
    7334:	800b883a 	mov	r5,r16
    7338:	a809883a 	mov	r4,r21
    733c:	00066680 	call	6668 <_fflush_r>
    7340:	103fb926 	beq	r2,zero,7228 <_gp+0xfffeb0cc>
    7344:	003f6506 	br	70dc <_gp+0xfffeaf80>
    7348:	a809883a 	mov	r4,r21
    734c:	00095340 	call	9534 <_realloc_r>
    7350:	102f883a 	mov	r23,r2
    7354:	103fee1e 	bne	r2,zero,7310 <_gp+0xfffeb1b4>
    7358:	81400417 	ldw	r5,16(r16)
    735c:	a809883a 	mov	r4,r21
    7360:	0006bc80 	call	6bc8 <_free_r>
    7364:	8080030b 	ldhu	r2,12(r16)
    7368:	00ffdfc4 	movi	r3,-129
    736c:	1884703a 	and	r2,r3,r2
    7370:	00c00304 	movi	r3,12
    7374:	a8c00015 	stw	r3,0(r21)
    7378:	003f5906 	br	70e0 <_gp+0xfffeaf84>
    737c:	94c00044 	addi	r19,r18,1
    7380:	02000044 	movi	r8,1
    7384:	003f6006 	br	7108 <_gp+0xfffeafac>
    7388:	00bfffc4 	movi	r2,-1
    738c:	003f0006 	br	6f90 <_gp+0xfffeae34>
    7390:	00800304 	movi	r2,12
    7394:	a8800015 	stw	r2,0(r21)
    7398:	8080030b 	ldhu	r2,12(r16)
    739c:	003f5006 	br	70e0 <_gp+0xfffeaf84>

000073a0 <_fwalk>:
    73a0:	defff704 	addi	sp,sp,-36
    73a4:	dd000415 	stw	r20,16(sp)
    73a8:	dfc00815 	stw	ra,32(sp)
    73ac:	ddc00715 	stw	r23,28(sp)
    73b0:	dd800615 	stw	r22,24(sp)
    73b4:	dd400515 	stw	r21,20(sp)
    73b8:	dcc00315 	stw	r19,12(sp)
    73bc:	dc800215 	stw	r18,8(sp)
    73c0:	dc400115 	stw	r17,4(sp)
    73c4:	dc000015 	stw	r16,0(sp)
    73c8:	2500b804 	addi	r20,r4,736
    73cc:	a0002326 	beq	r20,zero,745c <_fwalk+0xbc>
    73d0:	282b883a 	mov	r21,r5
    73d4:	002f883a 	mov	r23,zero
    73d8:	05800044 	movi	r22,1
    73dc:	04ffffc4 	movi	r19,-1
    73e0:	a4400117 	ldw	r17,4(r20)
    73e4:	a4800217 	ldw	r18,8(r20)
    73e8:	8c7fffc4 	addi	r17,r17,-1
    73ec:	88000d16 	blt	r17,zero,7424 <_fwalk+0x84>
    73f0:	94000304 	addi	r16,r18,12
    73f4:	94800384 	addi	r18,r18,14
    73f8:	8080000b 	ldhu	r2,0(r16)
    73fc:	8c7fffc4 	addi	r17,r17,-1
    7400:	813ffd04 	addi	r4,r16,-12
    7404:	b080042e 	bgeu	r22,r2,7418 <_fwalk+0x78>
    7408:	9080000f 	ldh	r2,0(r18)
    740c:	14c00226 	beq	r2,r19,7418 <_fwalk+0x78>
    7410:	a83ee83a 	callr	r21
    7414:	b8aeb03a 	or	r23,r23,r2
    7418:	84001a04 	addi	r16,r16,104
    741c:	94801a04 	addi	r18,r18,104
    7420:	8cfff51e 	bne	r17,r19,73f8 <_gp+0xfffeb29c>
    7424:	a5000017 	ldw	r20,0(r20)
    7428:	a03fed1e 	bne	r20,zero,73e0 <_gp+0xfffeb284>
    742c:	b805883a 	mov	r2,r23
    7430:	dfc00817 	ldw	ra,32(sp)
    7434:	ddc00717 	ldw	r23,28(sp)
    7438:	dd800617 	ldw	r22,24(sp)
    743c:	dd400517 	ldw	r21,20(sp)
    7440:	dd000417 	ldw	r20,16(sp)
    7444:	dcc00317 	ldw	r19,12(sp)
    7448:	dc800217 	ldw	r18,8(sp)
    744c:	dc400117 	ldw	r17,4(sp)
    7450:	dc000017 	ldw	r16,0(sp)
    7454:	dec00904 	addi	sp,sp,36
    7458:	f800283a 	ret
    745c:	002f883a 	mov	r23,zero
    7460:	003ff206 	br	742c <_gp+0xfffeb2d0>

00007464 <_fwalk_reent>:
    7464:	defff704 	addi	sp,sp,-36
    7468:	dd000415 	stw	r20,16(sp)
    746c:	dfc00815 	stw	ra,32(sp)
    7470:	ddc00715 	stw	r23,28(sp)
    7474:	dd800615 	stw	r22,24(sp)
    7478:	dd400515 	stw	r21,20(sp)
    747c:	dcc00315 	stw	r19,12(sp)
    7480:	dc800215 	stw	r18,8(sp)
    7484:	dc400115 	stw	r17,4(sp)
    7488:	dc000015 	stw	r16,0(sp)
    748c:	2500b804 	addi	r20,r4,736
    7490:	a0002326 	beq	r20,zero,7520 <_fwalk_reent+0xbc>
    7494:	282b883a 	mov	r21,r5
    7498:	2027883a 	mov	r19,r4
    749c:	002f883a 	mov	r23,zero
    74a0:	05800044 	movi	r22,1
    74a4:	04bfffc4 	movi	r18,-1
    74a8:	a4400117 	ldw	r17,4(r20)
    74ac:	a4000217 	ldw	r16,8(r20)
    74b0:	8c7fffc4 	addi	r17,r17,-1
    74b4:	88000c16 	blt	r17,zero,74e8 <_fwalk_reent+0x84>
    74b8:	84000304 	addi	r16,r16,12
    74bc:	8080000b 	ldhu	r2,0(r16)
    74c0:	8c7fffc4 	addi	r17,r17,-1
    74c4:	817ffd04 	addi	r5,r16,-12
    74c8:	b080052e 	bgeu	r22,r2,74e0 <_fwalk_reent+0x7c>
    74cc:	8080008f 	ldh	r2,2(r16)
    74d0:	9809883a 	mov	r4,r19
    74d4:	14800226 	beq	r2,r18,74e0 <_fwalk_reent+0x7c>
    74d8:	a83ee83a 	callr	r21
    74dc:	b8aeb03a 	or	r23,r23,r2
    74e0:	84001a04 	addi	r16,r16,104
    74e4:	8cbff51e 	bne	r17,r18,74bc <_gp+0xfffeb360>
    74e8:	a5000017 	ldw	r20,0(r20)
    74ec:	a03fee1e 	bne	r20,zero,74a8 <_gp+0xfffeb34c>
    74f0:	b805883a 	mov	r2,r23
    74f4:	dfc00817 	ldw	ra,32(sp)
    74f8:	ddc00717 	ldw	r23,28(sp)
    74fc:	dd800617 	ldw	r22,24(sp)
    7500:	dd400517 	ldw	r21,20(sp)
    7504:	dd000417 	ldw	r20,16(sp)
    7508:	dcc00317 	ldw	r19,12(sp)
    750c:	dc800217 	ldw	r18,8(sp)
    7510:	dc400117 	ldw	r17,4(sp)
    7514:	dc000017 	ldw	r16,0(sp)
    7518:	dec00904 	addi	sp,sp,36
    751c:	f800283a 	ret
    7520:	002f883a 	mov	r23,zero
    7524:	003ff206 	br	74f0 <_gp+0xfffeb394>

00007528 <_setlocale_r>:
    7528:	30001b26 	beq	r6,zero,7598 <_setlocale_r+0x70>
    752c:	01400074 	movhi	r5,1
    7530:	defffe04 	addi	sp,sp,-8
    7534:	29490b04 	addi	r5,r5,9260
    7538:	3009883a 	mov	r4,r6
    753c:	dc000015 	stw	r16,0(sp)
    7540:	dfc00115 	stw	ra,4(sp)
    7544:	3021883a 	mov	r16,r6
    7548:	0009c9c0 	call	9c9c <strcmp>
    754c:	1000061e 	bne	r2,zero,7568 <_setlocale_r+0x40>
    7550:	00800074 	movhi	r2,1
    7554:	10890a04 	addi	r2,r2,9256
    7558:	dfc00117 	ldw	ra,4(sp)
    755c:	dc000017 	ldw	r16,0(sp)
    7560:	dec00204 	addi	sp,sp,8
    7564:	f800283a 	ret
    7568:	01400074 	movhi	r5,1
    756c:	29490a04 	addi	r5,r5,9256
    7570:	8009883a 	mov	r4,r16
    7574:	0009c9c0 	call	9c9c <strcmp>
    7578:	103ff526 	beq	r2,zero,7550 <_gp+0xfffeb3f4>
    757c:	01400074 	movhi	r5,1
    7580:	2948f504 	addi	r5,r5,9172
    7584:	8009883a 	mov	r4,r16
    7588:	0009c9c0 	call	9c9c <strcmp>
    758c:	103ff026 	beq	r2,zero,7550 <_gp+0xfffeb3f4>
    7590:	0005883a 	mov	r2,zero
    7594:	003ff006 	br	7558 <_gp+0xfffeb3fc>
    7598:	00800074 	movhi	r2,1
    759c:	10890a04 	addi	r2,r2,9256
    75a0:	f800283a 	ret

000075a4 <__locale_charset>:
    75a4:	00800074 	movhi	r2,1
    75a8:	108abd04 	addi	r2,r2,10996
    75ac:	f800283a 	ret

000075b0 <__locale_mb_cur_max>:
    75b0:	00800074 	movhi	r2,1
    75b4:	10905904 	addi	r2,r2,16740
    75b8:	10800017 	ldw	r2,0(r2)
    75bc:	f800283a 	ret

000075c0 <__locale_msgcharset>:
    75c0:	00800074 	movhi	r2,1
    75c4:	108ab504 	addi	r2,r2,10964
    75c8:	f800283a 	ret

000075cc <__locale_cjk_lang>:
    75cc:	0005883a 	mov	r2,zero
    75d0:	f800283a 	ret

000075d4 <_localeconv_r>:
    75d4:	00800074 	movhi	r2,1
    75d8:	108ac504 	addi	r2,r2,11028
    75dc:	f800283a 	ret

000075e0 <setlocale>:
    75e0:	00800074 	movhi	r2,1
    75e4:	10905804 	addi	r2,r2,16736
    75e8:	280d883a 	mov	r6,r5
    75ec:	200b883a 	mov	r5,r4
    75f0:	11000017 	ldw	r4,0(r2)
    75f4:	00075281 	jmpi	7528 <_setlocale_r>

000075f8 <localeconv>:
    75f8:	00800074 	movhi	r2,1
    75fc:	108ac504 	addi	r2,r2,11028
    7600:	f800283a 	ret

00007604 <__smakebuf_r>:
    7604:	2880030b 	ldhu	r2,12(r5)
    7608:	10c0008c 	andi	r3,r2,2
    760c:	1800411e 	bne	r3,zero,7714 <__smakebuf_r+0x110>
    7610:	deffec04 	addi	sp,sp,-80
    7614:	dc000f15 	stw	r16,60(sp)
    7618:	2821883a 	mov	r16,r5
    761c:	2940038f 	ldh	r5,14(r5)
    7620:	dc401015 	stw	r17,64(sp)
    7624:	dfc01315 	stw	ra,76(sp)
    7628:	dcc01215 	stw	r19,72(sp)
    762c:	dc801115 	stw	r18,68(sp)
    7630:	2023883a 	mov	r17,r4
    7634:	28001c16 	blt	r5,zero,76a8 <__smakebuf_r+0xa4>
    7638:	d80d883a 	mov	r6,sp
    763c:	000b90c0 	call	b90c <_fstat_r>
    7640:	10001816 	blt	r2,zero,76a4 <__smakebuf_r+0xa0>
    7644:	d8800117 	ldw	r2,4(sp)
    7648:	00e00014 	movui	r3,32768
    764c:	10bc000c 	andi	r2,r2,61440
    7650:	14c80020 	cmpeqi	r19,r2,8192
    7654:	10c03726 	beq	r2,r3,7734 <__smakebuf_r+0x130>
    7658:	80c0030b 	ldhu	r3,12(r16)
    765c:	18c20014 	ori	r3,r3,2048
    7660:	80c0030d 	sth	r3,12(r16)
    7664:	00c80004 	movi	r3,8192
    7668:	10c0521e 	bne	r2,r3,77b4 <__smakebuf_r+0x1b0>
    766c:	8140038f 	ldh	r5,14(r16)
    7670:	8809883a 	mov	r4,r17
    7674:	000b9680 	call	b968 <_isatty_r>
    7678:	10004c26 	beq	r2,zero,77ac <__smakebuf_r+0x1a8>
    767c:	8080030b 	ldhu	r2,12(r16)
    7680:	80c010c4 	addi	r3,r16,67
    7684:	80c00015 	stw	r3,0(r16)
    7688:	10800054 	ori	r2,r2,1
    768c:	8080030d 	sth	r2,12(r16)
    7690:	00800044 	movi	r2,1
    7694:	80c00415 	stw	r3,16(r16)
    7698:	80800515 	stw	r2,20(r16)
    769c:	04810004 	movi	r18,1024
    76a0:	00000706 	br	76c0 <__smakebuf_r+0xbc>
    76a4:	8080030b 	ldhu	r2,12(r16)
    76a8:	10c0200c 	andi	r3,r2,128
    76ac:	18001f1e 	bne	r3,zero,772c <__smakebuf_r+0x128>
    76b0:	04810004 	movi	r18,1024
    76b4:	10820014 	ori	r2,r2,2048
    76b8:	8080030d 	sth	r2,12(r16)
    76bc:	0027883a 	mov	r19,zero
    76c0:	900b883a 	mov	r5,r18
    76c4:	8809883a 	mov	r4,r17
    76c8:	00077c00 	call	77c0 <_malloc_r>
    76cc:	10002c26 	beq	r2,zero,7780 <__smakebuf_r+0x17c>
    76d0:	80c0030b 	ldhu	r3,12(r16)
    76d4:	01000034 	movhi	r4,0
    76d8:	2119bf04 	addi	r4,r4,26364
    76dc:	89000f15 	stw	r4,60(r17)
    76e0:	18c02014 	ori	r3,r3,128
    76e4:	80c0030d 	sth	r3,12(r16)
    76e8:	80800015 	stw	r2,0(r16)
    76ec:	80800415 	stw	r2,16(r16)
    76f0:	84800515 	stw	r18,20(r16)
    76f4:	98001a1e 	bne	r19,zero,7760 <__smakebuf_r+0x15c>
    76f8:	dfc01317 	ldw	ra,76(sp)
    76fc:	dcc01217 	ldw	r19,72(sp)
    7700:	dc801117 	ldw	r18,68(sp)
    7704:	dc401017 	ldw	r17,64(sp)
    7708:	dc000f17 	ldw	r16,60(sp)
    770c:	dec01404 	addi	sp,sp,80
    7710:	f800283a 	ret
    7714:	288010c4 	addi	r2,r5,67
    7718:	28800015 	stw	r2,0(r5)
    771c:	28800415 	stw	r2,16(r5)
    7720:	00800044 	movi	r2,1
    7724:	28800515 	stw	r2,20(r5)
    7728:	f800283a 	ret
    772c:	04801004 	movi	r18,64
    7730:	003fe006 	br	76b4 <_gp+0xfffeb558>
    7734:	81000a17 	ldw	r4,40(r16)
    7738:	00c00074 	movhi	r3,1
    773c:	18e70e04 	addi	r3,r3,-25544
    7740:	20ffc51e 	bne	r4,r3,7658 <_gp+0xfffeb4fc>
    7744:	8080030b 	ldhu	r2,12(r16)
    7748:	04810004 	movi	r18,1024
    774c:	84801315 	stw	r18,76(r16)
    7750:	1484b03a 	or	r2,r2,r18
    7754:	8080030d 	sth	r2,12(r16)
    7758:	0027883a 	mov	r19,zero
    775c:	003fd806 	br	76c0 <_gp+0xfffeb564>
    7760:	8140038f 	ldh	r5,14(r16)
    7764:	8809883a 	mov	r4,r17
    7768:	000b9680 	call	b968 <_isatty_r>
    776c:	103fe226 	beq	r2,zero,76f8 <_gp+0xfffeb59c>
    7770:	8080030b 	ldhu	r2,12(r16)
    7774:	10800054 	ori	r2,r2,1
    7778:	8080030d 	sth	r2,12(r16)
    777c:	003fde06 	br	76f8 <_gp+0xfffeb59c>
    7780:	8080030b 	ldhu	r2,12(r16)
    7784:	10c0800c 	andi	r3,r2,512
    7788:	183fdb1e 	bne	r3,zero,76f8 <_gp+0xfffeb59c>
    778c:	10800094 	ori	r2,r2,2
    7790:	80c010c4 	addi	r3,r16,67
    7794:	8080030d 	sth	r2,12(r16)
    7798:	00800044 	movi	r2,1
    779c:	80c00015 	stw	r3,0(r16)
    77a0:	80c00415 	stw	r3,16(r16)
    77a4:	80800515 	stw	r2,20(r16)
    77a8:	003fd306 	br	76f8 <_gp+0xfffeb59c>
    77ac:	04810004 	movi	r18,1024
    77b0:	003fc306 	br	76c0 <_gp+0xfffeb564>
    77b4:	0027883a 	mov	r19,zero
    77b8:	04810004 	movi	r18,1024
    77bc:	003fc006 	br	76c0 <_gp+0xfffeb564>

000077c0 <_malloc_r>:
    77c0:	defff504 	addi	sp,sp,-44
    77c4:	dc800315 	stw	r18,12(sp)
    77c8:	dfc00a15 	stw	ra,40(sp)
    77cc:	df000915 	stw	fp,36(sp)
    77d0:	ddc00815 	stw	r23,32(sp)
    77d4:	dd800715 	stw	r22,28(sp)
    77d8:	dd400615 	stw	r21,24(sp)
    77dc:	dd000515 	stw	r20,20(sp)
    77e0:	dcc00415 	stw	r19,16(sp)
    77e4:	dc400215 	stw	r17,8(sp)
    77e8:	dc000115 	stw	r16,4(sp)
    77ec:	288002c4 	addi	r2,r5,11
    77f0:	00c00584 	movi	r3,22
    77f4:	2025883a 	mov	r18,r4
    77f8:	18807f2e 	bgeu	r3,r2,79f8 <_malloc_r+0x238>
    77fc:	047ffe04 	movi	r17,-8
    7800:	1462703a 	and	r17,r2,r17
    7804:	8800a316 	blt	r17,zero,7a94 <_malloc_r+0x2d4>
    7808:	8940a236 	bltu	r17,r5,7a94 <_malloc_r+0x2d4>
    780c:	000f9980 	call	f998 <__malloc_lock>
    7810:	00807dc4 	movi	r2,503
    7814:	1441e92e 	bgeu	r2,r17,7fbc <_malloc_r+0x7fc>
    7818:	8804d27a 	srli	r2,r17,9
    781c:	1000a126 	beq	r2,zero,7aa4 <_malloc_r+0x2e4>
    7820:	00c00104 	movi	r3,4
    7824:	18811e36 	bltu	r3,r2,7ca0 <_malloc_r+0x4e0>
    7828:	8804d1ba 	srli	r2,r17,6
    782c:	12000e44 	addi	r8,r2,57
    7830:	11c00e04 	addi	r7,r2,56
    7834:	4209883a 	add	r4,r8,r8
    7838:	04c00074 	movhi	r19,1
    783c:	2109883a 	add	r4,r4,r4
    7840:	9ccad304 	addi	r19,r19,11084
    7844:	2109883a 	add	r4,r4,r4
    7848:	9909883a 	add	r4,r19,r4
    784c:	24000117 	ldw	r16,4(r4)
    7850:	213ffe04 	addi	r4,r4,-8
    7854:	24009726 	beq	r4,r16,7ab4 <_malloc_r+0x2f4>
    7858:	80800117 	ldw	r2,4(r16)
    785c:	01bfff04 	movi	r6,-4
    7860:	014003c4 	movi	r5,15
    7864:	1184703a 	and	r2,r2,r6
    7868:	1447c83a 	sub	r3,r2,r17
    786c:	28c00716 	blt	r5,r3,788c <_malloc_r+0xcc>
    7870:	1800920e 	bge	r3,zero,7abc <_malloc_r+0x2fc>
    7874:	84000317 	ldw	r16,12(r16)
    7878:	24008e26 	beq	r4,r16,7ab4 <_malloc_r+0x2f4>
    787c:	80800117 	ldw	r2,4(r16)
    7880:	1184703a 	and	r2,r2,r6
    7884:	1447c83a 	sub	r3,r2,r17
    7888:	28fff90e 	bge	r5,r3,7870 <_gp+0xfffeb714>
    788c:	3809883a 	mov	r4,r7
    7890:	01800074 	movhi	r6,1
    7894:	9c000417 	ldw	r16,16(r19)
    7898:	318ad304 	addi	r6,r6,11084
    789c:	32000204 	addi	r8,r6,8
    78a0:	82013426 	beq	r16,r8,7d74 <_malloc_r+0x5b4>
    78a4:	80c00117 	ldw	r3,4(r16)
    78a8:	00bfff04 	movi	r2,-4
    78ac:	188e703a 	and	r7,r3,r2
    78b0:	3c45c83a 	sub	r2,r7,r17
    78b4:	00c003c4 	movi	r3,15
    78b8:	18811f16 	blt	r3,r2,7d38 <_malloc_r+0x578>
    78bc:	32000515 	stw	r8,20(r6)
    78c0:	32000415 	stw	r8,16(r6)
    78c4:	10007f0e 	bge	r2,zero,7ac4 <_malloc_r+0x304>
    78c8:	00807fc4 	movi	r2,511
    78cc:	11c0fd36 	bltu	r2,r7,7cc4 <_malloc_r+0x504>
    78d0:	3806d0fa 	srli	r3,r7,3
    78d4:	01c00044 	movi	r7,1
    78d8:	30800117 	ldw	r2,4(r6)
    78dc:	19400044 	addi	r5,r3,1
    78e0:	294b883a 	add	r5,r5,r5
    78e4:	1807d0ba 	srai	r3,r3,2
    78e8:	294b883a 	add	r5,r5,r5
    78ec:	294b883a 	add	r5,r5,r5
    78f0:	298b883a 	add	r5,r5,r6
    78f4:	38c6983a 	sll	r3,r7,r3
    78f8:	29c00017 	ldw	r7,0(r5)
    78fc:	2a7ffe04 	addi	r9,r5,-8
    7900:	1886b03a 	or	r3,r3,r2
    7904:	82400315 	stw	r9,12(r16)
    7908:	81c00215 	stw	r7,8(r16)
    790c:	30c00115 	stw	r3,4(r6)
    7910:	2c000015 	stw	r16,0(r5)
    7914:	3c000315 	stw	r16,12(r7)
    7918:	2005d0ba 	srai	r2,r4,2
    791c:	01400044 	movi	r5,1
    7920:	288a983a 	sll	r5,r5,r2
    7924:	19406f36 	bltu	r3,r5,7ae4 <_malloc_r+0x324>
    7928:	28c4703a 	and	r2,r5,r3
    792c:	10000a1e 	bne	r2,zero,7958 <_malloc_r+0x198>
    7930:	00bfff04 	movi	r2,-4
    7934:	294b883a 	add	r5,r5,r5
    7938:	2088703a 	and	r4,r4,r2
    793c:	28c4703a 	and	r2,r5,r3
    7940:	21000104 	addi	r4,r4,4
    7944:	1000041e 	bne	r2,zero,7958 <_malloc_r+0x198>
    7948:	294b883a 	add	r5,r5,r5
    794c:	28c4703a 	and	r2,r5,r3
    7950:	21000104 	addi	r4,r4,4
    7954:	103ffc26 	beq	r2,zero,7948 <_gp+0xfffeb7ec>
    7958:	02bfff04 	movi	r10,-4
    795c:	024003c4 	movi	r9,15
    7960:	21800044 	addi	r6,r4,1
    7964:	318d883a 	add	r6,r6,r6
    7968:	318d883a 	add	r6,r6,r6
    796c:	318d883a 	add	r6,r6,r6
    7970:	998d883a 	add	r6,r19,r6
    7974:	333ffe04 	addi	r12,r6,-8
    7978:	2017883a 	mov	r11,r4
    797c:	31800104 	addi	r6,r6,4
    7980:	34000017 	ldw	r16,0(r6)
    7984:	31fffd04 	addi	r7,r6,-12
    7988:	81c0041e 	bne	r16,r7,799c <_malloc_r+0x1dc>
    798c:	0000fb06 	br	7d7c <_malloc_r+0x5bc>
    7990:	1801030e 	bge	r3,zero,7da0 <_malloc_r+0x5e0>
    7994:	84000317 	ldw	r16,12(r16)
    7998:	81c0f826 	beq	r16,r7,7d7c <_malloc_r+0x5bc>
    799c:	80800117 	ldw	r2,4(r16)
    79a0:	1284703a 	and	r2,r2,r10
    79a4:	1447c83a 	sub	r3,r2,r17
    79a8:	48fff90e 	bge	r9,r3,7990 <_gp+0xfffeb834>
    79ac:	80800317 	ldw	r2,12(r16)
    79b0:	81000217 	ldw	r4,8(r16)
    79b4:	89400054 	ori	r5,r17,1
    79b8:	81400115 	stw	r5,4(r16)
    79bc:	20800315 	stw	r2,12(r4)
    79c0:	11000215 	stw	r4,8(r2)
    79c4:	8463883a 	add	r17,r16,r17
    79c8:	9c400515 	stw	r17,20(r19)
    79cc:	9c400415 	stw	r17,16(r19)
    79d0:	18800054 	ori	r2,r3,1
    79d4:	88800115 	stw	r2,4(r17)
    79d8:	8a000315 	stw	r8,12(r17)
    79dc:	8a000215 	stw	r8,8(r17)
    79e0:	88e3883a 	add	r17,r17,r3
    79e4:	88c00015 	stw	r3,0(r17)
    79e8:	9009883a 	mov	r4,r18
    79ec:	000f9bc0 	call	f9bc <__malloc_unlock>
    79f0:	80800204 	addi	r2,r16,8
    79f4:	00001b06 	br	7a64 <_malloc_r+0x2a4>
    79f8:	04400404 	movi	r17,16
    79fc:	89402536 	bltu	r17,r5,7a94 <_malloc_r+0x2d4>
    7a00:	000f9980 	call	f998 <__malloc_lock>
    7a04:	00800184 	movi	r2,6
    7a08:	01000084 	movi	r4,2
    7a0c:	04c00074 	movhi	r19,1
    7a10:	1085883a 	add	r2,r2,r2
    7a14:	9ccad304 	addi	r19,r19,11084
    7a18:	1085883a 	add	r2,r2,r2
    7a1c:	9885883a 	add	r2,r19,r2
    7a20:	14000117 	ldw	r16,4(r2)
    7a24:	10fffe04 	addi	r3,r2,-8
    7a28:	80c0d926 	beq	r16,r3,7d90 <_malloc_r+0x5d0>
    7a2c:	80c00117 	ldw	r3,4(r16)
    7a30:	81000317 	ldw	r4,12(r16)
    7a34:	00bfff04 	movi	r2,-4
    7a38:	1884703a 	and	r2,r3,r2
    7a3c:	81400217 	ldw	r5,8(r16)
    7a40:	8085883a 	add	r2,r16,r2
    7a44:	10c00117 	ldw	r3,4(r2)
    7a48:	29000315 	stw	r4,12(r5)
    7a4c:	21400215 	stw	r5,8(r4)
    7a50:	18c00054 	ori	r3,r3,1
    7a54:	10c00115 	stw	r3,4(r2)
    7a58:	9009883a 	mov	r4,r18
    7a5c:	000f9bc0 	call	f9bc <__malloc_unlock>
    7a60:	80800204 	addi	r2,r16,8
    7a64:	dfc00a17 	ldw	ra,40(sp)
    7a68:	df000917 	ldw	fp,36(sp)
    7a6c:	ddc00817 	ldw	r23,32(sp)
    7a70:	dd800717 	ldw	r22,28(sp)
    7a74:	dd400617 	ldw	r21,24(sp)
    7a78:	dd000517 	ldw	r20,20(sp)
    7a7c:	dcc00417 	ldw	r19,16(sp)
    7a80:	dc800317 	ldw	r18,12(sp)
    7a84:	dc400217 	ldw	r17,8(sp)
    7a88:	dc000117 	ldw	r16,4(sp)
    7a8c:	dec00b04 	addi	sp,sp,44
    7a90:	f800283a 	ret
    7a94:	00800304 	movi	r2,12
    7a98:	90800015 	stw	r2,0(r18)
    7a9c:	0005883a 	mov	r2,zero
    7aa0:	003ff006 	br	7a64 <_gp+0xfffeb908>
    7aa4:	01002004 	movi	r4,128
    7aa8:	02001004 	movi	r8,64
    7aac:	01c00fc4 	movi	r7,63
    7ab0:	003f6106 	br	7838 <_gp+0xfffeb6dc>
    7ab4:	4009883a 	mov	r4,r8
    7ab8:	003f7506 	br	7890 <_gp+0xfffeb734>
    7abc:	81000317 	ldw	r4,12(r16)
    7ac0:	003fde06 	br	7a3c <_gp+0xfffeb8e0>
    7ac4:	81c5883a 	add	r2,r16,r7
    7ac8:	11400117 	ldw	r5,4(r2)
    7acc:	9009883a 	mov	r4,r18
    7ad0:	29400054 	ori	r5,r5,1
    7ad4:	11400115 	stw	r5,4(r2)
    7ad8:	000f9bc0 	call	f9bc <__malloc_unlock>
    7adc:	80800204 	addi	r2,r16,8
    7ae0:	003fe006 	br	7a64 <_gp+0xfffeb908>
    7ae4:	9c000217 	ldw	r16,8(r19)
    7ae8:	00bfff04 	movi	r2,-4
    7aec:	85800117 	ldw	r22,4(r16)
    7af0:	b0ac703a 	and	r22,r22,r2
    7af4:	b4400336 	bltu	r22,r17,7b04 <_malloc_r+0x344>
    7af8:	b445c83a 	sub	r2,r22,r17
    7afc:	00c003c4 	movi	r3,15
    7b00:	18805d16 	blt	r3,r2,7c78 <_malloc_r+0x4b8>
    7b04:	05c00074 	movhi	r23,1
    7b08:	00800074 	movhi	r2,1
    7b0c:	10972804 	addi	r2,r2,23712
    7b10:	bdd05a04 	addi	r23,r23,16744
    7b14:	15400017 	ldw	r21,0(r2)
    7b18:	b8c00017 	ldw	r3,0(r23)
    7b1c:	00bfffc4 	movi	r2,-1
    7b20:	858d883a 	add	r6,r16,r22
    7b24:	8d6b883a 	add	r21,r17,r21
    7b28:	1880ea26 	beq	r3,r2,7ed4 <_malloc_r+0x714>
    7b2c:	ad4403c4 	addi	r21,r21,4111
    7b30:	00bc0004 	movi	r2,-4096
    7b34:	a8aa703a 	and	r21,r21,r2
    7b38:	a80b883a 	mov	r5,r21
    7b3c:	9009883a 	mov	r4,r18
    7b40:	d9800015 	stw	r6,0(sp)
    7b44:	0009b0c0 	call	9b0c <_sbrk_r>
    7b48:	1029883a 	mov	r20,r2
    7b4c:	00bfffc4 	movi	r2,-1
    7b50:	d9800017 	ldw	r6,0(sp)
    7b54:	a080e826 	beq	r20,r2,7ef8 <_malloc_r+0x738>
    7b58:	a180a636 	bltu	r20,r6,7df4 <_malloc_r+0x634>
    7b5c:	07000074 	movhi	fp,1
    7b60:	e7173104 	addi	fp,fp,23748
    7b64:	e0800017 	ldw	r2,0(fp)
    7b68:	a887883a 	add	r3,r21,r2
    7b6c:	e0c00015 	stw	r3,0(fp)
    7b70:	3500e626 	beq	r6,r20,7f0c <_malloc_r+0x74c>
    7b74:	b9000017 	ldw	r4,0(r23)
    7b78:	00bfffc4 	movi	r2,-1
    7b7c:	2080ee26 	beq	r4,r2,7f38 <_malloc_r+0x778>
    7b80:	a185c83a 	sub	r2,r20,r6
    7b84:	10c5883a 	add	r2,r2,r3
    7b88:	e0800015 	stw	r2,0(fp)
    7b8c:	a0c001cc 	andi	r3,r20,7
    7b90:	1800bc26 	beq	r3,zero,7e84 <_malloc_r+0x6c4>
    7b94:	a0e9c83a 	sub	r20,r20,r3
    7b98:	00840204 	movi	r2,4104
    7b9c:	a5000204 	addi	r20,r20,8
    7ba0:	10c7c83a 	sub	r3,r2,r3
    7ba4:	a545883a 	add	r2,r20,r21
    7ba8:	1083ffcc 	andi	r2,r2,4095
    7bac:	18abc83a 	sub	r21,r3,r2
    7bb0:	a80b883a 	mov	r5,r21
    7bb4:	9009883a 	mov	r4,r18
    7bb8:	0009b0c0 	call	9b0c <_sbrk_r>
    7bbc:	00ffffc4 	movi	r3,-1
    7bc0:	10c0e126 	beq	r2,r3,7f48 <_malloc_r+0x788>
    7bc4:	1505c83a 	sub	r2,r2,r20
    7bc8:	1545883a 	add	r2,r2,r21
    7bcc:	10800054 	ori	r2,r2,1
    7bd0:	e0c00017 	ldw	r3,0(fp)
    7bd4:	9d000215 	stw	r20,8(r19)
    7bd8:	a0800115 	stw	r2,4(r20)
    7bdc:	a8c7883a 	add	r3,r21,r3
    7be0:	e0c00015 	stw	r3,0(fp)
    7be4:	84c00e26 	beq	r16,r19,7c20 <_malloc_r+0x460>
    7be8:	018003c4 	movi	r6,15
    7bec:	3580a72e 	bgeu	r6,r22,7e8c <_malloc_r+0x6cc>
    7bf0:	81400117 	ldw	r5,4(r16)
    7bf4:	013ffe04 	movi	r4,-8
    7bf8:	b0bffd04 	addi	r2,r22,-12
    7bfc:	1104703a 	and	r2,r2,r4
    7c00:	2900004c 	andi	r4,r5,1
    7c04:	2088b03a 	or	r4,r4,r2
    7c08:	81000115 	stw	r4,4(r16)
    7c0c:	01400144 	movi	r5,5
    7c10:	8089883a 	add	r4,r16,r2
    7c14:	21400115 	stw	r5,4(r4)
    7c18:	21400215 	stw	r5,8(r4)
    7c1c:	3080cd36 	bltu	r6,r2,7f54 <_malloc_r+0x794>
    7c20:	00800074 	movhi	r2,1
    7c24:	10972704 	addi	r2,r2,23708
    7c28:	11000017 	ldw	r4,0(r2)
    7c2c:	20c0012e 	bgeu	r4,r3,7c34 <_malloc_r+0x474>
    7c30:	10c00015 	stw	r3,0(r2)
    7c34:	00800074 	movhi	r2,1
    7c38:	10972604 	addi	r2,r2,23704
    7c3c:	11000017 	ldw	r4,0(r2)
    7c40:	9c000217 	ldw	r16,8(r19)
    7c44:	20c0012e 	bgeu	r4,r3,7c4c <_malloc_r+0x48c>
    7c48:	10c00015 	stw	r3,0(r2)
    7c4c:	80c00117 	ldw	r3,4(r16)
    7c50:	00bfff04 	movi	r2,-4
    7c54:	1886703a 	and	r3,r3,r2
    7c58:	1c45c83a 	sub	r2,r3,r17
    7c5c:	1c400236 	bltu	r3,r17,7c68 <_malloc_r+0x4a8>
    7c60:	00c003c4 	movi	r3,15
    7c64:	18800416 	blt	r3,r2,7c78 <_malloc_r+0x4b8>
    7c68:	9009883a 	mov	r4,r18
    7c6c:	000f9bc0 	call	f9bc <__malloc_unlock>
    7c70:	0005883a 	mov	r2,zero
    7c74:	003f7b06 	br	7a64 <_gp+0xfffeb908>
    7c78:	88c00054 	ori	r3,r17,1
    7c7c:	80c00115 	stw	r3,4(r16)
    7c80:	8463883a 	add	r17,r16,r17
    7c84:	10800054 	ori	r2,r2,1
    7c88:	9c400215 	stw	r17,8(r19)
    7c8c:	88800115 	stw	r2,4(r17)
    7c90:	9009883a 	mov	r4,r18
    7c94:	000f9bc0 	call	f9bc <__malloc_unlock>
    7c98:	80800204 	addi	r2,r16,8
    7c9c:	003f7106 	br	7a64 <_gp+0xfffeb908>
    7ca0:	00c00504 	movi	r3,20
    7ca4:	18804a2e 	bgeu	r3,r2,7dd0 <_malloc_r+0x610>
    7ca8:	00c01504 	movi	r3,84
    7cac:	18806e36 	bltu	r3,r2,7e68 <_malloc_r+0x6a8>
    7cb0:	8804d33a 	srli	r2,r17,12
    7cb4:	12001bc4 	addi	r8,r2,111
    7cb8:	11c01b84 	addi	r7,r2,110
    7cbc:	4209883a 	add	r4,r8,r8
    7cc0:	003edd06 	br	7838 <_gp+0xfffeb6dc>
    7cc4:	3804d27a 	srli	r2,r7,9
    7cc8:	00c00104 	movi	r3,4
    7ccc:	1880442e 	bgeu	r3,r2,7de0 <_malloc_r+0x620>
    7cd0:	00c00504 	movi	r3,20
    7cd4:	18808136 	bltu	r3,r2,7edc <_malloc_r+0x71c>
    7cd8:	11401704 	addi	r5,r2,92
    7cdc:	10c016c4 	addi	r3,r2,91
    7ce0:	294b883a 	add	r5,r5,r5
    7ce4:	294b883a 	add	r5,r5,r5
    7ce8:	294b883a 	add	r5,r5,r5
    7cec:	994b883a 	add	r5,r19,r5
    7cf0:	28800017 	ldw	r2,0(r5)
    7cf4:	01800074 	movhi	r6,1
    7cf8:	297ffe04 	addi	r5,r5,-8
    7cfc:	318ad304 	addi	r6,r6,11084
    7d00:	28806526 	beq	r5,r2,7e98 <_malloc_r+0x6d8>
    7d04:	01bfff04 	movi	r6,-4
    7d08:	10c00117 	ldw	r3,4(r2)
    7d0c:	1986703a 	and	r3,r3,r6
    7d10:	38c0022e 	bgeu	r7,r3,7d1c <_malloc_r+0x55c>
    7d14:	10800217 	ldw	r2,8(r2)
    7d18:	28bffb1e 	bne	r5,r2,7d08 <_gp+0xfffebbac>
    7d1c:	11400317 	ldw	r5,12(r2)
    7d20:	98c00117 	ldw	r3,4(r19)
    7d24:	81400315 	stw	r5,12(r16)
    7d28:	80800215 	stw	r2,8(r16)
    7d2c:	2c000215 	stw	r16,8(r5)
    7d30:	14000315 	stw	r16,12(r2)
    7d34:	003ef806 	br	7918 <_gp+0xfffeb7bc>
    7d38:	88c00054 	ori	r3,r17,1
    7d3c:	80c00115 	stw	r3,4(r16)
    7d40:	8463883a 	add	r17,r16,r17
    7d44:	34400515 	stw	r17,20(r6)
    7d48:	34400415 	stw	r17,16(r6)
    7d4c:	10c00054 	ori	r3,r2,1
    7d50:	8a000315 	stw	r8,12(r17)
    7d54:	8a000215 	stw	r8,8(r17)
    7d58:	88c00115 	stw	r3,4(r17)
    7d5c:	88a3883a 	add	r17,r17,r2
    7d60:	88800015 	stw	r2,0(r17)
    7d64:	9009883a 	mov	r4,r18
    7d68:	000f9bc0 	call	f9bc <__malloc_unlock>
    7d6c:	80800204 	addi	r2,r16,8
    7d70:	003f3c06 	br	7a64 <_gp+0xfffeb908>
    7d74:	30c00117 	ldw	r3,4(r6)
    7d78:	003ee706 	br	7918 <_gp+0xfffeb7bc>
    7d7c:	5ac00044 	addi	r11,r11,1
    7d80:	588000cc 	andi	r2,r11,3
    7d84:	31800204 	addi	r6,r6,8
    7d88:	103efd1e 	bne	r2,zero,7980 <_gp+0xfffeb824>
    7d8c:	00002406 	br	7e20 <_malloc_r+0x660>
    7d90:	14000317 	ldw	r16,12(r2)
    7d94:	143f251e 	bne	r2,r16,7a2c <_gp+0xfffeb8d0>
    7d98:	21000084 	addi	r4,r4,2
    7d9c:	003ebc06 	br	7890 <_gp+0xfffeb734>
    7da0:	8085883a 	add	r2,r16,r2
    7da4:	10c00117 	ldw	r3,4(r2)
    7da8:	81000317 	ldw	r4,12(r16)
    7dac:	81400217 	ldw	r5,8(r16)
    7db0:	18c00054 	ori	r3,r3,1
    7db4:	10c00115 	stw	r3,4(r2)
    7db8:	29000315 	stw	r4,12(r5)
    7dbc:	21400215 	stw	r5,8(r4)
    7dc0:	9009883a 	mov	r4,r18
    7dc4:	000f9bc0 	call	f9bc <__malloc_unlock>
    7dc8:	80800204 	addi	r2,r16,8
    7dcc:	003f2506 	br	7a64 <_gp+0xfffeb908>
    7dd0:	12001704 	addi	r8,r2,92
    7dd4:	11c016c4 	addi	r7,r2,91
    7dd8:	4209883a 	add	r4,r8,r8
    7ddc:	003e9606 	br	7838 <_gp+0xfffeb6dc>
    7de0:	3804d1ba 	srli	r2,r7,6
    7de4:	11400e44 	addi	r5,r2,57
    7de8:	10c00e04 	addi	r3,r2,56
    7dec:	294b883a 	add	r5,r5,r5
    7df0:	003fbc06 	br	7ce4 <_gp+0xfffebb88>
    7df4:	84ff5926 	beq	r16,r19,7b5c <_gp+0xfffeba00>
    7df8:	00800074 	movhi	r2,1
    7dfc:	108ad304 	addi	r2,r2,11084
    7e00:	14000217 	ldw	r16,8(r2)
    7e04:	00bfff04 	movi	r2,-4
    7e08:	80c00117 	ldw	r3,4(r16)
    7e0c:	1886703a 	and	r3,r3,r2
    7e10:	003f9106 	br	7c58 <_gp+0xfffebafc>
    7e14:	60800217 	ldw	r2,8(r12)
    7e18:	213fffc4 	addi	r4,r4,-1
    7e1c:	1300651e 	bne	r2,r12,7fb4 <_malloc_r+0x7f4>
    7e20:	208000cc 	andi	r2,r4,3
    7e24:	633ffe04 	addi	r12,r12,-8
    7e28:	103ffa1e 	bne	r2,zero,7e14 <_gp+0xfffebcb8>
    7e2c:	98800117 	ldw	r2,4(r19)
    7e30:	0146303a 	nor	r3,zero,r5
    7e34:	1884703a 	and	r2,r3,r2
    7e38:	98800115 	stw	r2,4(r19)
    7e3c:	294b883a 	add	r5,r5,r5
    7e40:	117f2836 	bltu	r2,r5,7ae4 <_gp+0xfffeb988>
    7e44:	283f2726 	beq	r5,zero,7ae4 <_gp+0xfffeb988>
    7e48:	2886703a 	and	r3,r5,r2
    7e4c:	5809883a 	mov	r4,r11
    7e50:	183ec31e 	bne	r3,zero,7960 <_gp+0xfffeb804>
    7e54:	294b883a 	add	r5,r5,r5
    7e58:	2886703a 	and	r3,r5,r2
    7e5c:	21000104 	addi	r4,r4,4
    7e60:	183ffc26 	beq	r3,zero,7e54 <_gp+0xfffebcf8>
    7e64:	003ebe06 	br	7960 <_gp+0xfffeb804>
    7e68:	00c05504 	movi	r3,340
    7e6c:	18801236 	bltu	r3,r2,7eb8 <_malloc_r+0x6f8>
    7e70:	8804d3fa 	srli	r2,r17,15
    7e74:	12001e04 	addi	r8,r2,120
    7e78:	11c01dc4 	addi	r7,r2,119
    7e7c:	4209883a 	add	r4,r8,r8
    7e80:	003e6d06 	br	7838 <_gp+0xfffeb6dc>
    7e84:	00c40004 	movi	r3,4096
    7e88:	003f4606 	br	7ba4 <_gp+0xfffeba48>
    7e8c:	00800044 	movi	r2,1
    7e90:	a0800115 	stw	r2,4(r20)
    7e94:	003f7406 	br	7c68 <_gp+0xfffebb0c>
    7e98:	1805d0ba 	srai	r2,r3,2
    7e9c:	01c00044 	movi	r7,1
    7ea0:	30c00117 	ldw	r3,4(r6)
    7ea4:	388e983a 	sll	r7,r7,r2
    7ea8:	2805883a 	mov	r2,r5
    7eac:	38c6b03a 	or	r3,r7,r3
    7eb0:	30c00115 	stw	r3,4(r6)
    7eb4:	003f9b06 	br	7d24 <_gp+0xfffebbc8>
    7eb8:	00c15504 	movi	r3,1364
    7ebc:	18801a36 	bltu	r3,r2,7f28 <_malloc_r+0x768>
    7ec0:	8804d4ba 	srli	r2,r17,18
    7ec4:	12001f44 	addi	r8,r2,125
    7ec8:	11c01f04 	addi	r7,r2,124
    7ecc:	4209883a 	add	r4,r8,r8
    7ed0:	003e5906 	br	7838 <_gp+0xfffeb6dc>
    7ed4:	ad400404 	addi	r21,r21,16
    7ed8:	003f1706 	br	7b38 <_gp+0xfffeb9dc>
    7edc:	00c01504 	movi	r3,84
    7ee0:	18802336 	bltu	r3,r2,7f70 <_malloc_r+0x7b0>
    7ee4:	3804d33a 	srli	r2,r7,12
    7ee8:	11401bc4 	addi	r5,r2,111
    7eec:	10c01b84 	addi	r3,r2,110
    7ef0:	294b883a 	add	r5,r5,r5
    7ef4:	003f7b06 	br	7ce4 <_gp+0xfffebb88>
    7ef8:	9c000217 	ldw	r16,8(r19)
    7efc:	00bfff04 	movi	r2,-4
    7f00:	80c00117 	ldw	r3,4(r16)
    7f04:	1886703a 	and	r3,r3,r2
    7f08:	003f5306 	br	7c58 <_gp+0xfffebafc>
    7f0c:	3083ffcc 	andi	r2,r6,4095
    7f10:	103f181e 	bne	r2,zero,7b74 <_gp+0xfffeba18>
    7f14:	99000217 	ldw	r4,8(r19)
    7f18:	b545883a 	add	r2,r22,r21
    7f1c:	10800054 	ori	r2,r2,1
    7f20:	20800115 	stw	r2,4(r4)
    7f24:	003f3e06 	br	7c20 <_gp+0xfffebac4>
    7f28:	01003f84 	movi	r4,254
    7f2c:	02001fc4 	movi	r8,127
    7f30:	01c01f84 	movi	r7,126
    7f34:	003e4006 	br	7838 <_gp+0xfffeb6dc>
    7f38:	00800074 	movhi	r2,1
    7f3c:	10905a04 	addi	r2,r2,16744
    7f40:	15000015 	stw	r20,0(r2)
    7f44:	003f1106 	br	7b8c <_gp+0xfffeba30>
    7f48:	00800044 	movi	r2,1
    7f4c:	002b883a 	mov	r21,zero
    7f50:	003f1f06 	br	7bd0 <_gp+0xfffeba74>
    7f54:	81400204 	addi	r5,r16,8
    7f58:	9009883a 	mov	r4,r18
    7f5c:	0006bc80 	call	6bc8 <_free_r>
    7f60:	00800074 	movhi	r2,1
    7f64:	10973104 	addi	r2,r2,23748
    7f68:	10c00017 	ldw	r3,0(r2)
    7f6c:	003f2c06 	br	7c20 <_gp+0xfffebac4>
    7f70:	00c05504 	movi	r3,340
    7f74:	18800536 	bltu	r3,r2,7f8c <_malloc_r+0x7cc>
    7f78:	3804d3fa 	srli	r2,r7,15
    7f7c:	11401e04 	addi	r5,r2,120
    7f80:	10c01dc4 	addi	r3,r2,119
    7f84:	294b883a 	add	r5,r5,r5
    7f88:	003f5606 	br	7ce4 <_gp+0xfffebb88>
    7f8c:	00c15504 	movi	r3,1364
    7f90:	18800536 	bltu	r3,r2,7fa8 <_malloc_r+0x7e8>
    7f94:	3804d4ba 	srli	r2,r7,18
    7f98:	11401f44 	addi	r5,r2,125
    7f9c:	10c01f04 	addi	r3,r2,124
    7fa0:	294b883a 	add	r5,r5,r5
    7fa4:	003f4f06 	br	7ce4 <_gp+0xfffebb88>
    7fa8:	01403f84 	movi	r5,254
    7fac:	00c01f84 	movi	r3,126
    7fb0:	003f4c06 	br	7ce4 <_gp+0xfffebb88>
    7fb4:	98800117 	ldw	r2,4(r19)
    7fb8:	003fa006 	br	7e3c <_gp+0xfffebce0>
    7fbc:	8808d0fa 	srli	r4,r17,3
    7fc0:	20800044 	addi	r2,r4,1
    7fc4:	1085883a 	add	r2,r2,r2
    7fc8:	003e9006 	br	7a0c <_gp+0xfffeb8b0>

00007fcc <memchr>:
    7fcc:	208000cc 	andi	r2,r4,3
    7fd0:	280f883a 	mov	r7,r5
    7fd4:	10003426 	beq	r2,zero,80a8 <memchr+0xdc>
    7fd8:	30bfffc4 	addi	r2,r6,-1
    7fdc:	30001a26 	beq	r6,zero,8048 <memchr+0x7c>
    7fe0:	20c00003 	ldbu	r3,0(r4)
    7fe4:	29803fcc 	andi	r6,r5,255
    7fe8:	30c0051e 	bne	r6,r3,8000 <memchr+0x34>
    7fec:	00001806 	br	8050 <memchr+0x84>
    7ff0:	10001526 	beq	r2,zero,8048 <memchr+0x7c>
    7ff4:	20c00003 	ldbu	r3,0(r4)
    7ff8:	10bfffc4 	addi	r2,r2,-1
    7ffc:	30c01426 	beq	r6,r3,8050 <memchr+0x84>
    8000:	21000044 	addi	r4,r4,1
    8004:	20c000cc 	andi	r3,r4,3
    8008:	183ff91e 	bne	r3,zero,7ff0 <_gp+0xfffebe94>
    800c:	020000c4 	movi	r8,3
    8010:	40801136 	bltu	r8,r2,8058 <memchr+0x8c>
    8014:	10000c26 	beq	r2,zero,8048 <memchr+0x7c>
    8018:	20c00003 	ldbu	r3,0(r4)
    801c:	29403fcc 	andi	r5,r5,255
    8020:	28c00b26 	beq	r5,r3,8050 <memchr+0x84>
    8024:	20c00044 	addi	r3,r4,1
    8028:	39803fcc 	andi	r6,r7,255
    802c:	2089883a 	add	r4,r4,r2
    8030:	00000306 	br	8040 <memchr+0x74>
    8034:	18c00044 	addi	r3,r3,1
    8038:	197fffc3 	ldbu	r5,-1(r3)
    803c:	31400526 	beq	r6,r5,8054 <memchr+0x88>
    8040:	1805883a 	mov	r2,r3
    8044:	20fffb1e 	bne	r4,r3,8034 <_gp+0xfffebed8>
    8048:	0005883a 	mov	r2,zero
    804c:	f800283a 	ret
    8050:	2005883a 	mov	r2,r4
    8054:	f800283a 	ret
    8058:	28c03fcc 	andi	r3,r5,255
    805c:	1812923a 	slli	r9,r3,8
    8060:	02ffbff4 	movhi	r11,65279
    8064:	02a02074 	movhi	r10,32897
    8068:	48d2b03a 	or	r9,r9,r3
    806c:	4806943a 	slli	r3,r9,16
    8070:	5affbfc4 	addi	r11,r11,-257
    8074:	52a02004 	addi	r10,r10,-32640
    8078:	48d2b03a 	or	r9,r9,r3
    807c:	20c00017 	ldw	r3,0(r4)
    8080:	48c6f03a 	xor	r3,r9,r3
    8084:	1acd883a 	add	r6,r3,r11
    8088:	00c6303a 	nor	r3,zero,r3
    808c:	30c6703a 	and	r3,r6,r3
    8090:	1a86703a 	and	r3,r3,r10
    8094:	183fe01e 	bne	r3,zero,8018 <_gp+0xfffebebc>
    8098:	10bfff04 	addi	r2,r2,-4
    809c:	21000104 	addi	r4,r4,4
    80a0:	40bff636 	bltu	r8,r2,807c <_gp+0xfffebf20>
    80a4:	003fdb06 	br	8014 <_gp+0xfffebeb8>
    80a8:	3005883a 	mov	r2,r6
    80ac:	003fd706 	br	800c <_gp+0xfffebeb0>

000080b0 <memcpy>:
    80b0:	defffd04 	addi	sp,sp,-12
    80b4:	dfc00215 	stw	ra,8(sp)
    80b8:	dc400115 	stw	r17,4(sp)
    80bc:	dc000015 	stw	r16,0(sp)
    80c0:	00c003c4 	movi	r3,15
    80c4:	2005883a 	mov	r2,r4
    80c8:	1980452e 	bgeu	r3,r6,81e0 <memcpy+0x130>
    80cc:	2906b03a 	or	r3,r5,r4
    80d0:	18c000cc 	andi	r3,r3,3
    80d4:	1800441e 	bne	r3,zero,81e8 <memcpy+0x138>
    80d8:	347ffc04 	addi	r17,r6,-16
    80dc:	8822d13a 	srli	r17,r17,4
    80e0:	28c00104 	addi	r3,r5,4
    80e4:	23400104 	addi	r13,r4,4
    80e8:	8820913a 	slli	r16,r17,4
    80ec:	2b000204 	addi	r12,r5,8
    80f0:	22c00204 	addi	r11,r4,8
    80f4:	84000504 	addi	r16,r16,20
    80f8:	2a800304 	addi	r10,r5,12
    80fc:	22400304 	addi	r9,r4,12
    8100:	2c21883a 	add	r16,r5,r16
    8104:	2811883a 	mov	r8,r5
    8108:	200f883a 	mov	r7,r4
    810c:	41000017 	ldw	r4,0(r8)
    8110:	1fc00017 	ldw	ra,0(r3)
    8114:	63c00017 	ldw	r15,0(r12)
    8118:	39000015 	stw	r4,0(r7)
    811c:	53800017 	ldw	r14,0(r10)
    8120:	6fc00015 	stw	ra,0(r13)
    8124:	5bc00015 	stw	r15,0(r11)
    8128:	4b800015 	stw	r14,0(r9)
    812c:	18c00404 	addi	r3,r3,16
    8130:	39c00404 	addi	r7,r7,16
    8134:	42000404 	addi	r8,r8,16
    8138:	6b400404 	addi	r13,r13,16
    813c:	63000404 	addi	r12,r12,16
    8140:	5ac00404 	addi	r11,r11,16
    8144:	52800404 	addi	r10,r10,16
    8148:	4a400404 	addi	r9,r9,16
    814c:	1c3fef1e 	bne	r3,r16,810c <_gp+0xfffebfb0>
    8150:	89c00044 	addi	r7,r17,1
    8154:	380e913a 	slli	r7,r7,4
    8158:	310003cc 	andi	r4,r6,15
    815c:	02c000c4 	movi	r11,3
    8160:	11c7883a 	add	r3,r2,r7
    8164:	29cb883a 	add	r5,r5,r7
    8168:	5900212e 	bgeu	r11,r4,81f0 <memcpy+0x140>
    816c:	1813883a 	mov	r9,r3
    8170:	2811883a 	mov	r8,r5
    8174:	200f883a 	mov	r7,r4
    8178:	42800017 	ldw	r10,0(r8)
    817c:	4a400104 	addi	r9,r9,4
    8180:	39ffff04 	addi	r7,r7,-4
    8184:	4abfff15 	stw	r10,-4(r9)
    8188:	42000104 	addi	r8,r8,4
    818c:	59fffa36 	bltu	r11,r7,8178 <_gp+0xfffec01c>
    8190:	213fff04 	addi	r4,r4,-4
    8194:	2008d0ba 	srli	r4,r4,2
    8198:	318000cc 	andi	r6,r6,3
    819c:	21000044 	addi	r4,r4,1
    81a0:	2109883a 	add	r4,r4,r4
    81a4:	2109883a 	add	r4,r4,r4
    81a8:	1907883a 	add	r3,r3,r4
    81ac:	290b883a 	add	r5,r5,r4
    81b0:	30000626 	beq	r6,zero,81cc <memcpy+0x11c>
    81b4:	198d883a 	add	r6,r3,r6
    81b8:	29c00003 	ldbu	r7,0(r5)
    81bc:	18c00044 	addi	r3,r3,1
    81c0:	29400044 	addi	r5,r5,1
    81c4:	19ffffc5 	stb	r7,-1(r3)
    81c8:	19bffb1e 	bne	r3,r6,81b8 <_gp+0xfffec05c>
    81cc:	dfc00217 	ldw	ra,8(sp)
    81d0:	dc400117 	ldw	r17,4(sp)
    81d4:	dc000017 	ldw	r16,0(sp)
    81d8:	dec00304 	addi	sp,sp,12
    81dc:	f800283a 	ret
    81e0:	2007883a 	mov	r3,r4
    81e4:	003ff206 	br	81b0 <_gp+0xfffec054>
    81e8:	2007883a 	mov	r3,r4
    81ec:	003ff106 	br	81b4 <_gp+0xfffec058>
    81f0:	200d883a 	mov	r6,r4
    81f4:	003fee06 	br	81b0 <_gp+0xfffec054>

000081f8 <memmove>:
    81f8:	2005883a 	mov	r2,r4
    81fc:	29000b2e 	bgeu	r5,r4,822c <memmove+0x34>
    8200:	298f883a 	add	r7,r5,r6
    8204:	21c0092e 	bgeu	r4,r7,822c <memmove+0x34>
    8208:	2187883a 	add	r3,r4,r6
    820c:	198bc83a 	sub	r5,r3,r6
    8210:	30004826 	beq	r6,zero,8334 <memmove+0x13c>
    8214:	39ffffc4 	addi	r7,r7,-1
    8218:	39000003 	ldbu	r4,0(r7)
    821c:	18ffffc4 	addi	r3,r3,-1
    8220:	19000005 	stb	r4,0(r3)
    8224:	28fffb1e 	bne	r5,r3,8214 <_gp+0xfffec0b8>
    8228:	f800283a 	ret
    822c:	00c003c4 	movi	r3,15
    8230:	1980412e 	bgeu	r3,r6,8338 <memmove+0x140>
    8234:	2886b03a 	or	r3,r5,r2
    8238:	18c000cc 	andi	r3,r3,3
    823c:	1800401e 	bne	r3,zero,8340 <memmove+0x148>
    8240:	33fffc04 	addi	r15,r6,-16
    8244:	781ed13a 	srli	r15,r15,4
    8248:	28c00104 	addi	r3,r5,4
    824c:	13400104 	addi	r13,r2,4
    8250:	781c913a 	slli	r14,r15,4
    8254:	2b000204 	addi	r12,r5,8
    8258:	12c00204 	addi	r11,r2,8
    825c:	73800504 	addi	r14,r14,20
    8260:	2a800304 	addi	r10,r5,12
    8264:	12400304 	addi	r9,r2,12
    8268:	2b9d883a 	add	r14,r5,r14
    826c:	2811883a 	mov	r8,r5
    8270:	100f883a 	mov	r7,r2
    8274:	41000017 	ldw	r4,0(r8)
    8278:	39c00404 	addi	r7,r7,16
    827c:	18c00404 	addi	r3,r3,16
    8280:	393ffc15 	stw	r4,-16(r7)
    8284:	193ffc17 	ldw	r4,-16(r3)
    8288:	6b400404 	addi	r13,r13,16
    828c:	5ac00404 	addi	r11,r11,16
    8290:	693ffc15 	stw	r4,-16(r13)
    8294:	61000017 	ldw	r4,0(r12)
    8298:	4a400404 	addi	r9,r9,16
    829c:	42000404 	addi	r8,r8,16
    82a0:	593ffc15 	stw	r4,-16(r11)
    82a4:	51000017 	ldw	r4,0(r10)
    82a8:	63000404 	addi	r12,r12,16
    82ac:	52800404 	addi	r10,r10,16
    82b0:	493ffc15 	stw	r4,-16(r9)
    82b4:	1bbfef1e 	bne	r3,r14,8274 <_gp+0xfffec118>
    82b8:	79000044 	addi	r4,r15,1
    82bc:	2008913a 	slli	r4,r4,4
    82c0:	328003cc 	andi	r10,r6,15
    82c4:	02c000c4 	movi	r11,3
    82c8:	1107883a 	add	r3,r2,r4
    82cc:	290b883a 	add	r5,r5,r4
    82d0:	5a801e2e 	bgeu	r11,r10,834c <memmove+0x154>
    82d4:	1813883a 	mov	r9,r3
    82d8:	2811883a 	mov	r8,r5
    82dc:	500f883a 	mov	r7,r10
    82e0:	41000017 	ldw	r4,0(r8)
    82e4:	4a400104 	addi	r9,r9,4
    82e8:	39ffff04 	addi	r7,r7,-4
    82ec:	493fff15 	stw	r4,-4(r9)
    82f0:	42000104 	addi	r8,r8,4
    82f4:	59fffa36 	bltu	r11,r7,82e0 <_gp+0xfffec184>
    82f8:	513fff04 	addi	r4,r10,-4
    82fc:	2008d0ba 	srli	r4,r4,2
    8300:	318000cc 	andi	r6,r6,3
    8304:	21000044 	addi	r4,r4,1
    8308:	2109883a 	add	r4,r4,r4
    830c:	2109883a 	add	r4,r4,r4
    8310:	1907883a 	add	r3,r3,r4
    8314:	290b883a 	add	r5,r5,r4
    8318:	30000b26 	beq	r6,zero,8348 <memmove+0x150>
    831c:	198d883a 	add	r6,r3,r6
    8320:	29c00003 	ldbu	r7,0(r5)
    8324:	18c00044 	addi	r3,r3,1
    8328:	29400044 	addi	r5,r5,1
    832c:	19ffffc5 	stb	r7,-1(r3)
    8330:	19bffb1e 	bne	r3,r6,8320 <_gp+0xfffec1c4>
    8334:	f800283a 	ret
    8338:	1007883a 	mov	r3,r2
    833c:	003ff606 	br	8318 <_gp+0xfffec1bc>
    8340:	1007883a 	mov	r3,r2
    8344:	003ff506 	br	831c <_gp+0xfffec1c0>
    8348:	f800283a 	ret
    834c:	500d883a 	mov	r6,r10
    8350:	003ff106 	br	8318 <_gp+0xfffec1bc>

00008354 <memset>:
    8354:	20c000cc 	andi	r3,r4,3
    8358:	2005883a 	mov	r2,r4
    835c:	18004426 	beq	r3,zero,8470 <memset+0x11c>
    8360:	31ffffc4 	addi	r7,r6,-1
    8364:	30004026 	beq	r6,zero,8468 <memset+0x114>
    8368:	2813883a 	mov	r9,r5
    836c:	200d883a 	mov	r6,r4
    8370:	2007883a 	mov	r3,r4
    8374:	00000406 	br	8388 <memset+0x34>
    8378:	3a3fffc4 	addi	r8,r7,-1
    837c:	31800044 	addi	r6,r6,1
    8380:	38003926 	beq	r7,zero,8468 <memset+0x114>
    8384:	400f883a 	mov	r7,r8
    8388:	18c00044 	addi	r3,r3,1
    838c:	32400005 	stb	r9,0(r6)
    8390:	1a0000cc 	andi	r8,r3,3
    8394:	403ff81e 	bne	r8,zero,8378 <_gp+0xfffec21c>
    8398:	010000c4 	movi	r4,3
    839c:	21c02d2e 	bgeu	r4,r7,8454 <memset+0x100>
    83a0:	29003fcc 	andi	r4,r5,255
    83a4:	200c923a 	slli	r6,r4,8
    83a8:	3108b03a 	or	r4,r6,r4
    83ac:	200c943a 	slli	r6,r4,16
    83b0:	218cb03a 	or	r6,r4,r6
    83b4:	010003c4 	movi	r4,15
    83b8:	21c0182e 	bgeu	r4,r7,841c <memset+0xc8>
    83bc:	3b3ffc04 	addi	r12,r7,-16
    83c0:	6018d13a 	srli	r12,r12,4
    83c4:	1a000104 	addi	r8,r3,4
    83c8:	1ac00204 	addi	r11,r3,8
    83cc:	6008913a 	slli	r4,r12,4
    83d0:	1a800304 	addi	r10,r3,12
    83d4:	1813883a 	mov	r9,r3
    83d8:	21000504 	addi	r4,r4,20
    83dc:	1909883a 	add	r4,r3,r4
    83e0:	49800015 	stw	r6,0(r9)
    83e4:	41800015 	stw	r6,0(r8)
    83e8:	59800015 	stw	r6,0(r11)
    83ec:	51800015 	stw	r6,0(r10)
    83f0:	42000404 	addi	r8,r8,16
    83f4:	4a400404 	addi	r9,r9,16
    83f8:	5ac00404 	addi	r11,r11,16
    83fc:	52800404 	addi	r10,r10,16
    8400:	413ff71e 	bne	r8,r4,83e0 <_gp+0xfffec284>
    8404:	63000044 	addi	r12,r12,1
    8408:	6018913a 	slli	r12,r12,4
    840c:	39c003cc 	andi	r7,r7,15
    8410:	010000c4 	movi	r4,3
    8414:	1b07883a 	add	r3,r3,r12
    8418:	21c00e2e 	bgeu	r4,r7,8454 <memset+0x100>
    841c:	1813883a 	mov	r9,r3
    8420:	3811883a 	mov	r8,r7
    8424:	010000c4 	movi	r4,3
    8428:	49800015 	stw	r6,0(r9)
    842c:	423fff04 	addi	r8,r8,-4
    8430:	4a400104 	addi	r9,r9,4
    8434:	223ffc36 	bltu	r4,r8,8428 <_gp+0xfffec2cc>
    8438:	393fff04 	addi	r4,r7,-4
    843c:	2008d0ba 	srli	r4,r4,2
    8440:	39c000cc 	andi	r7,r7,3
    8444:	21000044 	addi	r4,r4,1
    8448:	2109883a 	add	r4,r4,r4
    844c:	2109883a 	add	r4,r4,r4
    8450:	1907883a 	add	r3,r3,r4
    8454:	38000526 	beq	r7,zero,846c <memset+0x118>
    8458:	19cf883a 	add	r7,r3,r7
    845c:	19400005 	stb	r5,0(r3)
    8460:	18c00044 	addi	r3,r3,1
    8464:	38fffd1e 	bne	r7,r3,845c <_gp+0xfffec300>
    8468:	f800283a 	ret
    846c:	f800283a 	ret
    8470:	2007883a 	mov	r3,r4
    8474:	300f883a 	mov	r7,r6
    8478:	003fc706 	br	8398 <_gp+0xfffec23c>

0000847c <_Balloc>:
    847c:	20801317 	ldw	r2,76(r4)
    8480:	defffc04 	addi	sp,sp,-16
    8484:	dc400115 	stw	r17,4(sp)
    8488:	dc000015 	stw	r16,0(sp)
    848c:	dfc00315 	stw	ra,12(sp)
    8490:	dc800215 	stw	r18,8(sp)
    8494:	2023883a 	mov	r17,r4
    8498:	2821883a 	mov	r16,r5
    849c:	10000f26 	beq	r2,zero,84dc <_Balloc+0x60>
    84a0:	8407883a 	add	r3,r16,r16
    84a4:	18c7883a 	add	r3,r3,r3
    84a8:	10c7883a 	add	r3,r2,r3
    84ac:	18800017 	ldw	r2,0(r3)
    84b0:	10001126 	beq	r2,zero,84f8 <_Balloc+0x7c>
    84b4:	11000017 	ldw	r4,0(r2)
    84b8:	19000015 	stw	r4,0(r3)
    84bc:	10000415 	stw	zero,16(r2)
    84c0:	10000315 	stw	zero,12(r2)
    84c4:	dfc00317 	ldw	ra,12(sp)
    84c8:	dc800217 	ldw	r18,8(sp)
    84cc:	dc400117 	ldw	r17,4(sp)
    84d0:	dc000017 	ldw	r16,0(sp)
    84d4:	dec00404 	addi	sp,sp,16
    84d8:	f800283a 	ret
    84dc:	01800844 	movi	r6,33
    84e0:	01400104 	movi	r5,4
    84e4:	000b5240 	call	b524 <_calloc_r>
    84e8:	88801315 	stw	r2,76(r17)
    84ec:	103fec1e 	bne	r2,zero,84a0 <_gp+0xfffec344>
    84f0:	0005883a 	mov	r2,zero
    84f4:	003ff306 	br	84c4 <_gp+0xfffec368>
    84f8:	01400044 	movi	r5,1
    84fc:	2c24983a 	sll	r18,r5,r16
    8500:	8809883a 	mov	r4,r17
    8504:	91800144 	addi	r6,r18,5
    8508:	318d883a 	add	r6,r6,r6
    850c:	318d883a 	add	r6,r6,r6
    8510:	000b5240 	call	b524 <_calloc_r>
    8514:	103ff626 	beq	r2,zero,84f0 <_gp+0xfffec394>
    8518:	14000115 	stw	r16,4(r2)
    851c:	14800215 	stw	r18,8(r2)
    8520:	003fe606 	br	84bc <_gp+0xfffec360>

00008524 <_Bfree>:
    8524:	28000826 	beq	r5,zero,8548 <_Bfree+0x24>
    8528:	28c00117 	ldw	r3,4(r5)
    852c:	20801317 	ldw	r2,76(r4)
    8530:	18c7883a 	add	r3,r3,r3
    8534:	18c7883a 	add	r3,r3,r3
    8538:	10c5883a 	add	r2,r2,r3
    853c:	10c00017 	ldw	r3,0(r2)
    8540:	28c00015 	stw	r3,0(r5)
    8544:	11400015 	stw	r5,0(r2)
    8548:	f800283a 	ret

0000854c <__multadd>:
    854c:	defff704 	addi	sp,sp,-36
    8550:	dc800215 	stw	r18,8(sp)
    8554:	2c800417 	ldw	r18,16(r5)
    8558:	dd800615 	stw	r22,24(sp)
    855c:	dd400515 	stw	r21,20(sp)
    8560:	dd000415 	stw	r20,16(sp)
    8564:	dcc00315 	stw	r19,12(sp)
    8568:	dc400115 	stw	r17,4(sp)
    856c:	dc000015 	stw	r16,0(sp)
    8570:	dfc00815 	stw	ra,32(sp)
    8574:	ddc00715 	stw	r23,28(sp)
    8578:	2827883a 	mov	r19,r5
    857c:	2029883a 	mov	r20,r4
    8580:	3023883a 	mov	r17,r6
    8584:	3821883a 	mov	r16,r7
    8588:	2d400504 	addi	r21,r5,20
    858c:	002d883a 	mov	r22,zero
    8590:	adc00017 	ldw	r23,0(r21)
    8594:	880b883a 	mov	r5,r17
    8598:	ad400104 	addi	r21,r21,4
    859c:	b93fffcc 	andi	r4,r23,65535
    85a0:	000cb300 	call	cb30 <__mulsi3>
    85a4:	b808d43a 	srli	r4,r23,16
    85a8:	880b883a 	mov	r5,r17
    85ac:	1421883a 	add	r16,r2,r16
    85b0:	000cb300 	call	cb30 <__mulsi3>
    85b4:	800ed43a 	srli	r7,r16,16
    85b8:	80ffffcc 	andi	r3,r16,65535
    85bc:	b5800044 	addi	r22,r22,1
    85c0:	11c5883a 	add	r2,r2,r7
    85c4:	100e943a 	slli	r7,r2,16
    85c8:	1020d43a 	srli	r16,r2,16
    85cc:	38c7883a 	add	r3,r7,r3
    85d0:	a8ffff15 	stw	r3,-4(r21)
    85d4:	b4bfee16 	blt	r22,r18,8590 <_gp+0xfffec434>
    85d8:	80000926 	beq	r16,zero,8600 <__multadd+0xb4>
    85dc:	98800217 	ldw	r2,8(r19)
    85e0:	9080130e 	bge	r18,r2,8630 <__multadd+0xe4>
    85e4:	90800144 	addi	r2,r18,5
    85e8:	1085883a 	add	r2,r2,r2
    85ec:	1085883a 	add	r2,r2,r2
    85f0:	9885883a 	add	r2,r19,r2
    85f4:	14000015 	stw	r16,0(r2)
    85f8:	94800044 	addi	r18,r18,1
    85fc:	9c800415 	stw	r18,16(r19)
    8600:	9805883a 	mov	r2,r19
    8604:	dfc00817 	ldw	ra,32(sp)
    8608:	ddc00717 	ldw	r23,28(sp)
    860c:	dd800617 	ldw	r22,24(sp)
    8610:	dd400517 	ldw	r21,20(sp)
    8614:	dd000417 	ldw	r20,16(sp)
    8618:	dcc00317 	ldw	r19,12(sp)
    861c:	dc800217 	ldw	r18,8(sp)
    8620:	dc400117 	ldw	r17,4(sp)
    8624:	dc000017 	ldw	r16,0(sp)
    8628:	dec00904 	addi	sp,sp,36
    862c:	f800283a 	ret
    8630:	99400117 	ldw	r5,4(r19)
    8634:	a009883a 	mov	r4,r20
    8638:	29400044 	addi	r5,r5,1
    863c:	000847c0 	call	847c <_Balloc>
    8640:	99800417 	ldw	r6,16(r19)
    8644:	99400304 	addi	r5,r19,12
    8648:	11000304 	addi	r4,r2,12
    864c:	31800084 	addi	r6,r6,2
    8650:	318d883a 	add	r6,r6,r6
    8654:	318d883a 	add	r6,r6,r6
    8658:	1023883a 	mov	r17,r2
    865c:	00080b00 	call	80b0 <memcpy>
    8660:	98000a26 	beq	r19,zero,868c <__multadd+0x140>
    8664:	98c00117 	ldw	r3,4(r19)
    8668:	a0801317 	ldw	r2,76(r20)
    866c:	18c7883a 	add	r3,r3,r3
    8670:	18c7883a 	add	r3,r3,r3
    8674:	10c5883a 	add	r2,r2,r3
    8678:	10c00017 	ldw	r3,0(r2)
    867c:	98c00015 	stw	r3,0(r19)
    8680:	14c00015 	stw	r19,0(r2)
    8684:	8827883a 	mov	r19,r17
    8688:	003fd606 	br	85e4 <_gp+0xfffec488>
    868c:	8827883a 	mov	r19,r17
    8690:	003fd406 	br	85e4 <_gp+0xfffec488>

00008694 <__s2b>:
    8694:	defff904 	addi	sp,sp,-28
    8698:	dc400115 	stw	r17,4(sp)
    869c:	dc000015 	stw	r16,0(sp)
    86a0:	2023883a 	mov	r17,r4
    86a4:	2821883a 	mov	r16,r5
    86a8:	39000204 	addi	r4,r7,8
    86ac:	01400244 	movi	r5,9
    86b0:	dcc00315 	stw	r19,12(sp)
    86b4:	dc800215 	stw	r18,8(sp)
    86b8:	dfc00615 	stw	ra,24(sp)
    86bc:	dd400515 	stw	r21,20(sp)
    86c0:	dd000415 	stw	r20,16(sp)
    86c4:	3825883a 	mov	r18,r7
    86c8:	3027883a 	mov	r19,r6
    86cc:	000c97c0 	call	c97c <__divsi3>
    86d0:	00c00044 	movi	r3,1
    86d4:	000b883a 	mov	r5,zero
    86d8:	1880030e 	bge	r3,r2,86e8 <__s2b+0x54>
    86dc:	18c7883a 	add	r3,r3,r3
    86e0:	29400044 	addi	r5,r5,1
    86e4:	18bffd16 	blt	r3,r2,86dc <_gp+0xfffec580>
    86e8:	8809883a 	mov	r4,r17
    86ec:	000847c0 	call	847c <_Balloc>
    86f0:	d8c00717 	ldw	r3,28(sp)
    86f4:	10c00515 	stw	r3,20(r2)
    86f8:	00c00044 	movi	r3,1
    86fc:	10c00415 	stw	r3,16(r2)
    8700:	00c00244 	movi	r3,9
    8704:	1cc0210e 	bge	r3,r19,878c <__s2b+0xf8>
    8708:	80eb883a 	add	r21,r16,r3
    870c:	a829883a 	mov	r20,r21
    8710:	84e1883a 	add	r16,r16,r19
    8714:	a1c00007 	ldb	r7,0(r20)
    8718:	01800284 	movi	r6,10
    871c:	a5000044 	addi	r20,r20,1
    8720:	100b883a 	mov	r5,r2
    8724:	39fff404 	addi	r7,r7,-48
    8728:	8809883a 	mov	r4,r17
    872c:	000854c0 	call	854c <__multadd>
    8730:	a43ff81e 	bne	r20,r16,8714 <_gp+0xfffec5b8>
    8734:	ace1883a 	add	r16,r21,r19
    8738:	843ffe04 	addi	r16,r16,-8
    873c:	9c800a0e 	bge	r19,r18,8768 <__s2b+0xd4>
    8740:	94e5c83a 	sub	r18,r18,r19
    8744:	84a5883a 	add	r18,r16,r18
    8748:	81c00007 	ldb	r7,0(r16)
    874c:	01800284 	movi	r6,10
    8750:	84000044 	addi	r16,r16,1
    8754:	100b883a 	mov	r5,r2
    8758:	39fff404 	addi	r7,r7,-48
    875c:	8809883a 	mov	r4,r17
    8760:	000854c0 	call	854c <__multadd>
    8764:	84bff81e 	bne	r16,r18,8748 <_gp+0xfffec5ec>
    8768:	dfc00617 	ldw	ra,24(sp)
    876c:	dd400517 	ldw	r21,20(sp)
    8770:	dd000417 	ldw	r20,16(sp)
    8774:	dcc00317 	ldw	r19,12(sp)
    8778:	dc800217 	ldw	r18,8(sp)
    877c:	dc400117 	ldw	r17,4(sp)
    8780:	dc000017 	ldw	r16,0(sp)
    8784:	dec00704 	addi	sp,sp,28
    8788:	f800283a 	ret
    878c:	84000284 	addi	r16,r16,10
    8790:	1827883a 	mov	r19,r3
    8794:	003fe906 	br	873c <_gp+0xfffec5e0>

00008798 <__hi0bits>:
    8798:	20bfffec 	andhi	r2,r4,65535
    879c:	1000141e 	bne	r2,zero,87f0 <__hi0bits+0x58>
    87a0:	2008943a 	slli	r4,r4,16
    87a4:	00800404 	movi	r2,16
    87a8:	20ffc02c 	andhi	r3,r4,65280
    87ac:	1800021e 	bne	r3,zero,87b8 <__hi0bits+0x20>
    87b0:	2008923a 	slli	r4,r4,8
    87b4:	10800204 	addi	r2,r2,8
    87b8:	20fc002c 	andhi	r3,r4,61440
    87bc:	1800021e 	bne	r3,zero,87c8 <__hi0bits+0x30>
    87c0:	2008913a 	slli	r4,r4,4
    87c4:	10800104 	addi	r2,r2,4
    87c8:	20f0002c 	andhi	r3,r4,49152
    87cc:	1800031e 	bne	r3,zero,87dc <__hi0bits+0x44>
    87d0:	2109883a 	add	r4,r4,r4
    87d4:	10800084 	addi	r2,r2,2
    87d8:	2109883a 	add	r4,r4,r4
    87dc:	20000316 	blt	r4,zero,87ec <__hi0bits+0x54>
    87e0:	2110002c 	andhi	r4,r4,16384
    87e4:	2000041e 	bne	r4,zero,87f8 <__hi0bits+0x60>
    87e8:	00800804 	movi	r2,32
    87ec:	f800283a 	ret
    87f0:	0005883a 	mov	r2,zero
    87f4:	003fec06 	br	87a8 <_gp+0xfffec64c>
    87f8:	10800044 	addi	r2,r2,1
    87fc:	f800283a 	ret

00008800 <__lo0bits>:
    8800:	20c00017 	ldw	r3,0(r4)
    8804:	188001cc 	andi	r2,r3,7
    8808:	10000826 	beq	r2,zero,882c <__lo0bits+0x2c>
    880c:	1880004c 	andi	r2,r3,1
    8810:	1000211e 	bne	r2,zero,8898 <__lo0bits+0x98>
    8814:	1880008c 	andi	r2,r3,2
    8818:	1000211e 	bne	r2,zero,88a0 <__lo0bits+0xa0>
    881c:	1806d0ba 	srli	r3,r3,2
    8820:	00800084 	movi	r2,2
    8824:	20c00015 	stw	r3,0(r4)
    8828:	f800283a 	ret
    882c:	18bfffcc 	andi	r2,r3,65535
    8830:	10001326 	beq	r2,zero,8880 <__lo0bits+0x80>
    8834:	0005883a 	mov	r2,zero
    8838:	19403fcc 	andi	r5,r3,255
    883c:	2800021e 	bne	r5,zero,8848 <__lo0bits+0x48>
    8840:	1806d23a 	srli	r3,r3,8
    8844:	10800204 	addi	r2,r2,8
    8848:	194003cc 	andi	r5,r3,15
    884c:	2800021e 	bne	r5,zero,8858 <__lo0bits+0x58>
    8850:	1806d13a 	srli	r3,r3,4
    8854:	10800104 	addi	r2,r2,4
    8858:	194000cc 	andi	r5,r3,3
    885c:	2800021e 	bne	r5,zero,8868 <__lo0bits+0x68>
    8860:	1806d0ba 	srli	r3,r3,2
    8864:	10800084 	addi	r2,r2,2
    8868:	1940004c 	andi	r5,r3,1
    886c:	2800081e 	bne	r5,zero,8890 <__lo0bits+0x90>
    8870:	1806d07a 	srli	r3,r3,1
    8874:	1800051e 	bne	r3,zero,888c <__lo0bits+0x8c>
    8878:	00800804 	movi	r2,32
    887c:	f800283a 	ret
    8880:	1806d43a 	srli	r3,r3,16
    8884:	00800404 	movi	r2,16
    8888:	003feb06 	br	8838 <_gp+0xfffec6dc>
    888c:	10800044 	addi	r2,r2,1
    8890:	20c00015 	stw	r3,0(r4)
    8894:	f800283a 	ret
    8898:	0005883a 	mov	r2,zero
    889c:	f800283a 	ret
    88a0:	1806d07a 	srli	r3,r3,1
    88a4:	00800044 	movi	r2,1
    88a8:	20c00015 	stw	r3,0(r4)
    88ac:	f800283a 	ret

000088b0 <__i2b>:
    88b0:	defffd04 	addi	sp,sp,-12
    88b4:	dc000015 	stw	r16,0(sp)
    88b8:	04000044 	movi	r16,1
    88bc:	dc400115 	stw	r17,4(sp)
    88c0:	2823883a 	mov	r17,r5
    88c4:	800b883a 	mov	r5,r16
    88c8:	dfc00215 	stw	ra,8(sp)
    88cc:	000847c0 	call	847c <_Balloc>
    88d0:	14400515 	stw	r17,20(r2)
    88d4:	14000415 	stw	r16,16(r2)
    88d8:	dfc00217 	ldw	ra,8(sp)
    88dc:	dc400117 	ldw	r17,4(sp)
    88e0:	dc000017 	ldw	r16,0(sp)
    88e4:	dec00304 	addi	sp,sp,12
    88e8:	f800283a 	ret

000088ec <__multiply>:
    88ec:	deffef04 	addi	sp,sp,-68
    88f0:	dc400815 	stw	r17,32(sp)
    88f4:	dc000715 	stw	r16,28(sp)
    88f8:	34400417 	ldw	r17,16(r6)
    88fc:	2c000417 	ldw	r16,16(r5)
    8900:	dd800d15 	stw	r22,52(sp)
    8904:	dc800915 	stw	r18,36(sp)
    8908:	dfc01015 	stw	ra,64(sp)
    890c:	df000f15 	stw	fp,60(sp)
    8910:	ddc00e15 	stw	r23,56(sp)
    8914:	dd400c15 	stw	r21,48(sp)
    8918:	dd000b15 	stw	r20,44(sp)
    891c:	dcc00a15 	stw	r19,40(sp)
    8920:	2825883a 	mov	r18,r5
    8924:	302d883a 	mov	r22,r6
    8928:	8440050e 	bge	r16,r17,8940 <__multiply+0x54>
    892c:	8007883a 	mov	r3,r16
    8930:	3025883a 	mov	r18,r6
    8934:	8821883a 	mov	r16,r17
    8938:	282d883a 	mov	r22,r5
    893c:	1823883a 	mov	r17,r3
    8940:	90800217 	ldw	r2,8(r18)
    8944:	8447883a 	add	r3,r16,r17
    8948:	d8c00215 	stw	r3,8(sp)
    894c:	91400117 	ldw	r5,4(r18)
    8950:	10c0010e 	bge	r2,r3,8958 <__multiply+0x6c>
    8954:	29400044 	addi	r5,r5,1
    8958:	000847c0 	call	847c <_Balloc>
    895c:	d8c00217 	ldw	r3,8(sp)
    8960:	d8800615 	stw	r2,24(sp)
    8964:	18eb883a 	add	r21,r3,r3
    8968:	ad6b883a 	add	r21,r21,r21
    896c:	10c00504 	addi	r3,r2,20
    8970:	1d6b883a 	add	r21,r3,r21
    8974:	d8c00115 	stw	r3,4(sp)
    8978:	dd400315 	stw	r21,12(sp)
    897c:	1805883a 	mov	r2,r3
    8980:	1d40042e 	bgeu	r3,r21,8994 <__multiply+0xa8>
    8984:	d8c00317 	ldw	r3,12(sp)
    8988:	10000015 	stw	zero,0(r2)
    898c:	10800104 	addi	r2,r2,4
    8990:	10fffc36 	bltu	r2,r3,8984 <_gp+0xfffec828>
    8994:	8c63883a 	add	r17,r17,r17
    8998:	b5800504 	addi	r22,r22,20
    899c:	8c63883a 	add	r17,r17,r17
    89a0:	94800504 	addi	r18,r18,20
    89a4:	8421883a 	add	r16,r16,r16
    89a8:	b463883a 	add	r17,r22,r17
    89ac:	8421883a 	add	r16,r16,r16
    89b0:	dd800015 	stw	r22,0(sp)
    89b4:	dc800415 	stw	r18,16(sp)
    89b8:	dc400515 	stw	r17,20(sp)
    89bc:	9429883a 	add	r20,r18,r16
    89c0:	b4404f2e 	bgeu	r22,r17,8b00 <__multiply+0x214>
    89c4:	d8c00017 	ldw	r3,0(sp)
    89c8:	1c800017 	ldw	r18,0(r3)
    89cc:	947fffcc 	andi	r17,r18,65535
    89d0:	88001e26 	beq	r17,zero,8a4c <__multiply+0x160>
    89d4:	dd800117 	ldw	r22,4(sp)
    89d8:	dd400417 	ldw	r21,16(sp)
    89dc:	0027883a 	mov	r19,zero
    89e0:	ac800017 	ldw	r18,0(r21)
    89e4:	b4000017 	ldw	r16,0(r22)
    89e8:	880b883a 	mov	r5,r17
    89ec:	913fffcc 	andi	r4,r18,65535
    89f0:	000cb300 	call	cb30 <__mulsi3>
    89f4:	9008d43a 	srli	r4,r18,16
    89f8:	84bfffcc 	andi	r18,r16,65535
    89fc:	1485883a 	add	r2,r2,r18
    8a00:	14e5883a 	add	r18,r2,r19
    8a04:	8020d43a 	srli	r16,r16,16
    8a08:	9026d43a 	srli	r19,r18,16
    8a0c:	880b883a 	mov	r5,r17
    8a10:	000cb300 	call	cb30 <__mulsi3>
    8a14:	1405883a 	add	r2,r2,r16
    8a18:	14e1883a 	add	r16,r2,r19
    8a1c:	90ffffcc 	andi	r3,r18,65535
    8a20:	8024943a 	slli	r18,r16,16
    8a24:	ad400104 	addi	r21,r21,4
    8a28:	b005883a 	mov	r2,r22
    8a2c:	90c6b03a 	or	r3,r18,r3
    8a30:	b0c00015 	stw	r3,0(r22)
    8a34:	8026d43a 	srli	r19,r16,16
    8a38:	b5800104 	addi	r22,r22,4
    8a3c:	ad3fe836 	bltu	r21,r20,89e0 <_gp+0xfffec884>
    8a40:	d8c00017 	ldw	r3,0(sp)
    8a44:	14c00115 	stw	r19,4(r2)
    8a48:	1c800017 	ldw	r18,0(r3)
    8a4c:	9024d43a 	srli	r18,r18,16
    8a50:	90002226 	beq	r18,zero,8adc <__multiply+0x1f0>
    8a54:	d8c00117 	ldw	r3,4(sp)
    8a58:	dd800417 	ldw	r22,16(sp)
    8a5c:	002f883a 	mov	r23,zero
    8a60:	1f000017 	ldw	fp,0(r3)
    8a64:	1823883a 	mov	r17,r3
    8a68:	182b883a 	mov	r21,r3
    8a6c:	e021883a 	mov	r16,fp
    8a70:	00000106 	br	8a78 <__multiply+0x18c>
    8a74:	982b883a 	mov	r21,r19
    8a78:	b100000b 	ldhu	r4,0(r22)
    8a7c:	8020d43a 	srli	r16,r16,16
    8a80:	900b883a 	mov	r5,r18
    8a84:	000cb300 	call	cb30 <__mulsi3>
    8a88:	1405883a 	add	r2,r2,r16
    8a8c:	15ef883a 	add	r23,r2,r23
    8a90:	b804943a 	slli	r2,r23,16
    8a94:	e0ffffcc 	andi	r3,fp,65535
    8a98:	8c400104 	addi	r17,r17,4
    8a9c:	10c6b03a 	or	r3,r2,r3
    8aa0:	88ffff15 	stw	r3,-4(r17)
    8aa4:	b5800104 	addi	r22,r22,4
    8aa8:	b13fff17 	ldw	r4,-4(r22)
    8aac:	acc00104 	addi	r19,r21,4
    8ab0:	900b883a 	mov	r5,r18
    8ab4:	2008d43a 	srli	r4,r4,16
    8ab8:	9c000017 	ldw	r16,0(r19)
    8abc:	000cb300 	call	cb30 <__mulsi3>
    8ac0:	b806d43a 	srli	r3,r23,16
    8ac4:	813fffcc 	andi	r4,r16,65535
    8ac8:	1105883a 	add	r2,r2,r4
    8acc:	10f9883a 	add	fp,r2,r3
    8ad0:	e02ed43a 	srli	r23,fp,16
    8ad4:	b53fe736 	bltu	r22,r20,8a74 <_gp+0xfffec918>
    8ad8:	af000115 	stw	fp,4(r21)
    8adc:	d8c00017 	ldw	r3,0(sp)
    8ae0:	d9000517 	ldw	r4,20(sp)
    8ae4:	18c00104 	addi	r3,r3,4
    8ae8:	d8c00015 	stw	r3,0(sp)
    8aec:	d8c00117 	ldw	r3,4(sp)
    8af0:	18c00104 	addi	r3,r3,4
    8af4:	d8c00115 	stw	r3,4(sp)
    8af8:	d8c00017 	ldw	r3,0(sp)
    8afc:	193fb136 	bltu	r3,r4,89c4 <_gp+0xfffec868>
    8b00:	d8c00217 	ldw	r3,8(sp)
    8b04:	00c00c0e 	bge	zero,r3,8b38 <__multiply+0x24c>
    8b08:	d8c00317 	ldw	r3,12(sp)
    8b0c:	18bfff17 	ldw	r2,-4(r3)
    8b10:	1d7fff04 	addi	r21,r3,-4
    8b14:	10000326 	beq	r2,zero,8b24 <__multiply+0x238>
    8b18:	00000706 	br	8b38 <__multiply+0x24c>
    8b1c:	a8800017 	ldw	r2,0(r21)
    8b20:	1000051e 	bne	r2,zero,8b38 <__multiply+0x24c>
    8b24:	d8c00217 	ldw	r3,8(sp)
    8b28:	ad7fff04 	addi	r21,r21,-4
    8b2c:	18ffffc4 	addi	r3,r3,-1
    8b30:	d8c00215 	stw	r3,8(sp)
    8b34:	183ff91e 	bne	r3,zero,8b1c <_gp+0xfffec9c0>
    8b38:	d8c00617 	ldw	r3,24(sp)
    8b3c:	d9000217 	ldw	r4,8(sp)
    8b40:	1805883a 	mov	r2,r3
    8b44:	19000415 	stw	r4,16(r3)
    8b48:	dfc01017 	ldw	ra,64(sp)
    8b4c:	df000f17 	ldw	fp,60(sp)
    8b50:	ddc00e17 	ldw	r23,56(sp)
    8b54:	dd800d17 	ldw	r22,52(sp)
    8b58:	dd400c17 	ldw	r21,48(sp)
    8b5c:	dd000b17 	ldw	r20,44(sp)
    8b60:	dcc00a17 	ldw	r19,40(sp)
    8b64:	dc800917 	ldw	r18,36(sp)
    8b68:	dc400817 	ldw	r17,32(sp)
    8b6c:	dc000717 	ldw	r16,28(sp)
    8b70:	dec01104 	addi	sp,sp,68
    8b74:	f800283a 	ret

00008b78 <__pow5mult>:
    8b78:	defffa04 	addi	sp,sp,-24
    8b7c:	dcc00315 	stw	r19,12(sp)
    8b80:	dc000015 	stw	r16,0(sp)
    8b84:	dfc00515 	stw	ra,20(sp)
    8b88:	dd000415 	stw	r20,16(sp)
    8b8c:	dc800215 	stw	r18,8(sp)
    8b90:	dc400115 	stw	r17,4(sp)
    8b94:	308000cc 	andi	r2,r6,3
    8b98:	3021883a 	mov	r16,r6
    8b9c:	2027883a 	mov	r19,r4
    8ba0:	10002f1e 	bne	r2,zero,8c60 <__pow5mult+0xe8>
    8ba4:	2825883a 	mov	r18,r5
    8ba8:	8021d0ba 	srai	r16,r16,2
    8bac:	80001a26 	beq	r16,zero,8c18 <__pow5mult+0xa0>
    8bb0:	9c401217 	ldw	r17,72(r19)
    8bb4:	8800061e 	bne	r17,zero,8bd0 <__pow5mult+0x58>
    8bb8:	00003406 	br	8c8c <__pow5mult+0x114>
    8bbc:	8021d07a 	srai	r16,r16,1
    8bc0:	80001526 	beq	r16,zero,8c18 <__pow5mult+0xa0>
    8bc4:	88800017 	ldw	r2,0(r17)
    8bc8:	10001c26 	beq	r2,zero,8c3c <__pow5mult+0xc4>
    8bcc:	1023883a 	mov	r17,r2
    8bd0:	8080004c 	andi	r2,r16,1
    8bd4:	103ff926 	beq	r2,zero,8bbc <_gp+0xfffeca60>
    8bd8:	880d883a 	mov	r6,r17
    8bdc:	900b883a 	mov	r5,r18
    8be0:	9809883a 	mov	r4,r19
    8be4:	00088ec0 	call	88ec <__multiply>
    8be8:	90001b26 	beq	r18,zero,8c58 <__pow5mult+0xe0>
    8bec:	91000117 	ldw	r4,4(r18)
    8bf0:	98c01317 	ldw	r3,76(r19)
    8bf4:	8021d07a 	srai	r16,r16,1
    8bf8:	2109883a 	add	r4,r4,r4
    8bfc:	2109883a 	add	r4,r4,r4
    8c00:	1907883a 	add	r3,r3,r4
    8c04:	19000017 	ldw	r4,0(r3)
    8c08:	91000015 	stw	r4,0(r18)
    8c0c:	1c800015 	stw	r18,0(r3)
    8c10:	1025883a 	mov	r18,r2
    8c14:	803feb1e 	bne	r16,zero,8bc4 <_gp+0xfffeca68>
    8c18:	9005883a 	mov	r2,r18
    8c1c:	dfc00517 	ldw	ra,20(sp)
    8c20:	dd000417 	ldw	r20,16(sp)
    8c24:	dcc00317 	ldw	r19,12(sp)
    8c28:	dc800217 	ldw	r18,8(sp)
    8c2c:	dc400117 	ldw	r17,4(sp)
    8c30:	dc000017 	ldw	r16,0(sp)
    8c34:	dec00604 	addi	sp,sp,24
    8c38:	f800283a 	ret
    8c3c:	880d883a 	mov	r6,r17
    8c40:	880b883a 	mov	r5,r17
    8c44:	9809883a 	mov	r4,r19
    8c48:	00088ec0 	call	88ec <__multiply>
    8c4c:	88800015 	stw	r2,0(r17)
    8c50:	10000015 	stw	zero,0(r2)
    8c54:	003fdd06 	br	8bcc <_gp+0xfffeca70>
    8c58:	1025883a 	mov	r18,r2
    8c5c:	003fd706 	br	8bbc <_gp+0xfffeca60>
    8c60:	10bfffc4 	addi	r2,r2,-1
    8c64:	1085883a 	add	r2,r2,r2
    8c68:	00c00074 	movhi	r3,1
    8c6c:	18c90e04 	addi	r3,r3,9272
    8c70:	1085883a 	add	r2,r2,r2
    8c74:	1885883a 	add	r2,r3,r2
    8c78:	11800017 	ldw	r6,0(r2)
    8c7c:	000f883a 	mov	r7,zero
    8c80:	000854c0 	call	854c <__multadd>
    8c84:	1025883a 	mov	r18,r2
    8c88:	003fc706 	br	8ba8 <_gp+0xfffeca4c>
    8c8c:	05000044 	movi	r20,1
    8c90:	a00b883a 	mov	r5,r20
    8c94:	9809883a 	mov	r4,r19
    8c98:	000847c0 	call	847c <_Balloc>
    8c9c:	1023883a 	mov	r17,r2
    8ca0:	00809c44 	movi	r2,625
    8ca4:	88800515 	stw	r2,20(r17)
    8ca8:	8d000415 	stw	r20,16(r17)
    8cac:	9c401215 	stw	r17,72(r19)
    8cb0:	88000015 	stw	zero,0(r17)
    8cb4:	003fc606 	br	8bd0 <_gp+0xfffeca74>

00008cb8 <__lshift>:
    8cb8:	defff904 	addi	sp,sp,-28
    8cbc:	dd400515 	stw	r21,20(sp)
    8cc0:	dcc00315 	stw	r19,12(sp)
    8cc4:	302bd17a 	srai	r21,r6,5
    8cc8:	2cc00417 	ldw	r19,16(r5)
    8ccc:	28800217 	ldw	r2,8(r5)
    8cd0:	dd000415 	stw	r20,16(sp)
    8cd4:	ace7883a 	add	r19,r21,r19
    8cd8:	dc800215 	stw	r18,8(sp)
    8cdc:	dc400115 	stw	r17,4(sp)
    8ce0:	dc000015 	stw	r16,0(sp)
    8ce4:	dfc00615 	stw	ra,24(sp)
    8ce8:	9c000044 	addi	r16,r19,1
    8cec:	2823883a 	mov	r17,r5
    8cf0:	3029883a 	mov	r20,r6
    8cf4:	2025883a 	mov	r18,r4
    8cf8:	29400117 	ldw	r5,4(r5)
    8cfc:	1400030e 	bge	r2,r16,8d0c <__lshift+0x54>
    8d00:	1085883a 	add	r2,r2,r2
    8d04:	29400044 	addi	r5,r5,1
    8d08:	143ffd16 	blt	r2,r16,8d00 <_gp+0xfffecba4>
    8d0c:	9009883a 	mov	r4,r18
    8d10:	000847c0 	call	847c <_Balloc>
    8d14:	10c00504 	addi	r3,r2,20
    8d18:	0540070e 	bge	zero,r21,8d38 <__lshift+0x80>
    8d1c:	ad6b883a 	add	r21,r21,r21
    8d20:	ad6b883a 	add	r21,r21,r21
    8d24:	1809883a 	mov	r4,r3
    8d28:	1d47883a 	add	r3,r3,r21
    8d2c:	20000015 	stw	zero,0(r4)
    8d30:	21000104 	addi	r4,r4,4
    8d34:	193ffd1e 	bne	r3,r4,8d2c <_gp+0xfffecbd0>
    8d38:	8a000417 	ldw	r8,16(r17)
    8d3c:	89000504 	addi	r4,r17,20
    8d40:	a18007cc 	andi	r6,r20,31
    8d44:	4211883a 	add	r8,r8,r8
    8d48:	4211883a 	add	r8,r8,r8
    8d4c:	2211883a 	add	r8,r4,r8
    8d50:	30002326 	beq	r6,zero,8de0 <__lshift+0x128>
    8d54:	02400804 	movi	r9,32
    8d58:	4993c83a 	sub	r9,r9,r6
    8d5c:	000b883a 	mov	r5,zero
    8d60:	21c00017 	ldw	r7,0(r4)
    8d64:	1815883a 	mov	r10,r3
    8d68:	18c00104 	addi	r3,r3,4
    8d6c:	398e983a 	sll	r7,r7,r6
    8d70:	21000104 	addi	r4,r4,4
    8d74:	394ab03a 	or	r5,r7,r5
    8d78:	197fff15 	stw	r5,-4(r3)
    8d7c:	217fff17 	ldw	r5,-4(r4)
    8d80:	2a4ad83a 	srl	r5,r5,r9
    8d84:	223ff636 	bltu	r4,r8,8d60 <_gp+0xfffecc04>
    8d88:	51400115 	stw	r5,4(r10)
    8d8c:	28001a1e 	bne	r5,zero,8df8 <__lshift+0x140>
    8d90:	843fffc4 	addi	r16,r16,-1
    8d94:	14000415 	stw	r16,16(r2)
    8d98:	88000826 	beq	r17,zero,8dbc <__lshift+0x104>
    8d9c:	89000117 	ldw	r4,4(r17)
    8da0:	90c01317 	ldw	r3,76(r18)
    8da4:	2109883a 	add	r4,r4,r4
    8da8:	2109883a 	add	r4,r4,r4
    8dac:	1907883a 	add	r3,r3,r4
    8db0:	19000017 	ldw	r4,0(r3)
    8db4:	89000015 	stw	r4,0(r17)
    8db8:	1c400015 	stw	r17,0(r3)
    8dbc:	dfc00617 	ldw	ra,24(sp)
    8dc0:	dd400517 	ldw	r21,20(sp)
    8dc4:	dd000417 	ldw	r20,16(sp)
    8dc8:	dcc00317 	ldw	r19,12(sp)
    8dcc:	dc800217 	ldw	r18,8(sp)
    8dd0:	dc400117 	ldw	r17,4(sp)
    8dd4:	dc000017 	ldw	r16,0(sp)
    8dd8:	dec00704 	addi	sp,sp,28
    8ddc:	f800283a 	ret
    8de0:	21400017 	ldw	r5,0(r4)
    8de4:	18c00104 	addi	r3,r3,4
    8de8:	21000104 	addi	r4,r4,4
    8dec:	197fff15 	stw	r5,-4(r3)
    8df0:	223ffb36 	bltu	r4,r8,8de0 <_gp+0xfffecc84>
    8df4:	003fe606 	br	8d90 <_gp+0xfffecc34>
    8df8:	9c000084 	addi	r16,r19,2
    8dfc:	003fe406 	br	8d90 <_gp+0xfffecc34>

00008e00 <__mcmp>:
    8e00:	20800417 	ldw	r2,16(r4)
    8e04:	28c00417 	ldw	r3,16(r5)
    8e08:	10c5c83a 	sub	r2,r2,r3
    8e0c:	1000111e 	bne	r2,zero,8e54 <__mcmp+0x54>
    8e10:	18c7883a 	add	r3,r3,r3
    8e14:	18c7883a 	add	r3,r3,r3
    8e18:	21000504 	addi	r4,r4,20
    8e1c:	29400504 	addi	r5,r5,20
    8e20:	20c5883a 	add	r2,r4,r3
    8e24:	28cb883a 	add	r5,r5,r3
    8e28:	00000106 	br	8e30 <__mcmp+0x30>
    8e2c:	20800a2e 	bgeu	r4,r2,8e58 <__mcmp+0x58>
    8e30:	10bfff04 	addi	r2,r2,-4
    8e34:	297fff04 	addi	r5,r5,-4
    8e38:	11800017 	ldw	r6,0(r2)
    8e3c:	28c00017 	ldw	r3,0(r5)
    8e40:	30fffa26 	beq	r6,r3,8e2c <_gp+0xfffeccd0>
    8e44:	30c00236 	bltu	r6,r3,8e50 <__mcmp+0x50>
    8e48:	00800044 	movi	r2,1
    8e4c:	f800283a 	ret
    8e50:	00bfffc4 	movi	r2,-1
    8e54:	f800283a 	ret
    8e58:	0005883a 	mov	r2,zero
    8e5c:	f800283a 	ret

00008e60 <__mdiff>:
    8e60:	28c00417 	ldw	r3,16(r5)
    8e64:	30800417 	ldw	r2,16(r6)
    8e68:	defffa04 	addi	sp,sp,-24
    8e6c:	dcc00315 	stw	r19,12(sp)
    8e70:	dc800215 	stw	r18,8(sp)
    8e74:	dfc00515 	stw	ra,20(sp)
    8e78:	dd000415 	stw	r20,16(sp)
    8e7c:	dc400115 	stw	r17,4(sp)
    8e80:	dc000015 	stw	r16,0(sp)
    8e84:	1887c83a 	sub	r3,r3,r2
    8e88:	2825883a 	mov	r18,r5
    8e8c:	3027883a 	mov	r19,r6
    8e90:	1800141e 	bne	r3,zero,8ee4 <__mdiff+0x84>
    8e94:	1085883a 	add	r2,r2,r2
    8e98:	1085883a 	add	r2,r2,r2
    8e9c:	2a000504 	addi	r8,r5,20
    8ea0:	34000504 	addi	r16,r6,20
    8ea4:	4087883a 	add	r3,r8,r2
    8ea8:	8085883a 	add	r2,r16,r2
    8eac:	00000106 	br	8eb4 <__mdiff+0x54>
    8eb0:	40c0592e 	bgeu	r8,r3,9018 <__mdiff+0x1b8>
    8eb4:	18ffff04 	addi	r3,r3,-4
    8eb8:	10bfff04 	addi	r2,r2,-4
    8ebc:	19c00017 	ldw	r7,0(r3)
    8ec0:	11400017 	ldw	r5,0(r2)
    8ec4:	397ffa26 	beq	r7,r5,8eb0 <_gp+0xfffecd54>
    8ec8:	3940592e 	bgeu	r7,r5,9030 <__mdiff+0x1d0>
    8ecc:	9005883a 	mov	r2,r18
    8ed0:	4023883a 	mov	r17,r8
    8ed4:	9825883a 	mov	r18,r19
    8ed8:	05000044 	movi	r20,1
    8edc:	1027883a 	mov	r19,r2
    8ee0:	00000406 	br	8ef4 <__mdiff+0x94>
    8ee4:	18005616 	blt	r3,zero,9040 <__mdiff+0x1e0>
    8ee8:	34400504 	addi	r17,r6,20
    8eec:	2c000504 	addi	r16,r5,20
    8ef0:	0029883a 	mov	r20,zero
    8ef4:	91400117 	ldw	r5,4(r18)
    8ef8:	000847c0 	call	847c <_Balloc>
    8efc:	92400417 	ldw	r9,16(r18)
    8f00:	9b000417 	ldw	r12,16(r19)
    8f04:	12c00504 	addi	r11,r2,20
    8f08:	4a51883a 	add	r8,r9,r9
    8f0c:	6319883a 	add	r12,r12,r12
    8f10:	4211883a 	add	r8,r8,r8
    8f14:	6319883a 	add	r12,r12,r12
    8f18:	15000315 	stw	r20,12(r2)
    8f1c:	8211883a 	add	r8,r16,r8
    8f20:	8b19883a 	add	r12,r17,r12
    8f24:	0007883a 	mov	r3,zero
    8f28:	81400017 	ldw	r5,0(r16)
    8f2c:	89c00017 	ldw	r7,0(r17)
    8f30:	59800104 	addi	r6,r11,4
    8f34:	293fffcc 	andi	r4,r5,65535
    8f38:	20c7883a 	add	r3,r4,r3
    8f3c:	393fffcc 	andi	r4,r7,65535
    8f40:	1909c83a 	sub	r4,r3,r4
    8f44:	280ad43a 	srli	r5,r5,16
    8f48:	380ed43a 	srli	r7,r7,16
    8f4c:	2007d43a 	srai	r3,r4,16
    8f50:	213fffcc 	andi	r4,r4,65535
    8f54:	29cbc83a 	sub	r5,r5,r7
    8f58:	28c7883a 	add	r3,r5,r3
    8f5c:	180a943a 	slli	r5,r3,16
    8f60:	8c400104 	addi	r17,r17,4
    8f64:	84000104 	addi	r16,r16,4
    8f68:	2908b03a 	or	r4,r5,r4
    8f6c:	59000015 	stw	r4,0(r11)
    8f70:	1807d43a 	srai	r3,r3,16
    8f74:	3015883a 	mov	r10,r6
    8f78:	3017883a 	mov	r11,r6
    8f7c:	8b3fea36 	bltu	r17,r12,8f28 <_gp+0xfffecdcc>
    8f80:	8200162e 	bgeu	r16,r8,8fdc <__mdiff+0x17c>
    8f84:	8017883a 	mov	r11,r16
    8f88:	59400017 	ldw	r5,0(r11)
    8f8c:	31800104 	addi	r6,r6,4
    8f90:	5ac00104 	addi	r11,r11,4
    8f94:	293fffcc 	andi	r4,r5,65535
    8f98:	20c7883a 	add	r3,r4,r3
    8f9c:	280ed43a 	srli	r7,r5,16
    8fa0:	180bd43a 	srai	r5,r3,16
    8fa4:	193fffcc 	andi	r4,r3,65535
    8fa8:	3947883a 	add	r3,r7,r5
    8fac:	180a943a 	slli	r5,r3,16
    8fb0:	1807d43a 	srai	r3,r3,16
    8fb4:	2908b03a 	or	r4,r5,r4
    8fb8:	313fff15 	stw	r4,-4(r6)
    8fbc:	5a3ff236 	bltu	r11,r8,8f88 <_gp+0xfffece2c>
    8fc0:	0406303a 	nor	r3,zero,r16
    8fc4:	1a07883a 	add	r3,r3,r8
    8fc8:	1806d0ba 	srli	r3,r3,2
    8fcc:	18c00044 	addi	r3,r3,1
    8fd0:	18c7883a 	add	r3,r3,r3
    8fd4:	18c7883a 	add	r3,r3,r3
    8fd8:	50d5883a 	add	r10,r10,r3
    8fdc:	50ffff04 	addi	r3,r10,-4
    8fe0:	2000041e 	bne	r4,zero,8ff4 <__mdiff+0x194>
    8fe4:	18ffff04 	addi	r3,r3,-4
    8fe8:	19000017 	ldw	r4,0(r3)
    8fec:	4a7fffc4 	addi	r9,r9,-1
    8ff0:	203ffc26 	beq	r4,zero,8fe4 <_gp+0xfffece88>
    8ff4:	12400415 	stw	r9,16(r2)
    8ff8:	dfc00517 	ldw	ra,20(sp)
    8ffc:	dd000417 	ldw	r20,16(sp)
    9000:	dcc00317 	ldw	r19,12(sp)
    9004:	dc800217 	ldw	r18,8(sp)
    9008:	dc400117 	ldw	r17,4(sp)
    900c:	dc000017 	ldw	r16,0(sp)
    9010:	dec00604 	addi	sp,sp,24
    9014:	f800283a 	ret
    9018:	000b883a 	mov	r5,zero
    901c:	000847c0 	call	847c <_Balloc>
    9020:	00c00044 	movi	r3,1
    9024:	10c00415 	stw	r3,16(r2)
    9028:	10000515 	stw	zero,20(r2)
    902c:	003ff206 	br	8ff8 <_gp+0xfffece9c>
    9030:	8023883a 	mov	r17,r16
    9034:	0029883a 	mov	r20,zero
    9038:	4021883a 	mov	r16,r8
    903c:	003fad06 	br	8ef4 <_gp+0xfffecd98>
    9040:	9005883a 	mov	r2,r18
    9044:	94400504 	addi	r17,r18,20
    9048:	9c000504 	addi	r16,r19,20
    904c:	9825883a 	mov	r18,r19
    9050:	05000044 	movi	r20,1
    9054:	1027883a 	mov	r19,r2
    9058:	003fa606 	br	8ef4 <_gp+0xfffecd98>

0000905c <__ulp>:
    905c:	295ffc2c 	andhi	r5,r5,32752
    9060:	00bf3034 	movhi	r2,64704
    9064:	2887883a 	add	r3,r5,r2
    9068:	00c0020e 	bge	zero,r3,9074 <__ulp+0x18>
    906c:	0005883a 	mov	r2,zero
    9070:	f800283a 	ret
    9074:	00c7c83a 	sub	r3,zero,r3
    9078:	1807d53a 	srai	r3,r3,20
    907c:	008004c4 	movi	r2,19
    9080:	10c00b0e 	bge	r2,r3,90b0 <__ulp+0x54>
    9084:	18bffb04 	addi	r2,r3,-20
    9088:	01000784 	movi	r4,30
    908c:	0007883a 	mov	r3,zero
    9090:	20800516 	blt	r4,r2,90a8 <__ulp+0x4c>
    9094:	010007c4 	movi	r4,31
    9098:	2089c83a 	sub	r4,r4,r2
    909c:	00800044 	movi	r2,1
    90a0:	1104983a 	sll	r2,r2,r4
    90a4:	f800283a 	ret
    90a8:	00800044 	movi	r2,1
    90ac:	f800283a 	ret
    90b0:	01400234 	movhi	r5,8
    90b4:	28c7d83a 	sra	r3,r5,r3
    90b8:	0005883a 	mov	r2,zero
    90bc:	f800283a 	ret

000090c0 <__b2d>:
    90c0:	defffa04 	addi	sp,sp,-24
    90c4:	dc000015 	stw	r16,0(sp)
    90c8:	24000417 	ldw	r16,16(r4)
    90cc:	dc400115 	stw	r17,4(sp)
    90d0:	24400504 	addi	r17,r4,20
    90d4:	8421883a 	add	r16,r16,r16
    90d8:	8421883a 	add	r16,r16,r16
    90dc:	8c21883a 	add	r16,r17,r16
    90e0:	dc800215 	stw	r18,8(sp)
    90e4:	84bfff17 	ldw	r18,-4(r16)
    90e8:	dd000415 	stw	r20,16(sp)
    90ec:	dcc00315 	stw	r19,12(sp)
    90f0:	9009883a 	mov	r4,r18
    90f4:	2829883a 	mov	r20,r5
    90f8:	dfc00515 	stw	ra,20(sp)
    90fc:	00087980 	call	8798 <__hi0bits>
    9100:	00c00804 	movi	r3,32
    9104:	1889c83a 	sub	r4,r3,r2
    9108:	a1000015 	stw	r4,0(r20)
    910c:	01000284 	movi	r4,10
    9110:	84ffff04 	addi	r19,r16,-4
    9114:	20801216 	blt	r4,r2,9160 <__b2d+0xa0>
    9118:	018002c4 	movi	r6,11
    911c:	308dc83a 	sub	r6,r6,r2
    9120:	9186d83a 	srl	r3,r18,r6
    9124:	18cffc34 	orhi	r3,r3,16368
    9128:	8cc0212e 	bgeu	r17,r19,91b0 <__b2d+0xf0>
    912c:	813ffe17 	ldw	r4,-8(r16)
    9130:	218cd83a 	srl	r6,r4,r6
    9134:	10800544 	addi	r2,r2,21
    9138:	9084983a 	sll	r2,r18,r2
    913c:	1184b03a 	or	r2,r2,r6
    9140:	dfc00517 	ldw	ra,20(sp)
    9144:	dd000417 	ldw	r20,16(sp)
    9148:	dcc00317 	ldw	r19,12(sp)
    914c:	dc800217 	ldw	r18,8(sp)
    9150:	dc400117 	ldw	r17,4(sp)
    9154:	dc000017 	ldw	r16,0(sp)
    9158:	dec00604 	addi	sp,sp,24
    915c:	f800283a 	ret
    9160:	8cc00f2e 	bgeu	r17,r19,91a0 <__b2d+0xe0>
    9164:	117ffd44 	addi	r5,r2,-11
    9168:	80bffe17 	ldw	r2,-8(r16)
    916c:	28000e26 	beq	r5,zero,91a8 <__b2d+0xe8>
    9170:	1949c83a 	sub	r4,r3,r5
    9174:	9164983a 	sll	r18,r18,r5
    9178:	1106d83a 	srl	r3,r2,r4
    917c:	81bffe04 	addi	r6,r16,-8
    9180:	948ffc34 	orhi	r18,r18,16368
    9184:	90c6b03a 	or	r3,r18,r3
    9188:	89800e2e 	bgeu	r17,r6,91c4 <__b2d+0x104>
    918c:	81bffd17 	ldw	r6,-12(r16)
    9190:	1144983a 	sll	r2,r2,r5
    9194:	310ad83a 	srl	r5,r6,r4
    9198:	2884b03a 	or	r2,r5,r2
    919c:	003fe806 	br	9140 <_gp+0xfffecfe4>
    91a0:	10bffd44 	addi	r2,r2,-11
    91a4:	1000041e 	bne	r2,zero,91b8 <__b2d+0xf8>
    91a8:	90cffc34 	orhi	r3,r18,16368
    91ac:	003fe406 	br	9140 <_gp+0xfffecfe4>
    91b0:	000d883a 	mov	r6,zero
    91b4:	003fdf06 	br	9134 <_gp+0xfffecfd8>
    91b8:	90a4983a 	sll	r18,r18,r2
    91bc:	0005883a 	mov	r2,zero
    91c0:	003ff906 	br	91a8 <_gp+0xfffed04c>
    91c4:	1144983a 	sll	r2,r2,r5
    91c8:	003fdd06 	br	9140 <_gp+0xfffecfe4>

000091cc <__d2b>:
    91cc:	defff804 	addi	sp,sp,-32
    91d0:	dc000215 	stw	r16,8(sp)
    91d4:	3021883a 	mov	r16,r6
    91d8:	dc400315 	stw	r17,12(sp)
    91dc:	8022907a 	slli	r17,r16,1
    91e0:	dd000615 	stw	r20,24(sp)
    91e4:	2829883a 	mov	r20,r5
    91e8:	01400044 	movi	r5,1
    91ec:	dcc00515 	stw	r19,20(sp)
    91f0:	dc800415 	stw	r18,16(sp)
    91f4:	dfc00715 	stw	ra,28(sp)
    91f8:	3825883a 	mov	r18,r7
    91fc:	8822d57a 	srli	r17,r17,21
    9200:	000847c0 	call	847c <_Balloc>
    9204:	1027883a 	mov	r19,r2
    9208:	00800434 	movhi	r2,16
    920c:	10bfffc4 	addi	r2,r2,-1
    9210:	808c703a 	and	r6,r16,r2
    9214:	88000126 	beq	r17,zero,921c <__d2b+0x50>
    9218:	31800434 	orhi	r6,r6,16
    921c:	d9800015 	stw	r6,0(sp)
    9220:	a0002426 	beq	r20,zero,92b4 <__d2b+0xe8>
    9224:	d9000104 	addi	r4,sp,4
    9228:	dd000115 	stw	r20,4(sp)
    922c:	00088000 	call	8800 <__lo0bits>
    9230:	d8c00017 	ldw	r3,0(sp)
    9234:	10002f1e 	bne	r2,zero,92f4 <__d2b+0x128>
    9238:	d9000117 	ldw	r4,4(sp)
    923c:	99000515 	stw	r4,20(r19)
    9240:	1821003a 	cmpeq	r16,r3,zero
    9244:	01000084 	movi	r4,2
    9248:	2421c83a 	sub	r16,r4,r16
    924c:	98c00615 	stw	r3,24(r19)
    9250:	9c000415 	stw	r16,16(r19)
    9254:	88001f1e 	bne	r17,zero,92d4 <__d2b+0x108>
    9258:	10bef384 	addi	r2,r2,-1074
    925c:	90800015 	stw	r2,0(r18)
    9260:	00900034 	movhi	r2,16384
    9264:	10bfffc4 	addi	r2,r2,-1
    9268:	8085883a 	add	r2,r16,r2
    926c:	1085883a 	add	r2,r2,r2
    9270:	1085883a 	add	r2,r2,r2
    9274:	9885883a 	add	r2,r19,r2
    9278:	11000517 	ldw	r4,20(r2)
    927c:	8020917a 	slli	r16,r16,5
    9280:	00087980 	call	8798 <__hi0bits>
    9284:	d8c00817 	ldw	r3,32(sp)
    9288:	8085c83a 	sub	r2,r16,r2
    928c:	18800015 	stw	r2,0(r3)
    9290:	9805883a 	mov	r2,r19
    9294:	dfc00717 	ldw	ra,28(sp)
    9298:	dd000617 	ldw	r20,24(sp)
    929c:	dcc00517 	ldw	r19,20(sp)
    92a0:	dc800417 	ldw	r18,16(sp)
    92a4:	dc400317 	ldw	r17,12(sp)
    92a8:	dc000217 	ldw	r16,8(sp)
    92ac:	dec00804 	addi	sp,sp,32
    92b0:	f800283a 	ret
    92b4:	d809883a 	mov	r4,sp
    92b8:	00088000 	call	8800 <__lo0bits>
    92bc:	d8c00017 	ldw	r3,0(sp)
    92c0:	04000044 	movi	r16,1
    92c4:	9c000415 	stw	r16,16(r19)
    92c8:	98c00515 	stw	r3,20(r19)
    92cc:	10800804 	addi	r2,r2,32
    92d0:	883fe126 	beq	r17,zero,9258 <_gp+0xfffed0fc>
    92d4:	00c00d44 	movi	r3,53
    92d8:	8c7ef344 	addi	r17,r17,-1075
    92dc:	88a3883a 	add	r17,r17,r2
    92e0:	1885c83a 	sub	r2,r3,r2
    92e4:	d8c00817 	ldw	r3,32(sp)
    92e8:	94400015 	stw	r17,0(r18)
    92ec:	18800015 	stw	r2,0(r3)
    92f0:	003fe706 	br	9290 <_gp+0xfffed134>
    92f4:	01000804 	movi	r4,32
    92f8:	2089c83a 	sub	r4,r4,r2
    92fc:	1908983a 	sll	r4,r3,r4
    9300:	d9400117 	ldw	r5,4(sp)
    9304:	1886d83a 	srl	r3,r3,r2
    9308:	2148b03a 	or	r4,r4,r5
    930c:	99000515 	stw	r4,20(r19)
    9310:	d8c00015 	stw	r3,0(sp)
    9314:	003fca06 	br	9240 <_gp+0xfffed0e4>

00009318 <__ratio>:
    9318:	defff904 	addi	sp,sp,-28
    931c:	dc400315 	stw	r17,12(sp)
    9320:	2823883a 	mov	r17,r5
    9324:	d9400104 	addi	r5,sp,4
    9328:	dfc00615 	stw	ra,24(sp)
    932c:	dcc00515 	stw	r19,20(sp)
    9330:	dc800415 	stw	r18,16(sp)
    9334:	2027883a 	mov	r19,r4
    9338:	dc000215 	stw	r16,8(sp)
    933c:	00090c00 	call	90c0 <__b2d>
    9340:	d80b883a 	mov	r5,sp
    9344:	8809883a 	mov	r4,r17
    9348:	1025883a 	mov	r18,r2
    934c:	1821883a 	mov	r16,r3
    9350:	00090c00 	call	90c0 <__b2d>
    9354:	8a000417 	ldw	r8,16(r17)
    9358:	99000417 	ldw	r4,16(r19)
    935c:	d9400117 	ldw	r5,4(sp)
    9360:	2209c83a 	sub	r4,r4,r8
    9364:	2010917a 	slli	r8,r4,5
    9368:	d9000017 	ldw	r4,0(sp)
    936c:	2909c83a 	sub	r4,r5,r4
    9370:	4109883a 	add	r4,r8,r4
    9374:	01000e0e 	bge	zero,r4,93b0 <__ratio+0x98>
    9378:	2008953a 	slli	r4,r4,20
    937c:	2421883a 	add	r16,r4,r16
    9380:	100d883a 	mov	r6,r2
    9384:	180f883a 	mov	r7,r3
    9388:	9009883a 	mov	r4,r18
    938c:	800b883a 	mov	r5,r16
    9390:	000d4040 	call	d404 <__divdf3>
    9394:	dfc00617 	ldw	ra,24(sp)
    9398:	dcc00517 	ldw	r19,20(sp)
    939c:	dc800417 	ldw	r18,16(sp)
    93a0:	dc400317 	ldw	r17,12(sp)
    93a4:	dc000217 	ldw	r16,8(sp)
    93a8:	dec00704 	addi	sp,sp,28
    93ac:	f800283a 	ret
    93b0:	2008953a 	slli	r4,r4,20
    93b4:	1907c83a 	sub	r3,r3,r4
    93b8:	003ff106 	br	9380 <_gp+0xfffed224>

000093bc <_mprec_log10>:
    93bc:	defffe04 	addi	sp,sp,-8
    93c0:	dc000015 	stw	r16,0(sp)
    93c4:	dfc00115 	stw	ra,4(sp)
    93c8:	008005c4 	movi	r2,23
    93cc:	2021883a 	mov	r16,r4
    93d0:	11000d0e 	bge	r2,r4,9408 <_mprec_log10+0x4c>
    93d4:	0005883a 	mov	r2,zero
    93d8:	00cffc34 	movhi	r3,16368
    93dc:	843fffc4 	addi	r16,r16,-1
    93e0:	000d883a 	mov	r6,zero
    93e4:	01d00934 	movhi	r7,16420
    93e8:	1009883a 	mov	r4,r2
    93ec:	180b883a 	mov	r5,r3
    93f0:	000e02c0 	call	e02c <__muldf3>
    93f4:	803ff91e 	bne	r16,zero,93dc <_gp+0xfffed280>
    93f8:	dfc00117 	ldw	ra,4(sp)
    93fc:	dc000017 	ldw	r16,0(sp)
    9400:	dec00204 	addi	sp,sp,8
    9404:	f800283a 	ret
    9408:	202090fa 	slli	r16,r4,3
    940c:	00800074 	movhi	r2,1
    9410:	10892504 	addi	r2,r2,9364
    9414:	1421883a 	add	r16,r2,r16
    9418:	80800017 	ldw	r2,0(r16)
    941c:	80c00117 	ldw	r3,4(r16)
    9420:	dfc00117 	ldw	ra,4(sp)
    9424:	dc000017 	ldw	r16,0(sp)
    9428:	dec00204 	addi	sp,sp,8
    942c:	f800283a 	ret

00009430 <__copybits>:
    9430:	297fffc4 	addi	r5,r5,-1
    9434:	280fd17a 	srai	r7,r5,5
    9438:	30c00417 	ldw	r3,16(r6)
    943c:	30800504 	addi	r2,r6,20
    9440:	39c00044 	addi	r7,r7,1
    9444:	18c7883a 	add	r3,r3,r3
    9448:	39cf883a 	add	r7,r7,r7
    944c:	18c7883a 	add	r3,r3,r3
    9450:	39cf883a 	add	r7,r7,r7
    9454:	10c7883a 	add	r3,r2,r3
    9458:	21cf883a 	add	r7,r4,r7
    945c:	10c00d2e 	bgeu	r2,r3,9494 <__copybits+0x64>
    9460:	200b883a 	mov	r5,r4
    9464:	12000017 	ldw	r8,0(r2)
    9468:	29400104 	addi	r5,r5,4
    946c:	10800104 	addi	r2,r2,4
    9470:	2a3fff15 	stw	r8,-4(r5)
    9474:	10fffb36 	bltu	r2,r3,9464 <_gp+0xfffed308>
    9478:	1985c83a 	sub	r2,r3,r6
    947c:	10bffac4 	addi	r2,r2,-21
    9480:	1004d0ba 	srli	r2,r2,2
    9484:	10800044 	addi	r2,r2,1
    9488:	1085883a 	add	r2,r2,r2
    948c:	1085883a 	add	r2,r2,r2
    9490:	2089883a 	add	r4,r4,r2
    9494:	21c0032e 	bgeu	r4,r7,94a4 <__copybits+0x74>
    9498:	20000015 	stw	zero,0(r4)
    949c:	21000104 	addi	r4,r4,4
    94a0:	21fffd36 	bltu	r4,r7,9498 <_gp+0xfffed33c>
    94a4:	f800283a 	ret

000094a8 <__any_on>:
    94a8:	20c00417 	ldw	r3,16(r4)
    94ac:	2805d17a 	srai	r2,r5,5
    94b0:	21000504 	addi	r4,r4,20
    94b4:	18800d0e 	bge	r3,r2,94ec <__any_on+0x44>
    94b8:	18c7883a 	add	r3,r3,r3
    94bc:	18c7883a 	add	r3,r3,r3
    94c0:	20c7883a 	add	r3,r4,r3
    94c4:	20c0192e 	bgeu	r4,r3,952c <__any_on+0x84>
    94c8:	18bfff17 	ldw	r2,-4(r3)
    94cc:	18ffff04 	addi	r3,r3,-4
    94d0:	1000041e 	bne	r2,zero,94e4 <__any_on+0x3c>
    94d4:	20c0142e 	bgeu	r4,r3,9528 <__any_on+0x80>
    94d8:	18ffff04 	addi	r3,r3,-4
    94dc:	19400017 	ldw	r5,0(r3)
    94e0:	283ffc26 	beq	r5,zero,94d4 <_gp+0xfffed378>
    94e4:	00800044 	movi	r2,1
    94e8:	f800283a 	ret
    94ec:	10c00a0e 	bge	r2,r3,9518 <__any_on+0x70>
    94f0:	1085883a 	add	r2,r2,r2
    94f4:	1085883a 	add	r2,r2,r2
    94f8:	294007cc 	andi	r5,r5,31
    94fc:	2087883a 	add	r3,r4,r2
    9500:	283ff026 	beq	r5,zero,94c4 <_gp+0xfffed368>
    9504:	19800017 	ldw	r6,0(r3)
    9508:	3144d83a 	srl	r2,r6,r5
    950c:	114a983a 	sll	r5,r2,r5
    9510:	317ff41e 	bne	r6,r5,94e4 <_gp+0xfffed388>
    9514:	003feb06 	br	94c4 <_gp+0xfffed368>
    9518:	1085883a 	add	r2,r2,r2
    951c:	1085883a 	add	r2,r2,r2
    9520:	2087883a 	add	r3,r4,r2
    9524:	003fe706 	br	94c4 <_gp+0xfffed368>
    9528:	f800283a 	ret
    952c:	0005883a 	mov	r2,zero
    9530:	f800283a 	ret

00009534 <_realloc_r>:
    9534:	defff604 	addi	sp,sp,-40
    9538:	dc800215 	stw	r18,8(sp)
    953c:	dfc00915 	stw	ra,36(sp)
    9540:	df000815 	stw	fp,32(sp)
    9544:	ddc00715 	stw	r23,28(sp)
    9548:	dd800615 	stw	r22,24(sp)
    954c:	dd400515 	stw	r21,20(sp)
    9550:	dd000415 	stw	r20,16(sp)
    9554:	dcc00315 	stw	r19,12(sp)
    9558:	dc400115 	stw	r17,4(sp)
    955c:	dc000015 	stw	r16,0(sp)
    9560:	3025883a 	mov	r18,r6
    9564:	2800b726 	beq	r5,zero,9844 <_realloc_r+0x310>
    9568:	282b883a 	mov	r21,r5
    956c:	2029883a 	mov	r20,r4
    9570:	000f9980 	call	f998 <__malloc_lock>
    9574:	a8bfff17 	ldw	r2,-4(r21)
    9578:	043fff04 	movi	r16,-4
    957c:	90c002c4 	addi	r3,r18,11
    9580:	01000584 	movi	r4,22
    9584:	acfffe04 	addi	r19,r21,-8
    9588:	1420703a 	and	r16,r2,r16
    958c:	20c0332e 	bgeu	r4,r3,965c <_realloc_r+0x128>
    9590:	047ffe04 	movi	r17,-8
    9594:	1c62703a 	and	r17,r3,r17
    9598:	8807883a 	mov	r3,r17
    959c:	88005816 	blt	r17,zero,9700 <_realloc_r+0x1cc>
    95a0:	8c805736 	bltu	r17,r18,9700 <_realloc_r+0x1cc>
    95a4:	80c0300e 	bge	r16,r3,9668 <_realloc_r+0x134>
    95a8:	07000074 	movhi	fp,1
    95ac:	e70ad304 	addi	fp,fp,11084
    95b0:	e1c00217 	ldw	r7,8(fp)
    95b4:	9c09883a 	add	r4,r19,r16
    95b8:	22000117 	ldw	r8,4(r4)
    95bc:	21c06326 	beq	r4,r7,974c <_realloc_r+0x218>
    95c0:	017fff84 	movi	r5,-2
    95c4:	414a703a 	and	r5,r8,r5
    95c8:	214b883a 	add	r5,r4,r5
    95cc:	29800117 	ldw	r6,4(r5)
    95d0:	3180004c 	andi	r6,r6,1
    95d4:	30003f26 	beq	r6,zero,96d4 <_realloc_r+0x1a0>
    95d8:	1080004c 	andi	r2,r2,1
    95dc:	10008326 	beq	r2,zero,97ec <_realloc_r+0x2b8>
    95e0:	900b883a 	mov	r5,r18
    95e4:	a009883a 	mov	r4,r20
    95e8:	00077c00 	call	77c0 <_malloc_r>
    95ec:	1025883a 	mov	r18,r2
    95f0:	10011e26 	beq	r2,zero,9a6c <_realloc_r+0x538>
    95f4:	a93fff17 	ldw	r4,-4(r21)
    95f8:	10fffe04 	addi	r3,r2,-8
    95fc:	00bfff84 	movi	r2,-2
    9600:	2084703a 	and	r2,r4,r2
    9604:	9885883a 	add	r2,r19,r2
    9608:	1880ee26 	beq	r3,r2,99c4 <_realloc_r+0x490>
    960c:	81bfff04 	addi	r6,r16,-4
    9610:	00800904 	movi	r2,36
    9614:	1180b836 	bltu	r2,r6,98f8 <_realloc_r+0x3c4>
    9618:	00c004c4 	movi	r3,19
    961c:	19809636 	bltu	r3,r6,9878 <_realloc_r+0x344>
    9620:	9005883a 	mov	r2,r18
    9624:	a807883a 	mov	r3,r21
    9628:	19000017 	ldw	r4,0(r3)
    962c:	11000015 	stw	r4,0(r2)
    9630:	19000117 	ldw	r4,4(r3)
    9634:	11000115 	stw	r4,4(r2)
    9638:	18c00217 	ldw	r3,8(r3)
    963c:	10c00215 	stw	r3,8(r2)
    9640:	a80b883a 	mov	r5,r21
    9644:	a009883a 	mov	r4,r20
    9648:	0006bc80 	call	6bc8 <_free_r>
    964c:	a009883a 	mov	r4,r20
    9650:	000f9bc0 	call	f9bc <__malloc_unlock>
    9654:	9005883a 	mov	r2,r18
    9658:	00001206 	br	96a4 <_realloc_r+0x170>
    965c:	00c00404 	movi	r3,16
    9660:	1823883a 	mov	r17,r3
    9664:	003fce06 	br	95a0 <_gp+0xfffed444>
    9668:	a825883a 	mov	r18,r21
    966c:	8445c83a 	sub	r2,r16,r17
    9670:	00c003c4 	movi	r3,15
    9674:	18802636 	bltu	r3,r2,9710 <_realloc_r+0x1dc>
    9678:	99800117 	ldw	r6,4(r19)
    967c:	9c07883a 	add	r3,r19,r16
    9680:	3180004c 	andi	r6,r6,1
    9684:	3420b03a 	or	r16,r6,r16
    9688:	9c000115 	stw	r16,4(r19)
    968c:	18800117 	ldw	r2,4(r3)
    9690:	10800054 	ori	r2,r2,1
    9694:	18800115 	stw	r2,4(r3)
    9698:	a009883a 	mov	r4,r20
    969c:	000f9bc0 	call	f9bc <__malloc_unlock>
    96a0:	9005883a 	mov	r2,r18
    96a4:	dfc00917 	ldw	ra,36(sp)
    96a8:	df000817 	ldw	fp,32(sp)
    96ac:	ddc00717 	ldw	r23,28(sp)
    96b0:	dd800617 	ldw	r22,24(sp)
    96b4:	dd400517 	ldw	r21,20(sp)
    96b8:	dd000417 	ldw	r20,16(sp)
    96bc:	dcc00317 	ldw	r19,12(sp)
    96c0:	dc800217 	ldw	r18,8(sp)
    96c4:	dc400117 	ldw	r17,4(sp)
    96c8:	dc000017 	ldw	r16,0(sp)
    96cc:	dec00a04 	addi	sp,sp,40
    96d0:	f800283a 	ret
    96d4:	017fff04 	movi	r5,-4
    96d8:	414a703a 	and	r5,r8,r5
    96dc:	814d883a 	add	r6,r16,r5
    96e0:	30c01f16 	blt	r6,r3,9760 <_realloc_r+0x22c>
    96e4:	20800317 	ldw	r2,12(r4)
    96e8:	20c00217 	ldw	r3,8(r4)
    96ec:	a825883a 	mov	r18,r21
    96f0:	3021883a 	mov	r16,r6
    96f4:	18800315 	stw	r2,12(r3)
    96f8:	10c00215 	stw	r3,8(r2)
    96fc:	003fdb06 	br	966c <_gp+0xfffed510>
    9700:	00800304 	movi	r2,12
    9704:	a0800015 	stw	r2,0(r20)
    9708:	0005883a 	mov	r2,zero
    970c:	003fe506 	br	96a4 <_gp+0xfffed548>
    9710:	98c00117 	ldw	r3,4(r19)
    9714:	9c4b883a 	add	r5,r19,r17
    9718:	11000054 	ori	r4,r2,1
    971c:	18c0004c 	andi	r3,r3,1
    9720:	1c62b03a 	or	r17,r3,r17
    9724:	9c400115 	stw	r17,4(r19)
    9728:	29000115 	stw	r4,4(r5)
    972c:	2885883a 	add	r2,r5,r2
    9730:	10c00117 	ldw	r3,4(r2)
    9734:	29400204 	addi	r5,r5,8
    9738:	a009883a 	mov	r4,r20
    973c:	18c00054 	ori	r3,r3,1
    9740:	10c00115 	stw	r3,4(r2)
    9744:	0006bc80 	call	6bc8 <_free_r>
    9748:	003fd306 	br	9698 <_gp+0xfffed53c>
    974c:	017fff04 	movi	r5,-4
    9750:	414a703a 	and	r5,r8,r5
    9754:	89800404 	addi	r6,r17,16
    9758:	8151883a 	add	r8,r16,r5
    975c:	4180590e 	bge	r8,r6,98c4 <_realloc_r+0x390>
    9760:	1080004c 	andi	r2,r2,1
    9764:	103f9e1e 	bne	r2,zero,95e0 <_gp+0xfffed484>
    9768:	adbffe17 	ldw	r22,-8(r21)
    976c:	00bfff04 	movi	r2,-4
    9770:	9dadc83a 	sub	r22,r19,r22
    9774:	b1800117 	ldw	r6,4(r22)
    9778:	3084703a 	and	r2,r6,r2
    977c:	20002026 	beq	r4,zero,9800 <_realloc_r+0x2cc>
    9780:	80af883a 	add	r23,r16,r2
    9784:	b96f883a 	add	r23,r23,r5
    9788:	21c05f26 	beq	r4,r7,9908 <_realloc_r+0x3d4>
    978c:	b8c01c16 	blt	r23,r3,9800 <_realloc_r+0x2cc>
    9790:	20800317 	ldw	r2,12(r4)
    9794:	20c00217 	ldw	r3,8(r4)
    9798:	81bfff04 	addi	r6,r16,-4
    979c:	01000904 	movi	r4,36
    97a0:	18800315 	stw	r2,12(r3)
    97a4:	10c00215 	stw	r3,8(r2)
    97a8:	b0c00217 	ldw	r3,8(r22)
    97ac:	b0800317 	ldw	r2,12(r22)
    97b0:	b4800204 	addi	r18,r22,8
    97b4:	18800315 	stw	r2,12(r3)
    97b8:	10c00215 	stw	r3,8(r2)
    97bc:	21801b36 	bltu	r4,r6,982c <_realloc_r+0x2f8>
    97c0:	008004c4 	movi	r2,19
    97c4:	1180352e 	bgeu	r2,r6,989c <_realloc_r+0x368>
    97c8:	a8800017 	ldw	r2,0(r21)
    97cc:	b0800215 	stw	r2,8(r22)
    97d0:	a8800117 	ldw	r2,4(r21)
    97d4:	b0800315 	stw	r2,12(r22)
    97d8:	008006c4 	movi	r2,27
    97dc:	11807f36 	bltu	r2,r6,99dc <_realloc_r+0x4a8>
    97e0:	b0800404 	addi	r2,r22,16
    97e4:	ad400204 	addi	r21,r21,8
    97e8:	00002d06 	br	98a0 <_realloc_r+0x36c>
    97ec:	adbffe17 	ldw	r22,-8(r21)
    97f0:	00bfff04 	movi	r2,-4
    97f4:	9dadc83a 	sub	r22,r19,r22
    97f8:	b1000117 	ldw	r4,4(r22)
    97fc:	2084703a 	and	r2,r4,r2
    9800:	b03f7726 	beq	r22,zero,95e0 <_gp+0xfffed484>
    9804:	80af883a 	add	r23,r16,r2
    9808:	b8ff7516 	blt	r23,r3,95e0 <_gp+0xfffed484>
    980c:	b0800317 	ldw	r2,12(r22)
    9810:	b0c00217 	ldw	r3,8(r22)
    9814:	81bfff04 	addi	r6,r16,-4
    9818:	01000904 	movi	r4,36
    981c:	18800315 	stw	r2,12(r3)
    9820:	10c00215 	stw	r3,8(r2)
    9824:	b4800204 	addi	r18,r22,8
    9828:	21bfe52e 	bgeu	r4,r6,97c0 <_gp+0xfffed664>
    982c:	a80b883a 	mov	r5,r21
    9830:	9009883a 	mov	r4,r18
    9834:	00081f80 	call	81f8 <memmove>
    9838:	b821883a 	mov	r16,r23
    983c:	b027883a 	mov	r19,r22
    9840:	003f8a06 	br	966c <_gp+0xfffed510>
    9844:	300b883a 	mov	r5,r6
    9848:	dfc00917 	ldw	ra,36(sp)
    984c:	df000817 	ldw	fp,32(sp)
    9850:	ddc00717 	ldw	r23,28(sp)
    9854:	dd800617 	ldw	r22,24(sp)
    9858:	dd400517 	ldw	r21,20(sp)
    985c:	dd000417 	ldw	r20,16(sp)
    9860:	dcc00317 	ldw	r19,12(sp)
    9864:	dc800217 	ldw	r18,8(sp)
    9868:	dc400117 	ldw	r17,4(sp)
    986c:	dc000017 	ldw	r16,0(sp)
    9870:	dec00a04 	addi	sp,sp,40
    9874:	00077c01 	jmpi	77c0 <_malloc_r>
    9878:	a8c00017 	ldw	r3,0(r21)
    987c:	90c00015 	stw	r3,0(r18)
    9880:	a8c00117 	ldw	r3,4(r21)
    9884:	90c00115 	stw	r3,4(r18)
    9888:	00c006c4 	movi	r3,27
    988c:	19804536 	bltu	r3,r6,99a4 <_realloc_r+0x470>
    9890:	90800204 	addi	r2,r18,8
    9894:	a8c00204 	addi	r3,r21,8
    9898:	003f6306 	br	9628 <_gp+0xfffed4cc>
    989c:	9005883a 	mov	r2,r18
    98a0:	a8c00017 	ldw	r3,0(r21)
    98a4:	b821883a 	mov	r16,r23
    98a8:	b027883a 	mov	r19,r22
    98ac:	10c00015 	stw	r3,0(r2)
    98b0:	a8c00117 	ldw	r3,4(r21)
    98b4:	10c00115 	stw	r3,4(r2)
    98b8:	a8c00217 	ldw	r3,8(r21)
    98bc:	10c00215 	stw	r3,8(r2)
    98c0:	003f6a06 	br	966c <_gp+0xfffed510>
    98c4:	9c67883a 	add	r19,r19,r17
    98c8:	4445c83a 	sub	r2,r8,r17
    98cc:	e4c00215 	stw	r19,8(fp)
    98d0:	10800054 	ori	r2,r2,1
    98d4:	98800115 	stw	r2,4(r19)
    98d8:	a8bfff17 	ldw	r2,-4(r21)
    98dc:	a009883a 	mov	r4,r20
    98e0:	1080004c 	andi	r2,r2,1
    98e4:	1462b03a 	or	r17,r2,r17
    98e8:	ac7fff15 	stw	r17,-4(r21)
    98ec:	000f9bc0 	call	f9bc <__malloc_unlock>
    98f0:	a805883a 	mov	r2,r21
    98f4:	003f6b06 	br	96a4 <_gp+0xfffed548>
    98f8:	a80b883a 	mov	r5,r21
    98fc:	9009883a 	mov	r4,r18
    9900:	00081f80 	call	81f8 <memmove>
    9904:	003f4e06 	br	9640 <_gp+0xfffed4e4>
    9908:	89000404 	addi	r4,r17,16
    990c:	b93fbc16 	blt	r23,r4,9800 <_gp+0xfffed6a4>
    9910:	b0800317 	ldw	r2,12(r22)
    9914:	b0c00217 	ldw	r3,8(r22)
    9918:	81bfff04 	addi	r6,r16,-4
    991c:	01000904 	movi	r4,36
    9920:	18800315 	stw	r2,12(r3)
    9924:	10c00215 	stw	r3,8(r2)
    9928:	b4800204 	addi	r18,r22,8
    992c:	21804336 	bltu	r4,r6,9a3c <_realloc_r+0x508>
    9930:	008004c4 	movi	r2,19
    9934:	11803f2e 	bgeu	r2,r6,9a34 <_realloc_r+0x500>
    9938:	a8800017 	ldw	r2,0(r21)
    993c:	b0800215 	stw	r2,8(r22)
    9940:	a8800117 	ldw	r2,4(r21)
    9944:	b0800315 	stw	r2,12(r22)
    9948:	008006c4 	movi	r2,27
    994c:	11803f36 	bltu	r2,r6,9a4c <_realloc_r+0x518>
    9950:	b0800404 	addi	r2,r22,16
    9954:	ad400204 	addi	r21,r21,8
    9958:	a8c00017 	ldw	r3,0(r21)
    995c:	10c00015 	stw	r3,0(r2)
    9960:	a8c00117 	ldw	r3,4(r21)
    9964:	10c00115 	stw	r3,4(r2)
    9968:	a8c00217 	ldw	r3,8(r21)
    996c:	10c00215 	stw	r3,8(r2)
    9970:	b447883a 	add	r3,r22,r17
    9974:	bc45c83a 	sub	r2,r23,r17
    9978:	e0c00215 	stw	r3,8(fp)
    997c:	10800054 	ori	r2,r2,1
    9980:	18800115 	stw	r2,4(r3)
    9984:	b0800117 	ldw	r2,4(r22)
    9988:	a009883a 	mov	r4,r20
    998c:	1080004c 	andi	r2,r2,1
    9990:	1462b03a 	or	r17,r2,r17
    9994:	b4400115 	stw	r17,4(r22)
    9998:	000f9bc0 	call	f9bc <__malloc_unlock>
    999c:	9005883a 	mov	r2,r18
    99a0:	003f4006 	br	96a4 <_gp+0xfffed548>
    99a4:	a8c00217 	ldw	r3,8(r21)
    99a8:	90c00215 	stw	r3,8(r18)
    99ac:	a8c00317 	ldw	r3,12(r21)
    99b0:	90c00315 	stw	r3,12(r18)
    99b4:	30801126 	beq	r6,r2,99fc <_realloc_r+0x4c8>
    99b8:	90800404 	addi	r2,r18,16
    99bc:	a8c00404 	addi	r3,r21,16
    99c0:	003f1906 	br	9628 <_gp+0xfffed4cc>
    99c4:	90ffff17 	ldw	r3,-4(r18)
    99c8:	00bfff04 	movi	r2,-4
    99cc:	a825883a 	mov	r18,r21
    99d0:	1884703a 	and	r2,r3,r2
    99d4:	80a1883a 	add	r16,r16,r2
    99d8:	003f2406 	br	966c <_gp+0xfffed510>
    99dc:	a8800217 	ldw	r2,8(r21)
    99e0:	b0800415 	stw	r2,16(r22)
    99e4:	a8800317 	ldw	r2,12(r21)
    99e8:	b0800515 	stw	r2,20(r22)
    99ec:	31000a26 	beq	r6,r4,9a18 <_realloc_r+0x4e4>
    99f0:	b0800604 	addi	r2,r22,24
    99f4:	ad400404 	addi	r21,r21,16
    99f8:	003fa906 	br	98a0 <_gp+0xfffed744>
    99fc:	a9000417 	ldw	r4,16(r21)
    9a00:	90800604 	addi	r2,r18,24
    9a04:	a8c00604 	addi	r3,r21,24
    9a08:	91000415 	stw	r4,16(r18)
    9a0c:	a9000517 	ldw	r4,20(r21)
    9a10:	91000515 	stw	r4,20(r18)
    9a14:	003f0406 	br	9628 <_gp+0xfffed4cc>
    9a18:	a8c00417 	ldw	r3,16(r21)
    9a1c:	ad400604 	addi	r21,r21,24
    9a20:	b0800804 	addi	r2,r22,32
    9a24:	b0c00615 	stw	r3,24(r22)
    9a28:	a8ffff17 	ldw	r3,-4(r21)
    9a2c:	b0c00715 	stw	r3,28(r22)
    9a30:	003f9b06 	br	98a0 <_gp+0xfffed744>
    9a34:	9005883a 	mov	r2,r18
    9a38:	003fc706 	br	9958 <_gp+0xfffed7fc>
    9a3c:	a80b883a 	mov	r5,r21
    9a40:	9009883a 	mov	r4,r18
    9a44:	00081f80 	call	81f8 <memmove>
    9a48:	003fc906 	br	9970 <_gp+0xfffed814>
    9a4c:	a8800217 	ldw	r2,8(r21)
    9a50:	b0800415 	stw	r2,16(r22)
    9a54:	a8800317 	ldw	r2,12(r21)
    9a58:	b0800515 	stw	r2,20(r22)
    9a5c:	31000726 	beq	r6,r4,9a7c <_realloc_r+0x548>
    9a60:	b0800604 	addi	r2,r22,24
    9a64:	ad400404 	addi	r21,r21,16
    9a68:	003fbb06 	br	9958 <_gp+0xfffed7fc>
    9a6c:	a009883a 	mov	r4,r20
    9a70:	000f9bc0 	call	f9bc <__malloc_unlock>
    9a74:	0005883a 	mov	r2,zero
    9a78:	003f0a06 	br	96a4 <_gp+0xfffed548>
    9a7c:	a8c00417 	ldw	r3,16(r21)
    9a80:	ad400604 	addi	r21,r21,24
    9a84:	b0800804 	addi	r2,r22,32
    9a88:	b0c00615 	stw	r3,24(r22)
    9a8c:	a8ffff17 	ldw	r3,-4(r21)
    9a90:	b0c00715 	stw	r3,28(r22)
    9a94:	003fb006 	br	9958 <_gp+0xfffed7fc>

00009a98 <__fpclassifyd>:
    9a98:	00a00034 	movhi	r2,32768
    9a9c:	10bfffc4 	addi	r2,r2,-1
    9aa0:	2884703a 	and	r2,r5,r2
    9aa4:	10000726 	beq	r2,zero,9ac4 <__fpclassifyd+0x2c>
    9aa8:	00fffc34 	movhi	r3,65520
    9aac:	019ff834 	movhi	r6,32736
    9ab0:	28c7883a 	add	r3,r5,r3
    9ab4:	31bfffc4 	addi	r6,r6,-1
    9ab8:	30c00536 	bltu	r6,r3,9ad0 <__fpclassifyd+0x38>
    9abc:	00800104 	movi	r2,4
    9ac0:	f800283a 	ret
    9ac4:	2000021e 	bne	r4,zero,9ad0 <__fpclassifyd+0x38>
    9ac8:	00800084 	movi	r2,2
    9acc:	f800283a 	ret
    9ad0:	00dffc34 	movhi	r3,32752
    9ad4:	019ff834 	movhi	r6,32736
    9ad8:	28cb883a 	add	r5,r5,r3
    9adc:	31bfffc4 	addi	r6,r6,-1
    9ae0:	317ff62e 	bgeu	r6,r5,9abc <_gp+0xfffed960>
    9ae4:	01400434 	movhi	r5,16
    9ae8:	297fffc4 	addi	r5,r5,-1
    9aec:	28800236 	bltu	r5,r2,9af8 <__fpclassifyd+0x60>
    9af0:	008000c4 	movi	r2,3
    9af4:	f800283a 	ret
    9af8:	10c00226 	beq	r2,r3,9b04 <__fpclassifyd+0x6c>
    9afc:	0005883a 	mov	r2,zero
    9b00:	f800283a 	ret
    9b04:	2005003a 	cmpeq	r2,r4,zero
    9b08:	f800283a 	ret

00009b0c <_sbrk_r>:
    9b0c:	defffd04 	addi	sp,sp,-12
    9b10:	dc000015 	stw	r16,0(sp)
    9b14:	04000074 	movhi	r16,1
    9b18:	dc400115 	stw	r17,4(sp)
    9b1c:	84172904 	addi	r16,r16,23716
    9b20:	2023883a 	mov	r17,r4
    9b24:	2809883a 	mov	r4,r5
    9b28:	dfc00215 	stw	ra,8(sp)
    9b2c:	80000015 	stw	zero,0(r16)
    9b30:	000fba40 	call	fba4 <sbrk>
    9b34:	00ffffc4 	movi	r3,-1
    9b38:	10c00526 	beq	r2,r3,9b50 <_sbrk_r+0x44>
    9b3c:	dfc00217 	ldw	ra,8(sp)
    9b40:	dc400117 	ldw	r17,4(sp)
    9b44:	dc000017 	ldw	r16,0(sp)
    9b48:	dec00304 	addi	sp,sp,12
    9b4c:	f800283a 	ret
    9b50:	80c00017 	ldw	r3,0(r16)
    9b54:	183ff926 	beq	r3,zero,9b3c <_gp+0xfffed9e0>
    9b58:	88c00015 	stw	r3,0(r17)
    9b5c:	003ff706 	br	9b3c <_gp+0xfffed9e0>

00009b60 <__sread>:
    9b60:	defffe04 	addi	sp,sp,-8
    9b64:	dc000015 	stw	r16,0(sp)
    9b68:	2821883a 	mov	r16,r5
    9b6c:	2940038f 	ldh	r5,14(r5)
    9b70:	dfc00115 	stw	ra,4(sp)
    9b74:	000ba1c0 	call	ba1c <_read_r>
    9b78:	10000716 	blt	r2,zero,9b98 <__sread+0x38>
    9b7c:	80c01417 	ldw	r3,80(r16)
    9b80:	1887883a 	add	r3,r3,r2
    9b84:	80c01415 	stw	r3,80(r16)
    9b88:	dfc00117 	ldw	ra,4(sp)
    9b8c:	dc000017 	ldw	r16,0(sp)
    9b90:	dec00204 	addi	sp,sp,8
    9b94:	f800283a 	ret
    9b98:	80c0030b 	ldhu	r3,12(r16)
    9b9c:	18fbffcc 	andi	r3,r3,61439
    9ba0:	80c0030d 	sth	r3,12(r16)
    9ba4:	dfc00117 	ldw	ra,4(sp)
    9ba8:	dc000017 	ldw	r16,0(sp)
    9bac:	dec00204 	addi	sp,sp,8
    9bb0:	f800283a 	ret

00009bb4 <__seofread>:
    9bb4:	0005883a 	mov	r2,zero
    9bb8:	f800283a 	ret

00009bbc <__swrite>:
    9bbc:	2880030b 	ldhu	r2,12(r5)
    9bc0:	defffb04 	addi	sp,sp,-20
    9bc4:	dcc00315 	stw	r19,12(sp)
    9bc8:	dc800215 	stw	r18,8(sp)
    9bcc:	dc400115 	stw	r17,4(sp)
    9bd0:	dc000015 	stw	r16,0(sp)
    9bd4:	dfc00415 	stw	ra,16(sp)
    9bd8:	10c0400c 	andi	r3,r2,256
    9bdc:	2821883a 	mov	r16,r5
    9be0:	2023883a 	mov	r17,r4
    9be4:	3025883a 	mov	r18,r6
    9be8:	3827883a 	mov	r19,r7
    9bec:	18000526 	beq	r3,zero,9c04 <__swrite+0x48>
    9bf0:	2940038f 	ldh	r5,14(r5)
    9bf4:	01c00084 	movi	r7,2
    9bf8:	000d883a 	mov	r6,zero
    9bfc:	000b9bc0 	call	b9bc <_lseek_r>
    9c00:	8080030b 	ldhu	r2,12(r16)
    9c04:	8140038f 	ldh	r5,14(r16)
    9c08:	10bbffcc 	andi	r2,r2,61439
    9c0c:	980f883a 	mov	r7,r19
    9c10:	900d883a 	mov	r6,r18
    9c14:	8809883a 	mov	r4,r17
    9c18:	8080030d 	sth	r2,12(r16)
    9c1c:	dfc00417 	ldw	ra,16(sp)
    9c20:	dcc00317 	ldw	r19,12(sp)
    9c24:	dc800217 	ldw	r18,8(sp)
    9c28:	dc400117 	ldw	r17,4(sp)
    9c2c:	dc000017 	ldw	r16,0(sp)
    9c30:	dec00504 	addi	sp,sp,20
    9c34:	000b4701 	jmpi	b470 <_write_r>

00009c38 <__sseek>:
    9c38:	defffe04 	addi	sp,sp,-8
    9c3c:	dc000015 	stw	r16,0(sp)
    9c40:	2821883a 	mov	r16,r5
    9c44:	2940038f 	ldh	r5,14(r5)
    9c48:	dfc00115 	stw	ra,4(sp)
    9c4c:	000b9bc0 	call	b9bc <_lseek_r>
    9c50:	00ffffc4 	movi	r3,-1
    9c54:	10c00826 	beq	r2,r3,9c78 <__sseek+0x40>
    9c58:	80c0030b 	ldhu	r3,12(r16)
    9c5c:	80801415 	stw	r2,80(r16)
    9c60:	18c40014 	ori	r3,r3,4096
    9c64:	80c0030d 	sth	r3,12(r16)
    9c68:	dfc00117 	ldw	ra,4(sp)
    9c6c:	dc000017 	ldw	r16,0(sp)
    9c70:	dec00204 	addi	sp,sp,8
    9c74:	f800283a 	ret
    9c78:	80c0030b 	ldhu	r3,12(r16)
    9c7c:	18fbffcc 	andi	r3,r3,61439
    9c80:	80c0030d 	sth	r3,12(r16)
    9c84:	dfc00117 	ldw	ra,4(sp)
    9c88:	dc000017 	ldw	r16,0(sp)
    9c8c:	dec00204 	addi	sp,sp,8
    9c90:	f800283a 	ret

00009c94 <__sclose>:
    9c94:	2940038f 	ldh	r5,14(r5)
    9c98:	000b4d01 	jmpi	b4d0 <_close_r>

00009c9c <strcmp>:
    9c9c:	2144b03a 	or	r2,r4,r5
    9ca0:	108000cc 	andi	r2,r2,3
    9ca4:	1000171e 	bne	r2,zero,9d04 <strcmp+0x68>
    9ca8:	20800017 	ldw	r2,0(r4)
    9cac:	28c00017 	ldw	r3,0(r5)
    9cb0:	10c0141e 	bne	r2,r3,9d04 <strcmp+0x68>
    9cb4:	027fbff4 	movhi	r9,65279
    9cb8:	4a7fbfc4 	addi	r9,r9,-257
    9cbc:	0086303a 	nor	r3,zero,r2
    9cc0:	02202074 	movhi	r8,32897
    9cc4:	1245883a 	add	r2,r2,r9
    9cc8:	42202004 	addi	r8,r8,-32640
    9ccc:	10c4703a 	and	r2,r2,r3
    9cd0:	1204703a 	and	r2,r2,r8
    9cd4:	10000226 	beq	r2,zero,9ce0 <strcmp+0x44>
    9cd8:	00002306 	br	9d68 <strcmp+0xcc>
    9cdc:	1000221e 	bne	r2,zero,9d68 <strcmp+0xcc>
    9ce0:	21000104 	addi	r4,r4,4
    9ce4:	20c00017 	ldw	r3,0(r4)
    9ce8:	29400104 	addi	r5,r5,4
    9cec:	29800017 	ldw	r6,0(r5)
    9cf0:	1a4f883a 	add	r7,r3,r9
    9cf4:	00c4303a 	nor	r2,zero,r3
    9cf8:	3884703a 	and	r2,r7,r2
    9cfc:	1204703a 	and	r2,r2,r8
    9d00:	19bff626 	beq	r3,r6,9cdc <_gp+0xfffedb80>
    9d04:	20800003 	ldbu	r2,0(r4)
    9d08:	10c03fcc 	andi	r3,r2,255
    9d0c:	18c0201c 	xori	r3,r3,128
    9d10:	18ffe004 	addi	r3,r3,-128
    9d14:	18000c26 	beq	r3,zero,9d48 <strcmp+0xac>
    9d18:	29800007 	ldb	r6,0(r5)
    9d1c:	19800326 	beq	r3,r6,9d2c <strcmp+0x90>
    9d20:	00001306 	br	9d70 <strcmp+0xd4>
    9d24:	29800007 	ldb	r6,0(r5)
    9d28:	11800b1e 	bne	r2,r6,9d58 <strcmp+0xbc>
    9d2c:	21000044 	addi	r4,r4,1
    9d30:	20c00003 	ldbu	r3,0(r4)
    9d34:	29400044 	addi	r5,r5,1
    9d38:	18803fcc 	andi	r2,r3,255
    9d3c:	1080201c 	xori	r2,r2,128
    9d40:	10bfe004 	addi	r2,r2,-128
    9d44:	103ff71e 	bne	r2,zero,9d24 <_gp+0xfffedbc8>
    9d48:	0007883a 	mov	r3,zero
    9d4c:	28800003 	ldbu	r2,0(r5)
    9d50:	1885c83a 	sub	r2,r3,r2
    9d54:	f800283a 	ret
    9d58:	28800003 	ldbu	r2,0(r5)
    9d5c:	18c03fcc 	andi	r3,r3,255
    9d60:	1885c83a 	sub	r2,r3,r2
    9d64:	f800283a 	ret
    9d68:	0005883a 	mov	r2,zero
    9d6c:	f800283a 	ret
    9d70:	10c03fcc 	andi	r3,r2,255
    9d74:	003ff506 	br	9d4c <_gp+0xfffedbf0>

00009d78 <__sprint_r.part.0>:
    9d78:	28801917 	ldw	r2,100(r5)
    9d7c:	defff604 	addi	sp,sp,-40
    9d80:	dd400515 	stw	r21,20(sp)
    9d84:	dfc00915 	stw	ra,36(sp)
    9d88:	df000815 	stw	fp,32(sp)
    9d8c:	ddc00715 	stw	r23,28(sp)
    9d90:	dd800615 	stw	r22,24(sp)
    9d94:	dd000415 	stw	r20,16(sp)
    9d98:	dcc00315 	stw	r19,12(sp)
    9d9c:	dc800215 	stw	r18,8(sp)
    9da0:	dc400115 	stw	r17,4(sp)
    9da4:	dc000015 	stw	r16,0(sp)
    9da8:	1088000c 	andi	r2,r2,8192
    9dac:	302b883a 	mov	r21,r6
    9db0:	10002e26 	beq	r2,zero,9e6c <__sprint_r.part.0+0xf4>
    9db4:	30800217 	ldw	r2,8(r6)
    9db8:	35800017 	ldw	r22,0(r6)
    9dbc:	10002926 	beq	r2,zero,9e64 <__sprint_r.part.0+0xec>
    9dc0:	2827883a 	mov	r19,r5
    9dc4:	2029883a 	mov	r20,r4
    9dc8:	b5c00104 	addi	r23,r22,4
    9dcc:	04bfffc4 	movi	r18,-1
    9dd0:	bc400017 	ldw	r17,0(r23)
    9dd4:	b4000017 	ldw	r16,0(r22)
    9dd8:	0039883a 	mov	fp,zero
    9ddc:	8822d0ba 	srli	r17,r17,2
    9de0:	8800031e 	bne	r17,zero,9df0 <__sprint_r.part.0+0x78>
    9de4:	00001806 	br	9e48 <__sprint_r.part.0+0xd0>
    9de8:	84000104 	addi	r16,r16,4
    9dec:	8f001526 	beq	r17,fp,9e44 <__sprint_r.part.0+0xcc>
    9df0:	81400017 	ldw	r5,0(r16)
    9df4:	980d883a 	mov	r6,r19
    9df8:	a009883a 	mov	r4,r20
    9dfc:	000b8680 	call	b868 <_fputwc_r>
    9e00:	e7000044 	addi	fp,fp,1
    9e04:	14bff81e 	bne	r2,r18,9de8 <_gp+0xfffedc8c>
    9e08:	9005883a 	mov	r2,r18
    9e0c:	a8000215 	stw	zero,8(r21)
    9e10:	a8000115 	stw	zero,4(r21)
    9e14:	dfc00917 	ldw	ra,36(sp)
    9e18:	df000817 	ldw	fp,32(sp)
    9e1c:	ddc00717 	ldw	r23,28(sp)
    9e20:	dd800617 	ldw	r22,24(sp)
    9e24:	dd400517 	ldw	r21,20(sp)
    9e28:	dd000417 	ldw	r20,16(sp)
    9e2c:	dcc00317 	ldw	r19,12(sp)
    9e30:	dc800217 	ldw	r18,8(sp)
    9e34:	dc400117 	ldw	r17,4(sp)
    9e38:	dc000017 	ldw	r16,0(sp)
    9e3c:	dec00a04 	addi	sp,sp,40
    9e40:	f800283a 	ret
    9e44:	a8800217 	ldw	r2,8(r21)
    9e48:	8c63883a 	add	r17,r17,r17
    9e4c:	8c63883a 	add	r17,r17,r17
    9e50:	1445c83a 	sub	r2,r2,r17
    9e54:	a8800215 	stw	r2,8(r21)
    9e58:	b5800204 	addi	r22,r22,8
    9e5c:	bdc00204 	addi	r23,r23,8
    9e60:	103fdb1e 	bne	r2,zero,9dd0 <_gp+0xfffedc74>
    9e64:	0005883a 	mov	r2,zero
    9e68:	003fe806 	br	9e0c <_gp+0xfffedcb0>
    9e6c:	0006ed80 	call	6ed8 <__sfvwrite_r>
    9e70:	003fe606 	br	9e0c <_gp+0xfffedcb0>

00009e74 <__sprint_r>:
    9e74:	30c00217 	ldw	r3,8(r6)
    9e78:	18000126 	beq	r3,zero,9e80 <__sprint_r+0xc>
    9e7c:	0009d781 	jmpi	9d78 <__sprint_r.part.0>
    9e80:	30000115 	stw	zero,4(r6)
    9e84:	0005883a 	mov	r2,zero
    9e88:	f800283a 	ret

00009e8c <___vfiprintf_internal_r>:
    9e8c:	deffca04 	addi	sp,sp,-216
    9e90:	dd403115 	stw	r21,196(sp)
    9e94:	dfc03515 	stw	ra,212(sp)
    9e98:	df003415 	stw	fp,208(sp)
    9e9c:	ddc03315 	stw	r23,204(sp)
    9ea0:	dd803215 	stw	r22,200(sp)
    9ea4:	dd003015 	stw	r20,192(sp)
    9ea8:	dcc02f15 	stw	r19,188(sp)
    9eac:	dc802e15 	stw	r18,184(sp)
    9eb0:	dc402d15 	stw	r17,180(sp)
    9eb4:	dc002c15 	stw	r16,176(sp)
    9eb8:	d9002115 	stw	r4,132(sp)
    9ebc:	d9402015 	stw	r5,128(sp)
    9ec0:	d9c02215 	stw	r7,136(sp)
    9ec4:	302b883a 	mov	r21,r6
    9ec8:	20000226 	beq	r4,zero,9ed4 <___vfiprintf_internal_r+0x48>
    9ecc:	20800e17 	ldw	r2,56(r4)
    9ed0:	1000cf26 	beq	r2,zero,a210 <___vfiprintf_internal_r+0x384>
    9ed4:	d8c02017 	ldw	r3,128(sp)
    9ed8:	1880030b 	ldhu	r2,12(r3)
    9edc:	10c8000c 	andi	r3,r2,8192
    9ee0:	1800071e 	bne	r3,zero,9f00 <___vfiprintf_internal_r+0x74>
    9ee4:	d9402017 	ldw	r5,128(sp)
    9ee8:	00f7ffc4 	movi	r3,-8193
    9eec:	10880014 	ori	r2,r2,8192
    9ef0:	29001917 	ldw	r4,100(r5)
    9ef4:	2880030d 	sth	r2,12(r5)
    9ef8:	20c6703a 	and	r3,r4,r3
    9efc:	28c01915 	stw	r3,100(r5)
    9f00:	10c0020c 	andi	r3,r2,8
    9f04:	1800a526 	beq	r3,zero,a19c <___vfiprintf_internal_r+0x310>
    9f08:	d9002017 	ldw	r4,128(sp)
    9f0c:	20c00417 	ldw	r3,16(r4)
    9f10:	1800a226 	beq	r3,zero,a19c <___vfiprintf_internal_r+0x310>
    9f14:	1080068c 	andi	r2,r2,26
    9f18:	00c00284 	movi	r3,10
    9f1c:	10c0a826 	beq	r2,r3,a1c0 <___vfiprintf_internal_r+0x334>
    9f20:	d9001a04 	addi	r4,sp,104
    9f24:	d94019c4 	addi	r5,sp,103
    9f28:	04800074 	movhi	r18,1
    9f2c:	2145c83a 	sub	r2,r4,r5
    9f30:	94895704 	addi	r18,r18,9564
    9f34:	d9001e15 	stw	r4,120(sp)
    9f38:	d9401f15 	stw	r5,124(sp)
    9f3c:	dec01a15 	stw	sp,104(sp)
    9f40:	d8001c15 	stw	zero,112(sp)
    9f44:	d8001b15 	stw	zero,108(sp)
    9f48:	d811883a 	mov	r8,sp
    9f4c:	d8002615 	stw	zero,152(sp)
    9f50:	d8002415 	stw	zero,144(sp)
    9f54:	d8802815 	stw	r2,160(sp)
    9f58:	a82d883a 	mov	r22,r21
    9f5c:	b0800007 	ldb	r2,0(r22)
    9f60:	10040d26 	beq	r2,zero,af98 <___vfiprintf_internal_r+0x110c>
    9f64:	00c00944 	movi	r3,37
    9f68:	b029883a 	mov	r20,r22
    9f6c:	10c0021e 	bne	r2,r3,9f78 <___vfiprintf_internal_r+0xec>
    9f70:	00001606 	br	9fcc <___vfiprintf_internal_r+0x140>
    9f74:	10c00326 	beq	r2,r3,9f84 <___vfiprintf_internal_r+0xf8>
    9f78:	a5000044 	addi	r20,r20,1
    9f7c:	a0800007 	ldb	r2,0(r20)
    9f80:	103ffc1e 	bne	r2,zero,9f74 <_gp+0xfffede18>
    9f84:	a5a1c83a 	sub	r16,r20,r22
    9f88:	80001026 	beq	r16,zero,9fcc <___vfiprintf_internal_r+0x140>
    9f8c:	d8c01c17 	ldw	r3,112(sp)
    9f90:	d8801b17 	ldw	r2,108(sp)
    9f94:	45800015 	stw	r22,0(r8)
    9f98:	80c7883a 	add	r3,r16,r3
    9f9c:	10800044 	addi	r2,r2,1
    9fa0:	44000115 	stw	r16,4(r8)
    9fa4:	d8c01c15 	stw	r3,112(sp)
    9fa8:	d8801b15 	stw	r2,108(sp)
    9fac:	010001c4 	movi	r4,7
    9fb0:	2080750e 	bge	r4,r2,a188 <___vfiprintf_internal_r+0x2fc>
    9fb4:	1803951e 	bne	r3,zero,ae0c <___vfiprintf_internal_r+0xf80>
    9fb8:	d8c02417 	ldw	r3,144(sp)
    9fbc:	d8001b15 	stw	zero,108(sp)
    9fc0:	d811883a 	mov	r8,sp
    9fc4:	1c07883a 	add	r3,r3,r16
    9fc8:	d8c02415 	stw	r3,144(sp)
    9fcc:	a0800007 	ldb	r2,0(r20)
    9fd0:	1002e026 	beq	r2,zero,ab54 <___vfiprintf_internal_r+0xcc8>
    9fd4:	a5800044 	addi	r22,r20,1
    9fd8:	a0c00047 	ldb	r3,1(r20)
    9fdc:	d8001d85 	stb	zero,118(sp)
    9fe0:	0027883a 	mov	r19,zero
    9fe4:	d8002305 	stb	zero,140(sp)
    9fe8:	043fffc4 	movi	r16,-1
    9fec:	d8002515 	stw	zero,148(sp)
    9ff0:	0023883a 	mov	r17,zero
    9ff4:	05001604 	movi	r20,88
    9ff8:	05400244 	movi	r21,9
    9ffc:	402f883a 	mov	r23,r8
    a000:	b5800044 	addi	r22,r22,1
    a004:	18bff804 	addi	r2,r3,-32
    a008:	a0827736 	bltu	r20,r2,a9e8 <___vfiprintf_internal_r+0xb5c>
    a00c:	100490ba 	slli	r2,r2,2
    a010:	01000074 	movhi	r4,1
    a014:	21280904 	addi	r4,r4,-24540
    a018:	1105883a 	add	r2,r2,r4
    a01c:	10800017 	ldw	r2,0(r2)
    a020:	1000683a 	jmp	r2
    a024:	0000a6e8 	cmpgeui	zero,zero,667
    a028:	0000a9e8 	cmpgeui	zero,zero,679
    a02c:	0000a9e8 	cmpgeui	zero,zero,679
    a030:	0000a704 	movi	zero,668
    a034:	0000a9e8 	cmpgeui	zero,zero,679
    a038:	0000a9e8 	cmpgeui	zero,zero,679
    a03c:	0000a9e8 	cmpgeui	zero,zero,679
    a040:	0000a9e8 	cmpgeui	zero,zero,679
    a044:	0000a9e8 	cmpgeui	zero,zero,679
    a048:	0000a9e8 	cmpgeui	zero,zero,679
    a04c:	0000a90c 	andi	zero,zero,676
    a050:	0000a930 	cmpltui	zero,zero,676
    a054:	0000a9e8 	cmpgeui	zero,zero,679
    a058:	0000a228 	cmpgeui	zero,zero,648
    a05c:	0000a944 	movi	zero,677
    a060:	0000a9e8 	cmpgeui	zero,zero,679
    a064:	0000a710 	cmplti	zero,zero,668
    a068:	0000a71c 	xori	zero,zero,668
    a06c:	0000a71c 	xori	zero,zero,668
    a070:	0000a71c 	xori	zero,zero,668
    a074:	0000a71c 	xori	zero,zero,668
    a078:	0000a71c 	xori	zero,zero,668
    a07c:	0000a71c 	xori	zero,zero,668
    a080:	0000a71c 	xori	zero,zero,668
    a084:	0000a71c 	xori	zero,zero,668
    a088:	0000a71c 	xori	zero,zero,668
    a08c:	0000a9e8 	cmpgeui	zero,zero,679
    a090:	0000a9e8 	cmpgeui	zero,zero,679
    a094:	0000a9e8 	cmpgeui	zero,zero,679
    a098:	0000a9e8 	cmpgeui	zero,zero,679
    a09c:	0000a9e8 	cmpgeui	zero,zero,679
    a0a0:	0000a9e8 	cmpgeui	zero,zero,679
    a0a4:	0000a9e8 	cmpgeui	zero,zero,679
    a0a8:	0000a9e8 	cmpgeui	zero,zero,679
    a0ac:	0000a9e8 	cmpgeui	zero,zero,679
    a0b0:	0000a9e8 	cmpgeui	zero,zero,679
    a0b4:	0000a75c 	xori	zero,zero,669
    a0b8:	0000a9e8 	cmpgeui	zero,zero,679
    a0bc:	0000a9e8 	cmpgeui	zero,zero,679
    a0c0:	0000a9e8 	cmpgeui	zero,zero,679
    a0c4:	0000a9e8 	cmpgeui	zero,zero,679
    a0c8:	0000a9e8 	cmpgeui	zero,zero,679
    a0cc:	0000a9e8 	cmpgeui	zero,zero,679
    a0d0:	0000a9e8 	cmpgeui	zero,zero,679
    a0d4:	0000a9e8 	cmpgeui	zero,zero,679
    a0d8:	0000a9e8 	cmpgeui	zero,zero,679
    a0dc:	0000a9e8 	cmpgeui	zero,zero,679
    a0e0:	0000a798 	cmpnei	zero,zero,670
    a0e4:	0000a9e8 	cmpgeui	zero,zero,679
    a0e8:	0000a9e8 	cmpgeui	zero,zero,679
    a0ec:	0000a9e8 	cmpgeui	zero,zero,679
    a0f0:	0000a9e8 	cmpgeui	zero,zero,679
    a0f4:	0000a9e8 	cmpgeui	zero,zero,679
    a0f8:	0000a7f4 	movhi	zero,671
    a0fc:	0000a9e8 	cmpgeui	zero,zero,679
    a100:	0000a9e8 	cmpgeui	zero,zero,679
    a104:	0000a868 	cmpgeui	zero,zero,673
    a108:	0000a9e8 	cmpgeui	zero,zero,679
    a10c:	0000a9e8 	cmpgeui	zero,zero,679
    a110:	0000a9e8 	cmpgeui	zero,zero,679
    a114:	0000a9e8 	cmpgeui	zero,zero,679
    a118:	0000a9e8 	cmpgeui	zero,zero,679
    a11c:	0000a9e8 	cmpgeui	zero,zero,679
    a120:	0000a9e8 	cmpgeui	zero,zero,679
    a124:	0000a9e8 	cmpgeui	zero,zero,679
    a128:	0000a9e8 	cmpgeui	zero,zero,679
    a12c:	0000a9e8 	cmpgeui	zero,zero,679
    a130:	0000a610 	cmplti	zero,zero,664
    a134:	0000a640 	call	a64 <main+0x610>
    a138:	0000a9e8 	cmpgeui	zero,zero,679
    a13c:	0000a9e8 	cmpgeui	zero,zero,679
    a140:	0000a9e8 	cmpgeui	zero,zero,679
    a144:	0000a990 	cmplti	zero,zero,678
    a148:	0000a640 	call	a64 <main+0x610>
    a14c:	0000a9e8 	cmpgeui	zero,zero,679
    a150:	0000a9e8 	cmpgeui	zero,zero,679
    a154:	0000a4e8 	cmpgeui	zero,zero,659
    a158:	0000a9e8 	cmpgeui	zero,zero,679
    a15c:	0000a4fc 	xorhi	zero,zero,659
    a160:	0000a534 	movhi	zero,660
    a164:	0000a234 	movhi	zero,648
    a168:	0000a4dc 	xori	zero,zero,659
    a16c:	0000a9e8 	cmpgeui	zero,zero,679
    a170:	0000a8a8 	cmpgeui	zero,zero,674
    a174:	0000a9e8 	cmpgeui	zero,zero,679
    a178:	0000a8f4 	movhi	zero,675
    a17c:	0000a9e8 	cmpgeui	zero,zero,679
    a180:	0000a9e8 	cmpgeui	zero,zero,679
    a184:	0000a5b8 	rdprs	zero,zero,662
    a188:	42000204 	addi	r8,r8,8
    a18c:	d8c02417 	ldw	r3,144(sp)
    a190:	1c07883a 	add	r3,r3,r16
    a194:	d8c02415 	stw	r3,144(sp)
    a198:	003f8c06 	br	9fcc <_gp+0xfffede70>
    a19c:	d9402017 	ldw	r5,128(sp)
    a1a0:	d9002117 	ldw	r4,132(sp)
    a1a4:	0004a480 	call	4a48 <__swsetup_r>
    a1a8:	1003c11e 	bne	r2,zero,b0b0 <___vfiprintf_internal_r+0x1224>
    a1ac:	d9402017 	ldw	r5,128(sp)
    a1b0:	00c00284 	movi	r3,10
    a1b4:	2880030b 	ldhu	r2,12(r5)
    a1b8:	1080068c 	andi	r2,r2,26
    a1bc:	10ff581e 	bne	r2,r3,9f20 <_gp+0xfffeddc4>
    a1c0:	d8c02017 	ldw	r3,128(sp)
    a1c4:	1880038f 	ldh	r2,14(r3)
    a1c8:	103f5516 	blt	r2,zero,9f20 <_gp+0xfffeddc4>
    a1cc:	d9c02217 	ldw	r7,136(sp)
    a1d0:	d9002117 	ldw	r4,132(sp)
    a1d4:	a80d883a 	mov	r6,r21
    a1d8:	180b883a 	mov	r5,r3
    a1dc:	000b3b40 	call	b3b4 <__sbprintf>
    a1e0:	dfc03517 	ldw	ra,212(sp)
    a1e4:	df003417 	ldw	fp,208(sp)
    a1e8:	ddc03317 	ldw	r23,204(sp)
    a1ec:	dd803217 	ldw	r22,200(sp)
    a1f0:	dd403117 	ldw	r21,196(sp)
    a1f4:	dd003017 	ldw	r20,192(sp)
    a1f8:	dcc02f17 	ldw	r19,188(sp)
    a1fc:	dc802e17 	ldw	r18,184(sp)
    a200:	dc402d17 	ldw	r17,180(sp)
    a204:	dc002c17 	ldw	r16,176(sp)
    a208:	dec03604 	addi	sp,sp,216
    a20c:	f800283a 	ret
    a210:	0006a540 	call	6a54 <__sinit>
    a214:	003f2f06 	br	9ed4 <_gp+0xfffedd78>
    a218:	d8c02517 	ldw	r3,148(sp)
    a21c:	d8802215 	stw	r2,136(sp)
    a220:	00c7c83a 	sub	r3,zero,r3
    a224:	d8c02515 	stw	r3,148(sp)
    a228:	8c400114 	ori	r17,r17,4
    a22c:	b0c00007 	ldb	r3,0(r22)
    a230:	003f7306 	br	a000 <_gp+0xfffedea4>
    a234:	00800c04 	movi	r2,48
    a238:	d9402217 	ldw	r5,136(sp)
    a23c:	d8801d05 	stb	r2,116(sp)
    a240:	00801e04 	movi	r2,120
    a244:	d8801d45 	stb	r2,117(sp)
    a248:	d8001d85 	stb	zero,118(sp)
    a24c:	b811883a 	mov	r8,r23
    a250:	28c00104 	addi	r3,r5,4
    a254:	2cc00017 	ldw	r19,0(r5)
    a258:	0029883a 	mov	r20,zero
    a25c:	88800094 	ori	r2,r17,2
    a260:	80032516 	blt	r16,zero,aef8 <___vfiprintf_internal_r+0x106c>
    a264:	00bfdfc4 	movi	r2,-129
    a268:	88a2703a 	and	r17,r17,r2
    a26c:	d8c02215 	stw	r3,136(sp)
    a270:	8c400094 	ori	r17,r17,2
    a274:	98032a1e 	bne	r19,zero,af20 <___vfiprintf_internal_r+0x1094>
    a278:	00800074 	movhi	r2,1
    a27c:	1088f604 	addi	r2,r2,9176
    a280:	d8802615 	stw	r2,152(sp)
    a284:	002b883a 	mov	r21,zero
    a288:	8001741e 	bne	r16,zero,a85c <___vfiprintf_internal_r+0x9d0>
    a28c:	0021883a 	mov	r16,zero
    a290:	0029883a 	mov	r20,zero
    a294:	ddc01a04 	addi	r23,sp,104
    a298:	8027883a 	mov	r19,r16
    a29c:	8500010e 	bge	r16,r20,a2a4 <___vfiprintf_internal_r+0x418>
    a2a0:	a027883a 	mov	r19,r20
    a2a4:	ad403fcc 	andi	r21,r21,255
    a2a8:	ad40201c 	xori	r21,r21,128
    a2ac:	ad7fe004 	addi	r21,r21,-128
    a2b0:	a8000126 	beq	r21,zero,a2b8 <___vfiprintf_internal_r+0x42c>
    a2b4:	9cc00044 	addi	r19,r19,1
    a2b8:	89c0008c 	andi	r7,r17,2
    a2bc:	38000126 	beq	r7,zero,a2c4 <___vfiprintf_internal_r+0x438>
    a2c0:	9cc00084 	addi	r19,r19,2
    a2c4:	88c0210c 	andi	r3,r17,132
    a2c8:	1801dd1e 	bne	r3,zero,aa40 <___vfiprintf_internal_r+0xbb4>
    a2cc:	d9402517 	ldw	r5,148(sp)
    a2d0:	2cebc83a 	sub	r21,r5,r19
    a2d4:	0541da0e 	bge	zero,r21,aa40 <___vfiprintf_internal_r+0xbb4>
    a2d8:	07000404 	movi	fp,16
    a2dc:	d8801c17 	ldw	r2,112(sp)
    a2e0:	e543be0e 	bge	fp,r21,b1dc <___vfiprintf_internal_r+0x1350>
    a2e4:	01400074 	movhi	r5,1
    a2e8:	29495b04 	addi	r5,r5,9580
    a2ec:	dc002715 	stw	r16,156(sp)
    a2f0:	d9801b17 	ldw	r6,108(sp)
    a2f4:	a821883a 	mov	r16,r21
    a2f8:	d9402315 	stw	r5,140(sp)
    a2fc:	028001c4 	movi	r10,7
    a300:	d9c02915 	stw	r7,164(sp)
    a304:	182b883a 	mov	r21,r3
    a308:	00000506 	br	a320 <___vfiprintf_internal_r+0x494>
    a30c:	31000084 	addi	r4,r6,2
    a310:	42000204 	addi	r8,r8,8
    a314:	180d883a 	mov	r6,r3
    a318:	843ffc04 	addi	r16,r16,-16
    a31c:	e4000f0e 	bge	fp,r16,a35c <___vfiprintf_internal_r+0x4d0>
    a320:	01000074 	movhi	r4,1
    a324:	10800404 	addi	r2,r2,16
    a328:	30c00044 	addi	r3,r6,1
    a32c:	21095b04 	addi	r4,r4,9580
    a330:	41000015 	stw	r4,0(r8)
    a334:	47000115 	stw	fp,4(r8)
    a338:	d8801c15 	stw	r2,112(sp)
    a33c:	d8c01b15 	stw	r3,108(sp)
    a340:	50fff20e 	bge	r10,r3,a30c <_gp+0xfffee1b0>
    a344:	1001b21e 	bne	r2,zero,aa10 <___vfiprintf_internal_r+0xb84>
    a348:	843ffc04 	addi	r16,r16,-16
    a34c:	000d883a 	mov	r6,zero
    a350:	01000044 	movi	r4,1
    a354:	d811883a 	mov	r8,sp
    a358:	e43ff116 	blt	fp,r16,a320 <_gp+0xfffee1c4>
    a35c:	a807883a 	mov	r3,r21
    a360:	d9c02917 	ldw	r7,164(sp)
    a364:	802b883a 	mov	r21,r16
    a368:	dc002717 	ldw	r16,156(sp)
    a36c:	d9402317 	ldw	r5,140(sp)
    a370:	a885883a 	add	r2,r21,r2
    a374:	45400115 	stw	r21,4(r8)
    a378:	41400015 	stw	r5,0(r8)
    a37c:	d8801c15 	stw	r2,112(sp)
    a380:	d9001b15 	stw	r4,108(sp)
    a384:	014001c4 	movi	r5,7
    a388:	29026216 	blt	r5,r4,ad14 <___vfiprintf_internal_r+0xe88>
    a38c:	d9801d87 	ldb	r6,118(sp)
    a390:	42000204 	addi	r8,r8,8
    a394:	21400044 	addi	r5,r4,1
    a398:	3001ae1e 	bne	r6,zero,aa54 <___vfiprintf_internal_r+0xbc8>
    a39c:	3801bb26 	beq	r7,zero,aa8c <___vfiprintf_internal_r+0xc00>
    a3a0:	d9001d04 	addi	r4,sp,116
    a3a4:	10800084 	addi	r2,r2,2
    a3a8:	41000015 	stw	r4,0(r8)
    a3ac:	01000084 	movi	r4,2
    a3b0:	41000115 	stw	r4,4(r8)
    a3b4:	d8801c15 	stw	r2,112(sp)
    a3b8:	d9401b15 	stw	r5,108(sp)
    a3bc:	010001c4 	movi	r4,7
    a3c0:	2142680e 	bge	r4,r5,ad64 <___vfiprintf_internal_r+0xed8>
    a3c4:	1002b11e 	bne	r2,zero,ae8c <___vfiprintf_internal_r+0x1000>
    a3c8:	01802004 	movi	r6,128
    a3cc:	01400044 	movi	r5,1
    a3d0:	0009883a 	mov	r4,zero
    a3d4:	d811883a 	mov	r8,sp
    a3d8:	1981ae1e 	bne	r3,r6,aa94 <___vfiprintf_internal_r+0xc08>
    a3dc:	d8c02517 	ldw	r3,148(sp)
    a3e0:	1cf9c83a 	sub	fp,r3,r19
    a3e4:	0701ab0e 	bge	zero,fp,aa94 <___vfiprintf_internal_r+0xc08>
    a3e8:	05400404 	movi	r21,16
    a3ec:	af03a90e 	bge	r21,fp,b294 <___vfiprintf_internal_r+0x1408>
    a3f0:	01400074 	movhi	r5,1
    a3f4:	29495704 	addi	r5,r5,9564
    a3f8:	d9402315 	stw	r5,140(sp)
    a3fc:	01c001c4 	movi	r7,7
    a400:	00000506 	br	a418 <___vfiprintf_internal_r+0x58c>
    a404:	21800084 	addi	r6,r4,2
    a408:	42000204 	addi	r8,r8,8
    a40c:	1809883a 	mov	r4,r3
    a410:	e73ffc04 	addi	fp,fp,-16
    a414:	af000d0e 	bge	r21,fp,a44c <___vfiprintf_internal_r+0x5c0>
    a418:	10800404 	addi	r2,r2,16
    a41c:	20c00044 	addi	r3,r4,1
    a420:	44800015 	stw	r18,0(r8)
    a424:	45400115 	stw	r21,4(r8)
    a428:	d8801c15 	stw	r2,112(sp)
    a42c:	d8c01b15 	stw	r3,108(sp)
    a430:	38fff40e 	bge	r7,r3,a404 <_gp+0xfffee2a8>
    a434:	10022b1e 	bne	r2,zero,ace4 <___vfiprintf_internal_r+0xe58>
    a438:	e73ffc04 	addi	fp,fp,-16
    a43c:	01800044 	movi	r6,1
    a440:	0009883a 	mov	r4,zero
    a444:	d811883a 	mov	r8,sp
    a448:	af3ff316 	blt	r21,fp,a418 <_gp+0xfffee2bc>
    a44c:	d8c02317 	ldw	r3,140(sp)
    a450:	1705883a 	add	r2,r2,fp
    a454:	47000115 	stw	fp,4(r8)
    a458:	40c00015 	stw	r3,0(r8)
    a45c:	d8801c15 	stw	r2,112(sp)
    a460:	d9801b15 	stw	r6,108(sp)
    a464:	00c001c4 	movi	r3,7
    a468:	19829416 	blt	r3,r6,aebc <___vfiprintf_internal_r+0x1030>
    a46c:	8521c83a 	sub	r16,r16,r20
    a470:	42000204 	addi	r8,r8,8
    a474:	31400044 	addi	r5,r6,1
    a478:	3009883a 	mov	r4,r6
    a47c:	04018716 	blt	zero,r16,aa9c <___vfiprintf_internal_r+0xc10>
    a480:	a085883a 	add	r2,r20,r2
    a484:	45c00015 	stw	r23,0(r8)
    a488:	45000115 	stw	r20,4(r8)
    a48c:	d8801c15 	stw	r2,112(sp)
    a490:	d9401b15 	stw	r5,108(sp)
    a494:	00c001c4 	movi	r3,7
    a498:	1941c20e 	bge	r3,r5,aba4 <___vfiprintf_internal_r+0xd18>
    a49c:	1002531e 	bne	r2,zero,adec <___vfiprintf_internal_r+0xf60>
    a4a0:	d8001b15 	stw	zero,108(sp)
    a4a4:	8c40010c 	andi	r17,r17,4
    a4a8:	88023226 	beq	r17,zero,ad74 <___vfiprintf_internal_r+0xee8>
    a4ac:	d9002517 	ldw	r4,148(sp)
    a4b0:	24e3c83a 	sub	r17,r4,r19
    a4b4:	04432916 	blt	zero,r17,b15c <___vfiprintf_internal_r+0x12d0>
    a4b8:	d8802517 	ldw	r2,148(sp)
    a4bc:	14c0010e 	bge	r2,r19,a4c4 <___vfiprintf_internal_r+0x638>
    a4c0:	9805883a 	mov	r2,r19
    a4c4:	d8c02417 	ldw	r3,144(sp)
    a4c8:	1887883a 	add	r3,r3,r2
    a4cc:	d8c02415 	stw	r3,144(sp)
    a4d0:	d8001b15 	stw	zero,108(sp)
    a4d4:	d811883a 	mov	r8,sp
    a4d8:	003ea006 	br	9f5c <_gp+0xfffede00>
    a4dc:	8c400814 	ori	r17,r17,32
    a4e0:	b0c00007 	ldb	r3,0(r22)
    a4e4:	003ec606 	br	a000 <_gp+0xfffedea4>
    a4e8:	b0c00007 	ldb	r3,0(r22)
    a4ec:	00801b04 	movi	r2,108
    a4f0:	18832026 	beq	r3,r2,b174 <___vfiprintf_internal_r+0x12e8>
    a4f4:	8c400414 	ori	r17,r17,16
    a4f8:	003ec106 	br	a000 <_gp+0xfffedea4>
    a4fc:	9cc03fcc 	andi	r19,r19,255
    a500:	b811883a 	mov	r8,r23
    a504:	9803981e 	bne	r19,zero,b368 <___vfiprintf_internal_r+0x14dc>
    a508:	8880080c 	andi	r2,r17,32
    a50c:	1002be26 	beq	r2,zero,b008 <___vfiprintf_internal_r+0x117c>
    a510:	d9002217 	ldw	r4,136(sp)
    a514:	d9402417 	ldw	r5,144(sp)
    a518:	20800017 	ldw	r2,0(r4)
    a51c:	2807d7fa 	srai	r3,r5,31
    a520:	21000104 	addi	r4,r4,4
    a524:	d9002215 	stw	r4,136(sp)
    a528:	11400015 	stw	r5,0(r2)
    a52c:	10c00115 	stw	r3,4(r2)
    a530:	003e8a06 	br	9f5c <_gp+0xfffede00>
    a534:	9cc03fcc 	andi	r19,r19,255
    a538:	b811883a 	mov	r8,r23
    a53c:	9803871e 	bne	r19,zero,b35c <___vfiprintf_internal_r+0x14d0>
    a540:	8880080c 	andi	r2,r17,32
    a544:	10009a26 	beq	r2,zero,a7b0 <___vfiprintf_internal_r+0x924>
    a548:	d9002217 	ldw	r4,136(sp)
    a54c:	d8001d85 	stb	zero,118(sp)
    a550:	20800204 	addi	r2,r4,8
    a554:	24c00017 	ldw	r19,0(r4)
    a558:	25000117 	ldw	r20,4(r4)
    a55c:	8002a416 	blt	r16,zero,aff0 <___vfiprintf_internal_r+0x1164>
    a560:	013fdfc4 	movi	r4,-129
    a564:	9d06b03a 	or	r3,r19,r20
    a568:	d8802215 	stw	r2,136(sp)
    a56c:	8922703a 	and	r17,r17,r4
    a570:	18009b26 	beq	r3,zero,a7e0 <___vfiprintf_internal_r+0x954>
    a574:	002b883a 	mov	r21,zero
    a578:	ddc01a04 	addi	r23,sp,104
    a57c:	9806d0fa 	srli	r3,r19,3
    a580:	a008977a 	slli	r4,r20,29
    a584:	a028d0fa 	srli	r20,r20,3
    a588:	9cc001cc 	andi	r19,r19,7
    a58c:	98800c04 	addi	r2,r19,48
    a590:	bdffffc4 	addi	r23,r23,-1
    a594:	20e6b03a 	or	r19,r4,r3
    a598:	b8800005 	stb	r2,0(r23)
    a59c:	9d06b03a 	or	r3,r19,r20
    a5a0:	183ff61e 	bne	r3,zero,a57c <_gp+0xfffee420>
    a5a4:	88c0004c 	andi	r3,r17,1
    a5a8:	18021f1e 	bne	r3,zero,ae28 <___vfiprintf_internal_r+0xf9c>
    a5ac:	d9401e17 	ldw	r5,120(sp)
    a5b0:	2de9c83a 	sub	r20,r5,r23
    a5b4:	003f3806 	br	a298 <_gp+0xfffee13c>
    a5b8:	9cc03fcc 	andi	r19,r19,255
    a5bc:	b811883a 	mov	r8,r23
    a5c0:	98034f1e 	bne	r19,zero,b300 <___vfiprintf_internal_r+0x1474>
    a5c4:	00800074 	movhi	r2,1
    a5c8:	1088f604 	addi	r2,r2,9176
    a5cc:	d8802615 	stw	r2,152(sp)
    a5d0:	8880080c 	andi	r2,r17,32
    a5d4:	1000ac26 	beq	r2,zero,a888 <___vfiprintf_internal_r+0x9fc>
    a5d8:	d9002217 	ldw	r4,136(sp)
    a5dc:	24c00017 	ldw	r19,0(r4)
    a5e0:	25000117 	ldw	r20,4(r4)
    a5e4:	21000204 	addi	r4,r4,8
    a5e8:	d9002215 	stw	r4,136(sp)
    a5ec:	8880004c 	andi	r2,r17,1
    a5f0:	1001e726 	beq	r2,zero,ad90 <___vfiprintf_internal_r+0xf04>
    a5f4:	9d04b03a 	or	r2,r19,r20
    a5f8:	10025c1e 	bne	r2,zero,af6c <___vfiprintf_internal_r+0x10e0>
    a5fc:	d8001d85 	stb	zero,118(sp)
    a600:	80024416 	blt	r16,zero,af14 <___vfiprintf_internal_r+0x1088>
    a604:	00bfdfc4 	movi	r2,-129
    a608:	88a2703a 	and	r17,r17,r2
    a60c:	003f1d06 	br	a284 <_gp+0xfffee128>
    a610:	d8c02217 	ldw	r3,136(sp)
    a614:	04c00044 	movi	r19,1
    a618:	b811883a 	mov	r8,r23
    a61c:	18800017 	ldw	r2,0(r3)
    a620:	18c00104 	addi	r3,r3,4
    a624:	d8001d85 	stb	zero,118(sp)
    a628:	d8801005 	stb	r2,64(sp)
    a62c:	d8c02215 	stw	r3,136(sp)
    a630:	9829883a 	mov	r20,r19
    a634:	ddc01004 	addi	r23,sp,64
    a638:	0021883a 	mov	r16,zero
    a63c:	003f1e06 	br	a2b8 <_gp+0xfffee15c>
    a640:	9cc03fcc 	andi	r19,r19,255
    a644:	b811883a 	mov	r8,r23
    a648:	9803331e 	bne	r19,zero,b318 <___vfiprintf_internal_r+0x148c>
    a64c:	8880080c 	andi	r2,r17,32
    a650:	10004826 	beq	r2,zero,a774 <___vfiprintf_internal_r+0x8e8>
    a654:	d9002217 	ldw	r4,136(sp)
    a658:	20800117 	ldw	r2,4(r4)
    a65c:	24c00017 	ldw	r19,0(r4)
    a660:	21000204 	addi	r4,r4,8
    a664:	d9002215 	stw	r4,136(sp)
    a668:	1029883a 	mov	r20,r2
    a66c:	10024c16 	blt	r2,zero,afa0 <___vfiprintf_internal_r+0x1114>
    a670:	dd401d83 	ldbu	r21,118(sp)
    a674:	80007116 	blt	r16,zero,a83c <___vfiprintf_internal_r+0x9b0>
    a678:	00ffdfc4 	movi	r3,-129
    a67c:	9d04b03a 	or	r2,r19,r20
    a680:	88e2703a 	and	r17,r17,r3
    a684:	1000d126 	beq	r2,zero,a9cc <___vfiprintf_internal_r+0xb40>
    a688:	a0023526 	beq	r20,zero,af60 <___vfiprintf_internal_r+0x10d4>
    a68c:	ddc01a04 	addi	r23,sp,104
    a690:	4039883a 	mov	fp,r8
    a694:	9809883a 	mov	r4,r19
    a698:	a00b883a 	mov	r5,r20
    a69c:	01800284 	movi	r6,10
    a6a0:	000f883a 	mov	r7,zero
    a6a4:	000c3b80 	call	c3b8 <__umoddi3>
    a6a8:	10800c04 	addi	r2,r2,48
    a6ac:	bdffffc4 	addi	r23,r23,-1
    a6b0:	9809883a 	mov	r4,r19
    a6b4:	a00b883a 	mov	r5,r20
    a6b8:	b8800005 	stb	r2,0(r23)
    a6bc:	01800284 	movi	r6,10
    a6c0:	000f883a 	mov	r7,zero
    a6c4:	000bdbc0 	call	bdbc <__udivdi3>
    a6c8:	1027883a 	mov	r19,r2
    a6cc:	10c4b03a 	or	r2,r2,r3
    a6d0:	1829883a 	mov	r20,r3
    a6d4:	103fef1e 	bne	r2,zero,a694 <_gp+0xfffee538>
    a6d8:	d9001e17 	ldw	r4,120(sp)
    a6dc:	e011883a 	mov	r8,fp
    a6e0:	25e9c83a 	sub	r20,r4,r23
    a6e4:	003eec06 	br	a298 <_gp+0xfffee13c>
    a6e8:	d8802307 	ldb	r2,140(sp)
    a6ec:	1002361e 	bne	r2,zero,afc8 <___vfiprintf_internal_r+0x113c>
    a6f0:	00c00804 	movi	r3,32
    a6f4:	d8c02305 	stb	r3,140(sp)
    a6f8:	04c00044 	movi	r19,1
    a6fc:	b0c00007 	ldb	r3,0(r22)
    a700:	003e3f06 	br	a000 <_gp+0xfffedea4>
    a704:	8c400054 	ori	r17,r17,1
    a708:	b0c00007 	ldb	r3,0(r22)
    a70c:	003e3c06 	br	a000 <_gp+0xfffedea4>
    a710:	8c402014 	ori	r17,r17,128
    a714:	b0c00007 	ldb	r3,0(r22)
    a718:	003e3906 	br	a000 <_gp+0xfffedea4>
    a71c:	dc002715 	stw	r16,156(sp)
    a720:	d8002515 	stw	zero,148(sp)
    a724:	1f3ff404 	addi	fp,r3,-48
    a728:	0009883a 	mov	r4,zero
    a72c:	b021883a 	mov	r16,r22
    a730:	01400284 	movi	r5,10
    a734:	000cb300 	call	cb30 <__mulsi3>
    a738:	80c00007 	ldb	r3,0(r16)
    a73c:	e089883a 	add	r4,fp,r2
    a740:	b5800044 	addi	r22,r22,1
    a744:	1f3ff404 	addi	fp,r3,-48
    a748:	b021883a 	mov	r16,r22
    a74c:	af3ff82e 	bgeu	r21,fp,a730 <_gp+0xfffee5d4>
    a750:	d9002515 	stw	r4,148(sp)
    a754:	dc002717 	ldw	r16,156(sp)
    a758:	003e2a06 	br	a004 <_gp+0xfffedea8>
    a75c:	9cc03fcc 	andi	r19,r19,255
    a760:	b811883a 	mov	r8,r23
    a764:	9802e91e 	bne	r19,zero,b30c <___vfiprintf_internal_r+0x1480>
    a768:	8c400414 	ori	r17,r17,16
    a76c:	8880080c 	andi	r2,r17,32
    a770:	103fb81e 	bne	r2,zero,a654 <_gp+0xfffee4f8>
    a774:	8880040c 	andi	r2,r17,16
    a778:	10022e26 	beq	r2,zero,b034 <___vfiprintf_internal_r+0x11a8>
    a77c:	d9402217 	ldw	r5,136(sp)
    a780:	2cc00017 	ldw	r19,0(r5)
    a784:	29400104 	addi	r5,r5,4
    a788:	d9402215 	stw	r5,136(sp)
    a78c:	9829d7fa 	srai	r20,r19,31
    a790:	a005883a 	mov	r2,r20
    a794:	003fb506 	br	a66c <_gp+0xfffee510>
    a798:	9cc03fcc 	andi	r19,r19,255
    a79c:	b811883a 	mov	r8,r23
    a7a0:	9802fa1e 	bne	r19,zero,b38c <___vfiprintf_internal_r+0x1500>
    a7a4:	8c400414 	ori	r17,r17,16
    a7a8:	8880080c 	andi	r2,r17,32
    a7ac:	103f661e 	bne	r2,zero,a548 <_gp+0xfffee3ec>
    a7b0:	8880040c 	andi	r2,r17,16
    a7b4:	10020626 	beq	r2,zero,afd0 <___vfiprintf_internal_r+0x1144>
    a7b8:	d9402217 	ldw	r5,136(sp)
    a7bc:	d8001d85 	stb	zero,118(sp)
    a7c0:	0029883a 	mov	r20,zero
    a7c4:	28800104 	addi	r2,r5,4
    a7c8:	2cc00017 	ldw	r19,0(r5)
    a7cc:	80020816 	blt	r16,zero,aff0 <___vfiprintf_internal_r+0x1164>
    a7d0:	00ffdfc4 	movi	r3,-129
    a7d4:	d8802215 	stw	r2,136(sp)
    a7d8:	88e2703a 	and	r17,r17,r3
    a7dc:	983f651e 	bne	r19,zero,a574 <_gp+0xfffee418>
    a7e0:	002b883a 	mov	r21,zero
    a7e4:	8002cf26 	beq	r16,zero,b324 <___vfiprintf_internal_r+0x1498>
    a7e8:	0027883a 	mov	r19,zero
    a7ec:	0029883a 	mov	r20,zero
    a7f0:	003f6106 	br	a578 <_gp+0xfffee41c>
    a7f4:	9cc03fcc 	andi	r19,r19,255
    a7f8:	b811883a 	mov	r8,r23
    a7fc:	9802e01e 	bne	r19,zero,b380 <___vfiprintf_internal_r+0x14f4>
    a800:	8c400414 	ori	r17,r17,16
    a804:	8880080c 	andi	r2,r17,32
    a808:	1000641e 	bne	r2,zero,a99c <___vfiprintf_internal_r+0xb10>
    a80c:	8880040c 	andi	r2,r17,16
    a810:	1001c81e 	bne	r2,zero,af34 <___vfiprintf_internal_r+0x10a8>
    a814:	8880100c 	andi	r2,r17,64
    a818:	d8001d85 	stb	zero,118(sp)
    a81c:	1002281e 	bne	r2,zero,b0c0 <___vfiprintf_internal_r+0x1234>
    a820:	d9002217 	ldw	r4,136(sp)
    a824:	0029883a 	mov	r20,zero
    a828:	20800104 	addi	r2,r4,4
    a82c:	24c00017 	ldw	r19,0(r4)
    a830:	8001c60e 	bge	r16,zero,af4c <___vfiprintf_internal_r+0x10c0>
    a834:	d8802215 	stw	r2,136(sp)
    a838:	002b883a 	mov	r21,zero
    a83c:	9d04b03a 	or	r2,r19,r20
    a840:	103f911e 	bne	r2,zero,a688 <_gp+0xfffee52c>
    a844:	00800044 	movi	r2,1
    a848:	10803fcc 	andi	r2,r2,255
    a84c:	00c00044 	movi	r3,1
    a850:	10c05f26 	beq	r2,r3,a9d0 <___vfiprintf_internal_r+0xb44>
    a854:	00c00084 	movi	r3,2
    a858:	10ffe31e 	bne	r2,r3,a7e8 <_gp+0xfffee68c>
    a85c:	0027883a 	mov	r19,zero
    a860:	0029883a 	mov	r20,zero
    a864:	00015106 	br	adac <___vfiprintf_internal_r+0xf20>
    a868:	9cc03fcc 	andi	r19,r19,255
    a86c:	b811883a 	mov	r8,r23
    a870:	9802c01e 	bne	r19,zero,b374 <___vfiprintf_internal_r+0x14e8>
    a874:	01400074 	movhi	r5,1
    a878:	2948f104 	addi	r5,r5,9156
    a87c:	d9402615 	stw	r5,152(sp)
    a880:	8880080c 	andi	r2,r17,32
    a884:	103f541e 	bne	r2,zero,a5d8 <_gp+0xfffee47c>
    a888:	8880040c 	andi	r2,r17,16
    a88c:	1001f226 	beq	r2,zero,b058 <___vfiprintf_internal_r+0x11cc>
    a890:	d9402217 	ldw	r5,136(sp)
    a894:	0029883a 	mov	r20,zero
    a898:	2cc00017 	ldw	r19,0(r5)
    a89c:	29400104 	addi	r5,r5,4
    a8a0:	d9402215 	stw	r5,136(sp)
    a8a4:	003f5106 	br	a5ec <_gp+0xfffee490>
    a8a8:	d8c02217 	ldw	r3,136(sp)
    a8ac:	b811883a 	mov	r8,r23
    a8b0:	d8001d85 	stb	zero,118(sp)
    a8b4:	1dc00017 	ldw	r23,0(r3)
    a8b8:	1f000104 	addi	fp,r3,4
    a8bc:	b8025926 	beq	r23,zero,b224 <___vfiprintf_internal_r+0x1398>
    a8c0:	80023316 	blt	r16,zero,b190 <___vfiprintf_internal_r+0x1304>
    a8c4:	800d883a 	mov	r6,r16
    a8c8:	000b883a 	mov	r5,zero
    a8cc:	b809883a 	mov	r4,r23
    a8d0:	da002a15 	stw	r8,168(sp)
    a8d4:	0007fcc0 	call	7fcc <memchr>
    a8d8:	da002a17 	ldw	r8,168(sp)
    a8dc:	10026826 	beq	r2,zero,b280 <___vfiprintf_internal_r+0x13f4>
    a8e0:	15e9c83a 	sub	r20,r2,r23
    a8e4:	dd401d83 	ldbu	r21,118(sp)
    a8e8:	df002215 	stw	fp,136(sp)
    a8ec:	0021883a 	mov	r16,zero
    a8f0:	003e6906 	br	a298 <_gp+0xfffee13c>
    a8f4:	9cc03fcc 	andi	r19,r19,255
    a8f8:	b811883a 	mov	r8,r23
    a8fc:	983fc126 	beq	r19,zero,a804 <_gp+0xfffee6a8>
    a900:	d8c02303 	ldbu	r3,140(sp)
    a904:	d8c01d85 	stb	r3,118(sp)
    a908:	003fbe06 	br	a804 <_gp+0xfffee6a8>
    a90c:	d9002217 	ldw	r4,136(sp)
    a910:	d9402217 	ldw	r5,136(sp)
    a914:	21000017 	ldw	r4,0(r4)
    a918:	28800104 	addi	r2,r5,4
    a91c:	d9002515 	stw	r4,148(sp)
    a920:	203e3d16 	blt	r4,zero,a218 <_gp+0xfffee0bc>
    a924:	d8802215 	stw	r2,136(sp)
    a928:	b0c00007 	ldb	r3,0(r22)
    a92c:	003db406 	br	a000 <_gp+0xfffedea4>
    a930:	00c00ac4 	movi	r3,43
    a934:	d8c02305 	stb	r3,140(sp)
    a938:	04c00044 	movi	r19,1
    a93c:	b0c00007 	ldb	r3,0(r22)
    a940:	003daf06 	br	a000 <_gp+0xfffedea4>
    a944:	b0c00007 	ldb	r3,0(r22)
    a948:	01000a84 	movi	r4,42
    a94c:	b4000044 	addi	r16,r22,1
    a950:	19025e26 	beq	r3,r4,b2cc <___vfiprintf_internal_r+0x1440>
    a954:	1f3ff404 	addi	fp,r3,-48
    a958:	0009883a 	mov	r4,zero
    a95c:	af025236 	bltu	r21,fp,b2a8 <___vfiprintf_internal_r+0x141c>
    a960:	01400284 	movi	r5,10
    a964:	000cb300 	call	cb30 <__mulsi3>
    a968:	80c00007 	ldb	r3,0(r16)
    a96c:	1709883a 	add	r4,r2,fp
    a970:	85800044 	addi	r22,r16,1
    a974:	1f3ff404 	addi	fp,r3,-48
    a978:	b021883a 	mov	r16,r22
    a97c:	af3ff82e 	bgeu	r21,fp,a960 <_gp+0xfffee804>
    a980:	2021883a 	mov	r16,r4
    a984:	203d9f0e 	bge	r4,zero,a004 <_gp+0xfffedea8>
    a988:	043fffc4 	movi	r16,-1
    a98c:	003d9d06 	br	a004 <_gp+0xfffedea8>
    a990:	8c401014 	ori	r17,r17,64
    a994:	b0c00007 	ldb	r3,0(r22)
    a998:	003d9906 	br	a000 <_gp+0xfffedea4>
    a99c:	d9002217 	ldw	r4,136(sp)
    a9a0:	d8001d85 	stb	zero,118(sp)
    a9a4:	20c00204 	addi	r3,r4,8
    a9a8:	24c00017 	ldw	r19,0(r4)
    a9ac:	25000117 	ldw	r20,4(r4)
    a9b0:	8001e716 	blt	r16,zero,b150 <___vfiprintf_internal_r+0x12c4>
    a9b4:	013fdfc4 	movi	r4,-129
    a9b8:	9d04b03a 	or	r2,r19,r20
    a9bc:	d8c02215 	stw	r3,136(sp)
    a9c0:	8922703a 	and	r17,r17,r4
    a9c4:	002b883a 	mov	r21,zero
    a9c8:	103f2f1e 	bne	r2,zero,a688 <_gp+0xfffee52c>
    a9cc:	803e2f26 	beq	r16,zero,a28c <_gp+0xfffee130>
    a9d0:	0027883a 	mov	r19,zero
    a9d4:	9cc00c04 	addi	r19,r19,48
    a9d8:	dcc019c5 	stb	r19,103(sp)
    a9dc:	dd002817 	ldw	r20,160(sp)
    a9e0:	ddc019c4 	addi	r23,sp,103
    a9e4:	003e2c06 	br	a298 <_gp+0xfffee13c>
    a9e8:	9cc03fcc 	andi	r19,r19,255
    a9ec:	b811883a 	mov	r8,r23
    a9f0:	9802571e 	bne	r19,zero,b350 <___vfiprintf_internal_r+0x14c4>
    a9f4:	18005726 	beq	r3,zero,ab54 <___vfiprintf_internal_r+0xcc8>
    a9f8:	04c00044 	movi	r19,1
    a9fc:	d8c01005 	stb	r3,64(sp)
    aa00:	d8001d85 	stb	zero,118(sp)
    aa04:	9829883a 	mov	r20,r19
    aa08:	ddc01004 	addi	r23,sp,64
    aa0c:	003f0a06 	br	a638 <_gp+0xfffee4dc>
    aa10:	d9402017 	ldw	r5,128(sp)
    aa14:	d9002117 	ldw	r4,132(sp)
    aa18:	d9801a04 	addi	r6,sp,104
    aa1c:	da802a15 	stw	r10,168(sp)
    aa20:	0009d780 	call	9d78 <__sprint_r.part.0>
    aa24:	da802a17 	ldw	r10,168(sp)
    aa28:	1000501e 	bne	r2,zero,ab6c <___vfiprintf_internal_r+0xce0>
    aa2c:	d9801b17 	ldw	r6,108(sp)
    aa30:	d8801c17 	ldw	r2,112(sp)
    aa34:	d811883a 	mov	r8,sp
    aa38:	31000044 	addi	r4,r6,1
    aa3c:	003e3606 	br	a318 <_gp+0xfffee1bc>
    aa40:	d9001b17 	ldw	r4,108(sp)
    aa44:	d8801c17 	ldw	r2,112(sp)
    aa48:	21400044 	addi	r5,r4,1
    aa4c:	d9801d87 	ldb	r6,118(sp)
    aa50:	303e5226 	beq	r6,zero,a39c <_gp+0xfffee240>
    aa54:	01800044 	movi	r6,1
    aa58:	d9001d84 	addi	r4,sp,118
    aa5c:	1185883a 	add	r2,r2,r6
    aa60:	41000015 	stw	r4,0(r8)
    aa64:	41800115 	stw	r6,4(r8)
    aa68:	d8801c15 	stw	r2,112(sp)
    aa6c:	d9401b15 	stw	r5,108(sp)
    aa70:	010001c4 	movi	r4,7
    aa74:	2140b00e 	bge	r4,r5,ad38 <___vfiprintf_internal_r+0xeac>
    aa78:	1000f61e 	bne	r2,zero,ae54 <___vfiprintf_internal_r+0xfc8>
    aa7c:	3800b31e 	bne	r7,zero,ad4c <___vfiprintf_internal_r+0xec0>
    aa80:	0009883a 	mov	r4,zero
    aa84:	300b883a 	mov	r5,r6
    aa88:	d811883a 	mov	r8,sp
    aa8c:	01802004 	movi	r6,128
    aa90:	19be5226 	beq	r3,r6,a3dc <_gp+0xfffee280>
    aa94:	8521c83a 	sub	r16,r16,r20
    aa98:	043e790e 	bge	zero,r16,a480 <_gp+0xfffee324>
    aa9c:	05400404 	movi	r21,16
    aaa0:	ac01b00e 	bge	r21,r16,b164 <___vfiprintf_internal_r+0x12d8>
    aaa4:	01400074 	movhi	r5,1
    aaa8:	29495704 	addi	r5,r5,9564
    aaac:	d9402315 	stw	r5,140(sp)
    aab0:	070001c4 	movi	fp,7
    aab4:	00000506 	br	aacc <___vfiprintf_internal_r+0xc40>
    aab8:	21400084 	addi	r5,r4,2
    aabc:	42000204 	addi	r8,r8,8
    aac0:	1809883a 	mov	r4,r3
    aac4:	843ffc04 	addi	r16,r16,-16
    aac8:	ac000d0e 	bge	r21,r16,ab00 <___vfiprintf_internal_r+0xc74>
    aacc:	10800404 	addi	r2,r2,16
    aad0:	20c00044 	addi	r3,r4,1
    aad4:	44800015 	stw	r18,0(r8)
    aad8:	45400115 	stw	r21,4(r8)
    aadc:	d8801c15 	stw	r2,112(sp)
    aae0:	d8c01b15 	stw	r3,108(sp)
    aae4:	e0fff40e 	bge	fp,r3,aab8 <_gp+0xfffee95c>
    aae8:	1000101e 	bne	r2,zero,ab2c <___vfiprintf_internal_r+0xca0>
    aaec:	843ffc04 	addi	r16,r16,-16
    aaf0:	01400044 	movi	r5,1
    aaf4:	0009883a 	mov	r4,zero
    aaf8:	d811883a 	mov	r8,sp
    aafc:	ac3ff316 	blt	r21,r16,aacc <_gp+0xfffee970>
    ab00:	d8c02317 	ldw	r3,140(sp)
    ab04:	1405883a 	add	r2,r2,r16
    ab08:	44000115 	stw	r16,4(r8)
    ab0c:	40c00015 	stw	r3,0(r8)
    ab10:	d8801c15 	stw	r2,112(sp)
    ab14:	d9401b15 	stw	r5,108(sp)
    ab18:	00c001c4 	movi	r3,7
    ab1c:	19401916 	blt	r3,r5,ab84 <___vfiprintf_internal_r+0xcf8>
    ab20:	42000204 	addi	r8,r8,8
    ab24:	29400044 	addi	r5,r5,1
    ab28:	003e5506 	br	a480 <_gp+0xfffee324>
    ab2c:	d9402017 	ldw	r5,128(sp)
    ab30:	d9002117 	ldw	r4,132(sp)
    ab34:	d9801a04 	addi	r6,sp,104
    ab38:	0009d780 	call	9d78 <__sprint_r.part.0>
    ab3c:	10000b1e 	bne	r2,zero,ab6c <___vfiprintf_internal_r+0xce0>
    ab40:	d9001b17 	ldw	r4,108(sp)
    ab44:	d8801c17 	ldw	r2,112(sp)
    ab48:	d811883a 	mov	r8,sp
    ab4c:	21400044 	addi	r5,r4,1
    ab50:	003fdc06 	br	aac4 <_gp+0xfffee968>
    ab54:	d8801c17 	ldw	r2,112(sp)
    ab58:	10000426 	beq	r2,zero,ab6c <___vfiprintf_internal_r+0xce0>
    ab5c:	d9402017 	ldw	r5,128(sp)
    ab60:	d9002117 	ldw	r4,132(sp)
    ab64:	d9801a04 	addi	r6,sp,104
    ab68:	0009d780 	call	9d78 <__sprint_r.part.0>
    ab6c:	d9402017 	ldw	r5,128(sp)
    ab70:	2880030b 	ldhu	r2,12(r5)
    ab74:	1080100c 	andi	r2,r2,64
    ab78:	10014d1e 	bne	r2,zero,b0b0 <___vfiprintf_internal_r+0x1224>
    ab7c:	d8802417 	ldw	r2,144(sp)
    ab80:	003d9706 	br	a1e0 <_gp+0xfffee084>
    ab84:	1000d21e 	bne	r2,zero,aed0 <___vfiprintf_internal_r+0x1044>
    ab88:	00c00044 	movi	r3,1
    ab8c:	a005883a 	mov	r2,r20
    ab90:	ddc00015 	stw	r23,0(sp)
    ab94:	dd000115 	stw	r20,4(sp)
    ab98:	dd001c15 	stw	r20,112(sp)
    ab9c:	d8c01b15 	stw	r3,108(sp)
    aba0:	d811883a 	mov	r8,sp
    aba4:	42000204 	addi	r8,r8,8
    aba8:	8c40010c 	andi	r17,r17,4
    abac:	88004026 	beq	r17,zero,acb0 <___vfiprintf_internal_r+0xe24>
    abb0:	d9002517 	ldw	r4,148(sp)
    abb4:	24e3c83a 	sub	r17,r4,r19
    abb8:	04403d0e 	bge	zero,r17,acb0 <___vfiprintf_internal_r+0xe24>
    abbc:	04000404 	movi	r16,16
    abc0:	8441a90e 	bge	r16,r17,b268 <___vfiprintf_internal_r+0x13dc>
    abc4:	00c00074 	movhi	r3,1
    abc8:	18c95b04 	addi	r3,r3,9580
    abcc:	d9001b17 	ldw	r4,108(sp)
    abd0:	d8c02315 	stw	r3,140(sp)
    abd4:	050001c4 	movi	r20,7
    abd8:	dd402117 	ldw	r21,132(sp)
    abdc:	ddc02017 	ldw	r23,128(sp)
    abe0:	00000506 	br	abf8 <___vfiprintf_internal_r+0xd6c>
    abe4:	21400084 	addi	r5,r4,2
    abe8:	42000204 	addi	r8,r8,8
    abec:	1809883a 	mov	r4,r3
    abf0:	8c7ffc04 	addi	r17,r17,-16
    abf4:	84400f0e 	bge	r16,r17,ac34 <___vfiprintf_internal_r+0xda8>
    abf8:	01400074 	movhi	r5,1
    abfc:	10800404 	addi	r2,r2,16
    ac00:	20c00044 	addi	r3,r4,1
    ac04:	29495b04 	addi	r5,r5,9580
    ac08:	41400015 	stw	r5,0(r8)
    ac0c:	44000115 	stw	r16,4(r8)
    ac10:	d8801c15 	stw	r2,112(sp)
    ac14:	d8c01b15 	stw	r3,108(sp)
    ac18:	a0fff20e 	bge	r20,r3,abe4 <_gp+0xfffeea88>
    ac1c:	1000141e 	bne	r2,zero,ac70 <___vfiprintf_internal_r+0xde4>
    ac20:	8c7ffc04 	addi	r17,r17,-16
    ac24:	01400044 	movi	r5,1
    ac28:	0009883a 	mov	r4,zero
    ac2c:	d811883a 	mov	r8,sp
    ac30:	847ff116 	blt	r16,r17,abf8 <_gp+0xfffeea9c>
    ac34:	d8c02317 	ldw	r3,140(sp)
    ac38:	1445883a 	add	r2,r2,r17
    ac3c:	44400115 	stw	r17,4(r8)
    ac40:	40c00015 	stw	r3,0(r8)
    ac44:	d8801c15 	stw	r2,112(sp)
    ac48:	d9401b15 	stw	r5,108(sp)
    ac4c:	00c001c4 	movi	r3,7
    ac50:	1940170e 	bge	r3,r5,acb0 <___vfiprintf_internal_r+0xe24>
    ac54:	1000101e 	bne	r2,zero,ac98 <___vfiprintf_internal_r+0xe0c>
    ac58:	d8802517 	ldw	r2,148(sp)
    ac5c:	14c11616 	blt	r2,r19,b0b8 <___vfiprintf_internal_r+0x122c>
    ac60:	d9002417 	ldw	r4,144(sp)
    ac64:	2089883a 	add	r4,r4,r2
    ac68:	d9002415 	stw	r4,144(sp)
    ac6c:	003e1806 	br	a4d0 <_gp+0xfffee374>
    ac70:	d9801a04 	addi	r6,sp,104
    ac74:	b80b883a 	mov	r5,r23
    ac78:	a809883a 	mov	r4,r21
    ac7c:	0009d780 	call	9d78 <__sprint_r.part.0>
    ac80:	103fba1e 	bne	r2,zero,ab6c <_gp+0xfffeea10>
    ac84:	d9001b17 	ldw	r4,108(sp)
    ac88:	d8801c17 	ldw	r2,112(sp)
    ac8c:	d811883a 	mov	r8,sp
    ac90:	21400044 	addi	r5,r4,1
    ac94:	003fd606 	br	abf0 <_gp+0xfffeea94>
    ac98:	d9402017 	ldw	r5,128(sp)
    ac9c:	d9002117 	ldw	r4,132(sp)
    aca0:	d9801a04 	addi	r6,sp,104
    aca4:	0009d780 	call	9d78 <__sprint_r.part.0>
    aca8:	103fb01e 	bne	r2,zero,ab6c <_gp+0xfffeea10>
    acac:	d8801c17 	ldw	r2,112(sp)
    acb0:	d8c02517 	ldw	r3,148(sp)
    acb4:	1cc0010e 	bge	r3,r19,acbc <___vfiprintf_internal_r+0xe30>
    acb8:	9807883a 	mov	r3,r19
    acbc:	d9002417 	ldw	r4,144(sp)
    acc0:	20c9883a 	add	r4,r4,r3
    acc4:	d9002415 	stw	r4,144(sp)
    acc8:	103e0126 	beq	r2,zero,a4d0 <_gp+0xfffee374>
    accc:	d9402017 	ldw	r5,128(sp)
    acd0:	d9002117 	ldw	r4,132(sp)
    acd4:	d9801a04 	addi	r6,sp,104
    acd8:	0009d780 	call	9d78 <__sprint_r.part.0>
    acdc:	103dfc26 	beq	r2,zero,a4d0 <_gp+0xfffee374>
    ace0:	003fa206 	br	ab6c <_gp+0xfffeea10>
    ace4:	d9402017 	ldw	r5,128(sp)
    ace8:	d9002117 	ldw	r4,132(sp)
    acec:	d9801a04 	addi	r6,sp,104
    acf0:	d9c02b15 	stw	r7,172(sp)
    acf4:	0009d780 	call	9d78 <__sprint_r.part.0>
    acf8:	d9c02b17 	ldw	r7,172(sp)
    acfc:	103f9b1e 	bne	r2,zero,ab6c <_gp+0xfffeea10>
    ad00:	d9001b17 	ldw	r4,108(sp)
    ad04:	d8801c17 	ldw	r2,112(sp)
    ad08:	d811883a 	mov	r8,sp
    ad0c:	21800044 	addi	r6,r4,1
    ad10:	003dbf06 	br	a410 <_gp+0xfffee2b4>
    ad14:	1000d81e 	bne	r2,zero,b078 <___vfiprintf_internal_r+0x11ec>
    ad18:	d9001d87 	ldb	r4,118(sp)
    ad1c:	20000a26 	beq	r4,zero,ad48 <___vfiprintf_internal_r+0xebc>
    ad20:	00800044 	movi	r2,1
    ad24:	d9001d84 	addi	r4,sp,118
    ad28:	100b883a 	mov	r5,r2
    ad2c:	d9000015 	stw	r4,0(sp)
    ad30:	d8800115 	stw	r2,4(sp)
    ad34:	d811883a 	mov	r8,sp
    ad38:	2809883a 	mov	r4,r5
    ad3c:	42000204 	addi	r8,r8,8
    ad40:	29400044 	addi	r5,r5,1
    ad44:	003d9506 	br	a39c <_gp+0xfffee240>
    ad48:	3800fd26 	beq	r7,zero,b140 <___vfiprintf_internal_r+0x12b4>
    ad4c:	00800084 	movi	r2,2
    ad50:	d9001d04 	addi	r4,sp,116
    ad54:	d9000015 	stw	r4,0(sp)
    ad58:	d8800115 	stw	r2,4(sp)
    ad5c:	01400044 	movi	r5,1
    ad60:	d811883a 	mov	r8,sp
    ad64:	2809883a 	mov	r4,r5
    ad68:	42000204 	addi	r8,r8,8
    ad6c:	29400044 	addi	r5,r5,1
    ad70:	003f4606 	br	aa8c <_gp+0xfffee930>
    ad74:	d8802517 	ldw	r2,148(sp)
    ad78:	14c0010e 	bge	r2,r19,ad80 <___vfiprintf_internal_r+0xef4>
    ad7c:	9805883a 	mov	r2,r19
    ad80:	d9402417 	ldw	r5,144(sp)
    ad84:	288b883a 	add	r5,r5,r2
    ad88:	d9402415 	stw	r5,144(sp)
    ad8c:	003dd006 	br	a4d0 <_gp+0xfffee374>
    ad90:	d8001d85 	stb	zero,118(sp)
    ad94:	80005d16 	blt	r16,zero,af0c <___vfiprintf_internal_r+0x1080>
    ad98:	00ffdfc4 	movi	r3,-129
    ad9c:	9d04b03a 	or	r2,r19,r20
    ada0:	88e2703a 	and	r17,r17,r3
    ada4:	103d3726 	beq	r2,zero,a284 <_gp+0xfffee128>
    ada8:	002b883a 	mov	r21,zero
    adac:	d9002617 	ldw	r4,152(sp)
    adb0:	ddc01a04 	addi	r23,sp,104
    adb4:	988003cc 	andi	r2,r19,15
    adb8:	a006973a 	slli	r3,r20,28
    adbc:	2085883a 	add	r2,r4,r2
    adc0:	9826d13a 	srli	r19,r19,4
    adc4:	10800003 	ldbu	r2,0(r2)
    adc8:	a028d13a 	srli	r20,r20,4
    adcc:	bdffffc4 	addi	r23,r23,-1
    add0:	1ce6b03a 	or	r19,r3,r19
    add4:	b8800005 	stb	r2,0(r23)
    add8:	9d04b03a 	or	r2,r19,r20
    addc:	103ff51e 	bne	r2,zero,adb4 <_gp+0xfffeec58>
    ade0:	d8801e17 	ldw	r2,120(sp)
    ade4:	15e9c83a 	sub	r20,r2,r23
    ade8:	003d2b06 	br	a298 <_gp+0xfffee13c>
    adec:	d9402017 	ldw	r5,128(sp)
    adf0:	d9002117 	ldw	r4,132(sp)
    adf4:	d9801a04 	addi	r6,sp,104
    adf8:	0009d780 	call	9d78 <__sprint_r.part.0>
    adfc:	103f5b1e 	bne	r2,zero,ab6c <_gp+0xfffeea10>
    ae00:	d8801c17 	ldw	r2,112(sp)
    ae04:	d811883a 	mov	r8,sp
    ae08:	003f6706 	br	aba8 <_gp+0xfffeea4c>
    ae0c:	d9402017 	ldw	r5,128(sp)
    ae10:	d9002117 	ldw	r4,132(sp)
    ae14:	d9801a04 	addi	r6,sp,104
    ae18:	0009d780 	call	9d78 <__sprint_r.part.0>
    ae1c:	103f531e 	bne	r2,zero,ab6c <_gp+0xfffeea10>
    ae20:	d811883a 	mov	r8,sp
    ae24:	003cd906 	br	a18c <_gp+0xfffee030>
    ae28:	10803fcc 	andi	r2,r2,255
    ae2c:	1080201c 	xori	r2,r2,128
    ae30:	10bfe004 	addi	r2,r2,-128
    ae34:	00c00c04 	movi	r3,48
    ae38:	10ffe926 	beq	r2,r3,ade0 <_gp+0xfffeec84>
    ae3c:	b8ffffc5 	stb	r3,-1(r23)
    ae40:	d8c01e17 	ldw	r3,120(sp)
    ae44:	b8bfffc4 	addi	r2,r23,-1
    ae48:	102f883a 	mov	r23,r2
    ae4c:	18a9c83a 	sub	r20,r3,r2
    ae50:	003d1106 	br	a298 <_gp+0xfffee13c>
    ae54:	d9402017 	ldw	r5,128(sp)
    ae58:	d9002117 	ldw	r4,132(sp)
    ae5c:	d9801a04 	addi	r6,sp,104
    ae60:	d8c02a15 	stw	r3,168(sp)
    ae64:	d9c02b15 	stw	r7,172(sp)
    ae68:	0009d780 	call	9d78 <__sprint_r.part.0>
    ae6c:	d8c02a17 	ldw	r3,168(sp)
    ae70:	d9c02b17 	ldw	r7,172(sp)
    ae74:	103f3d1e 	bne	r2,zero,ab6c <_gp+0xfffeea10>
    ae78:	d9001b17 	ldw	r4,108(sp)
    ae7c:	d8801c17 	ldw	r2,112(sp)
    ae80:	d811883a 	mov	r8,sp
    ae84:	21400044 	addi	r5,r4,1
    ae88:	003d4406 	br	a39c <_gp+0xfffee240>
    ae8c:	d9402017 	ldw	r5,128(sp)
    ae90:	d9002117 	ldw	r4,132(sp)
    ae94:	d9801a04 	addi	r6,sp,104
    ae98:	d8c02a15 	stw	r3,168(sp)
    ae9c:	0009d780 	call	9d78 <__sprint_r.part.0>
    aea0:	d8c02a17 	ldw	r3,168(sp)
    aea4:	103f311e 	bne	r2,zero,ab6c <_gp+0xfffeea10>
    aea8:	d9001b17 	ldw	r4,108(sp)
    aeac:	d8801c17 	ldw	r2,112(sp)
    aeb0:	d811883a 	mov	r8,sp
    aeb4:	21400044 	addi	r5,r4,1
    aeb8:	003ef406 	br	aa8c <_gp+0xfffee930>
    aebc:	1000bd1e 	bne	r2,zero,b1b4 <___vfiprintf_internal_r+0x1328>
    aec0:	01400044 	movi	r5,1
    aec4:	0009883a 	mov	r4,zero
    aec8:	d811883a 	mov	r8,sp
    aecc:	003ef106 	br	aa94 <_gp+0xfffee938>
    aed0:	d9402017 	ldw	r5,128(sp)
    aed4:	d9002117 	ldw	r4,132(sp)
    aed8:	d9801a04 	addi	r6,sp,104
    aedc:	0009d780 	call	9d78 <__sprint_r.part.0>
    aee0:	103f221e 	bne	r2,zero,ab6c <_gp+0xfffeea10>
    aee4:	d9401b17 	ldw	r5,108(sp)
    aee8:	d8801c17 	ldw	r2,112(sp)
    aeec:	d811883a 	mov	r8,sp
    aef0:	29400044 	addi	r5,r5,1
    aef4:	003d6206 	br	a480 <_gp+0xfffee324>
    aef8:	01400074 	movhi	r5,1
    aefc:	2948f604 	addi	r5,r5,9176
    af00:	d9402615 	stw	r5,152(sp)
    af04:	d8c02215 	stw	r3,136(sp)
    af08:	1023883a 	mov	r17,r2
    af0c:	9d04b03a 	or	r2,r19,r20
    af10:	103fa51e 	bne	r2,zero,ada8 <_gp+0xfffeec4c>
    af14:	002b883a 	mov	r21,zero
    af18:	00800084 	movi	r2,2
    af1c:	003e4a06 	br	a848 <_gp+0xfffee6ec>
    af20:	01400074 	movhi	r5,1
    af24:	2948f604 	addi	r5,r5,9176
    af28:	002b883a 	mov	r21,zero
    af2c:	d9402615 	stw	r5,152(sp)
    af30:	003f9e06 	br	adac <_gp+0xfffeec50>
    af34:	d9402217 	ldw	r5,136(sp)
    af38:	d8001d85 	stb	zero,118(sp)
    af3c:	0029883a 	mov	r20,zero
    af40:	28800104 	addi	r2,r5,4
    af44:	2cc00017 	ldw	r19,0(r5)
    af48:	803e3a16 	blt	r16,zero,a834 <_gp+0xfffee6d8>
    af4c:	00ffdfc4 	movi	r3,-129
    af50:	d8802215 	stw	r2,136(sp)
    af54:	88e2703a 	and	r17,r17,r3
    af58:	002b883a 	mov	r21,zero
    af5c:	983e9b26 	beq	r19,zero,a9cc <_gp+0xfffee870>
    af60:	00800244 	movi	r2,9
    af64:	14fdc936 	bltu	r2,r19,a68c <_gp+0xfffee530>
    af68:	003e9a06 	br	a9d4 <_gp+0xfffee878>
    af6c:	00800c04 	movi	r2,48
    af70:	d8c01d45 	stb	r3,117(sp)
    af74:	d8801d05 	stb	r2,116(sp)
    af78:	d8001d85 	stb	zero,118(sp)
    af7c:	88c00094 	ori	r3,r17,2
    af80:	80009c16 	blt	r16,zero,b1f4 <___vfiprintf_internal_r+0x1368>
    af84:	00bfdfc4 	movi	r2,-129
    af88:	88a2703a 	and	r17,r17,r2
    af8c:	8c400094 	ori	r17,r17,2
    af90:	002b883a 	mov	r21,zero
    af94:	003f8506 	br	adac <_gp+0xfffeec50>
    af98:	b029883a 	mov	r20,r22
    af9c:	003c0b06 	br	9fcc <_gp+0xfffede70>
    afa0:	04e7c83a 	sub	r19,zero,r19
    afa4:	05400b44 	movi	r21,45
    afa8:	9804c03a 	cmpne	r2,r19,zero
    afac:	0529c83a 	sub	r20,zero,r20
    afb0:	dd401d85 	stb	r21,118(sp)
    afb4:	a0a9c83a 	sub	r20,r20,r2
    afb8:	80009716 	blt	r16,zero,b218 <___vfiprintf_internal_r+0x138c>
    afbc:	00bfdfc4 	movi	r2,-129
    afc0:	88a2703a 	and	r17,r17,r2
    afc4:	003db006 	br	a688 <_gp+0xfffee52c>
    afc8:	b0c00007 	ldb	r3,0(r22)
    afcc:	003c0c06 	br	a000 <_gp+0xfffedea4>
    afd0:	8880100c 	andi	r2,r17,64
    afd4:	d8001d85 	stb	zero,118(sp)
    afd8:	1000461e 	bne	r2,zero,b0f4 <___vfiprintf_internal_r+0x1268>
    afdc:	d9002217 	ldw	r4,136(sp)
    afe0:	0029883a 	mov	r20,zero
    afe4:	20800104 	addi	r2,r4,4
    afe8:	24c00017 	ldw	r19,0(r4)
    afec:	803df80e 	bge	r16,zero,a7d0 <_gp+0xfffee674>
    aff0:	9d06b03a 	or	r3,r19,r20
    aff4:	d8802215 	stw	r2,136(sp)
    aff8:	183d5e1e 	bne	r3,zero,a574 <_gp+0xfffee418>
    affc:	002b883a 	mov	r21,zero
    b000:	0005883a 	mov	r2,zero
    b004:	003e1006 	br	a848 <_gp+0xfffee6ec>
    b008:	8880040c 	andi	r2,r17,16
    b00c:	1000321e 	bne	r2,zero,b0d8 <___vfiprintf_internal_r+0x124c>
    b010:	8c40100c 	andi	r17,r17,64
    b014:	88008d26 	beq	r17,zero,b24c <___vfiprintf_internal_r+0x13c0>
    b018:	d9402217 	ldw	r5,136(sp)
    b01c:	d8c02417 	ldw	r3,144(sp)
    b020:	28800017 	ldw	r2,0(r5)
    b024:	29400104 	addi	r5,r5,4
    b028:	d9402215 	stw	r5,136(sp)
    b02c:	10c0000d 	sth	r3,0(r2)
    b030:	003bca06 	br	9f5c <_gp+0xfffede00>
    b034:	8880100c 	andi	r2,r17,64
    b038:	10003a26 	beq	r2,zero,b124 <___vfiprintf_internal_r+0x1298>
    b03c:	d8802217 	ldw	r2,136(sp)
    b040:	14c0000f 	ldh	r19,0(r2)
    b044:	10800104 	addi	r2,r2,4
    b048:	d8802215 	stw	r2,136(sp)
    b04c:	9829d7fa 	srai	r20,r19,31
    b050:	a005883a 	mov	r2,r20
    b054:	003d8506 	br	a66c <_gp+0xfffee510>
    b058:	8880100c 	andi	r2,r17,64
    b05c:	10002b26 	beq	r2,zero,b10c <___vfiprintf_internal_r+0x1280>
    b060:	d8802217 	ldw	r2,136(sp)
    b064:	0029883a 	mov	r20,zero
    b068:	14c0000b 	ldhu	r19,0(r2)
    b06c:	10800104 	addi	r2,r2,4
    b070:	d8802215 	stw	r2,136(sp)
    b074:	003d5d06 	br	a5ec <_gp+0xfffee490>
    b078:	d9402017 	ldw	r5,128(sp)
    b07c:	d9002117 	ldw	r4,132(sp)
    b080:	d9801a04 	addi	r6,sp,104
    b084:	d8c02a15 	stw	r3,168(sp)
    b088:	d9c02b15 	stw	r7,172(sp)
    b08c:	0009d780 	call	9d78 <__sprint_r.part.0>
    b090:	d8c02a17 	ldw	r3,168(sp)
    b094:	d9c02b17 	ldw	r7,172(sp)
    b098:	103eb41e 	bne	r2,zero,ab6c <_gp+0xfffeea10>
    b09c:	d9001b17 	ldw	r4,108(sp)
    b0a0:	d8801c17 	ldw	r2,112(sp)
    b0a4:	d811883a 	mov	r8,sp
    b0a8:	21400044 	addi	r5,r4,1
    b0ac:	003e6706 	br	aa4c <_gp+0xfffee8f0>
    b0b0:	00bfffc4 	movi	r2,-1
    b0b4:	003c4a06 	br	a1e0 <_gp+0xfffee084>
    b0b8:	9805883a 	mov	r2,r19
    b0bc:	003ee806 	br	ac60 <_gp+0xfffeeb04>
    b0c0:	d8c02217 	ldw	r3,136(sp)
    b0c4:	0029883a 	mov	r20,zero
    b0c8:	18800104 	addi	r2,r3,4
    b0cc:	1cc0000b 	ldhu	r19,0(r3)
    b0d0:	803f9e0e 	bge	r16,zero,af4c <_gp+0xfffeedf0>
    b0d4:	003dd706 	br	a834 <_gp+0xfffee6d8>
    b0d8:	d8c02217 	ldw	r3,136(sp)
    b0dc:	d9002417 	ldw	r4,144(sp)
    b0e0:	18800017 	ldw	r2,0(r3)
    b0e4:	18c00104 	addi	r3,r3,4
    b0e8:	d8c02215 	stw	r3,136(sp)
    b0ec:	11000015 	stw	r4,0(r2)
    b0f0:	003b9a06 	br	9f5c <_gp+0xfffede00>
    b0f4:	d8c02217 	ldw	r3,136(sp)
    b0f8:	0029883a 	mov	r20,zero
    b0fc:	18800104 	addi	r2,r3,4
    b100:	1cc0000b 	ldhu	r19,0(r3)
    b104:	803db20e 	bge	r16,zero,a7d0 <_gp+0xfffee674>
    b108:	003fb906 	br	aff0 <_gp+0xfffeee94>
    b10c:	d9002217 	ldw	r4,136(sp)
    b110:	0029883a 	mov	r20,zero
    b114:	24c00017 	ldw	r19,0(r4)
    b118:	21000104 	addi	r4,r4,4
    b11c:	d9002215 	stw	r4,136(sp)
    b120:	003d3206 	br	a5ec <_gp+0xfffee490>
    b124:	d8c02217 	ldw	r3,136(sp)
    b128:	1cc00017 	ldw	r19,0(r3)
    b12c:	18c00104 	addi	r3,r3,4
    b130:	d8c02215 	stw	r3,136(sp)
    b134:	9829d7fa 	srai	r20,r19,31
    b138:	a005883a 	mov	r2,r20
    b13c:	003d4b06 	br	a66c <_gp+0xfffee510>
    b140:	0009883a 	mov	r4,zero
    b144:	01400044 	movi	r5,1
    b148:	d811883a 	mov	r8,sp
    b14c:	003e4f06 	br	aa8c <_gp+0xfffee930>
    b150:	d8c02215 	stw	r3,136(sp)
    b154:	002b883a 	mov	r21,zero
    b158:	003db806 	br	a83c <_gp+0xfffee6e0>
    b15c:	d811883a 	mov	r8,sp
    b160:	003e9606 	br	abbc <_gp+0xfffeea60>
    b164:	01000074 	movhi	r4,1
    b168:	21095704 	addi	r4,r4,9564
    b16c:	d9002315 	stw	r4,140(sp)
    b170:	003e6306 	br	ab00 <_gp+0xfffee9a4>
    b174:	b0c00043 	ldbu	r3,1(r22)
    b178:	8c400814 	ori	r17,r17,32
    b17c:	b5800044 	addi	r22,r22,1
    b180:	18c03fcc 	andi	r3,r3,255
    b184:	18c0201c 	xori	r3,r3,128
    b188:	18ffe004 	addi	r3,r3,-128
    b18c:	003b9c06 	br	a000 <_gp+0xfffedea4>
    b190:	b809883a 	mov	r4,r23
    b194:	da002a15 	stw	r8,168(sp)
    b198:	00025fc0 	call	25fc <strlen>
    b19c:	1029883a 	mov	r20,r2
    b1a0:	dd401d83 	ldbu	r21,118(sp)
    b1a4:	df002215 	stw	fp,136(sp)
    b1a8:	0021883a 	mov	r16,zero
    b1ac:	da002a17 	ldw	r8,168(sp)
    b1b0:	003c3906 	br	a298 <_gp+0xfffee13c>
    b1b4:	d9402017 	ldw	r5,128(sp)
    b1b8:	d9002117 	ldw	r4,132(sp)
    b1bc:	d9801a04 	addi	r6,sp,104
    b1c0:	0009d780 	call	9d78 <__sprint_r.part.0>
    b1c4:	103e691e 	bne	r2,zero,ab6c <_gp+0xfffeea10>
    b1c8:	d9001b17 	ldw	r4,108(sp)
    b1cc:	d8801c17 	ldw	r2,112(sp)
    b1d0:	d811883a 	mov	r8,sp
    b1d4:	21400044 	addi	r5,r4,1
    b1d8:	003e2e06 	br	aa94 <_gp+0xfffee938>
    b1dc:	01000074 	movhi	r4,1
    b1e0:	21095b04 	addi	r4,r4,9580
    b1e4:	d9002315 	stw	r4,140(sp)
    b1e8:	d9001b17 	ldw	r4,108(sp)
    b1ec:	21000044 	addi	r4,r4,1
    b1f0:	003c5e06 	br	a36c <_gp+0xfffee210>
    b1f4:	002b883a 	mov	r21,zero
    b1f8:	00800084 	movi	r2,2
    b1fc:	10803fcc 	andi	r2,r2,255
    b200:	01000044 	movi	r4,1
    b204:	11002b26 	beq	r2,r4,b2b4 <___vfiprintf_internal_r+0x1428>
    b208:	01000084 	movi	r4,2
    b20c:	11002b1e 	bne	r2,r4,b2bc <___vfiprintf_internal_r+0x1430>
    b210:	1823883a 	mov	r17,r3
    b214:	003ee506 	br	adac <_gp+0xfffeec50>
    b218:	8807883a 	mov	r3,r17
    b21c:	00800044 	movi	r2,1
    b220:	003ff606 	br	b1fc <_gp+0xfffef0a0>
    b224:	00800184 	movi	r2,6
    b228:	1400012e 	bgeu	r2,r16,b230 <___vfiprintf_internal_r+0x13a4>
    b22c:	1021883a 	mov	r16,r2
    b230:	8029883a 	mov	r20,r16
    b234:	8027883a 	mov	r19,r16
    b238:	80002216 	blt	r16,zero,b2c4 <___vfiprintf_internal_r+0x1438>
    b23c:	05c00074 	movhi	r23,1
    b240:	df002215 	stw	fp,136(sp)
    b244:	bdc8fb04 	addi	r23,r23,9196
    b248:	003cfb06 	br	a638 <_gp+0xfffee4dc>
    b24c:	d9002217 	ldw	r4,136(sp)
    b250:	d9402417 	ldw	r5,144(sp)
    b254:	20800017 	ldw	r2,0(r4)
    b258:	21000104 	addi	r4,r4,4
    b25c:	d9002215 	stw	r4,136(sp)
    b260:	11400015 	stw	r5,0(r2)
    b264:	003b3d06 	br	9f5c <_gp+0xfffede00>
    b268:	01400074 	movhi	r5,1
    b26c:	29495b04 	addi	r5,r5,9580
    b270:	d9402315 	stw	r5,140(sp)
    b274:	d9401b17 	ldw	r5,108(sp)
    b278:	29400044 	addi	r5,r5,1
    b27c:	003e6d06 	br	ac34 <_gp+0xfffeead8>
    b280:	8029883a 	mov	r20,r16
    b284:	dd401d83 	ldbu	r21,118(sp)
    b288:	df002215 	stw	fp,136(sp)
    b28c:	0021883a 	mov	r16,zero
    b290:	003c0106 	br	a298 <_gp+0xfffee13c>
    b294:	00c00074 	movhi	r3,1
    b298:	18c95704 	addi	r3,r3,9564
    b29c:	d8c02315 	stw	r3,140(sp)
    b2a0:	280d883a 	mov	r6,r5
    b2a4:	003c6906 	br	a44c <_gp+0xfffee2f0>
    b2a8:	802d883a 	mov	r22,r16
    b2ac:	0021883a 	mov	r16,zero
    b2b0:	003b5406 	br	a004 <_gp+0xfffedea8>
    b2b4:	1823883a 	mov	r17,r3
    b2b8:	003cf306 	br	a688 <_gp+0xfffee52c>
    b2bc:	1823883a 	mov	r17,r3
    b2c0:	003cad06 	br	a578 <_gp+0xfffee41c>
    b2c4:	0027883a 	mov	r19,zero
    b2c8:	003fdc06 	br	b23c <_gp+0xfffef0e0>
    b2cc:	d9402217 	ldw	r5,136(sp)
    b2d0:	8005883a 	mov	r2,r16
    b2d4:	b0c00043 	ldbu	r3,1(r22)
    b2d8:	2c000017 	ldw	r16,0(r5)
    b2dc:	29000104 	addi	r4,r5,4
    b2e0:	d9002215 	stw	r4,136(sp)
    b2e4:	102d883a 	mov	r22,r2
    b2e8:	803fa50e 	bge	r16,zero,b180 <_gp+0xfffef024>
    b2ec:	18c03fcc 	andi	r3,r3,255
    b2f0:	18c0201c 	xori	r3,r3,128
    b2f4:	043fffc4 	movi	r16,-1
    b2f8:	18ffe004 	addi	r3,r3,-128
    b2fc:	003b4006 	br	a000 <_gp+0xfffedea4>
    b300:	d9402303 	ldbu	r5,140(sp)
    b304:	d9401d85 	stb	r5,118(sp)
    b308:	003cae06 	br	a5c4 <_gp+0xfffee468>
    b30c:	d8c02303 	ldbu	r3,140(sp)
    b310:	d8c01d85 	stb	r3,118(sp)
    b314:	003d1406 	br	a768 <_gp+0xfffee60c>
    b318:	d8c02303 	ldbu	r3,140(sp)
    b31c:	d8c01d85 	stb	r3,118(sp)
    b320:	003cca06 	br	a64c <_gp+0xfffee4f0>
    b324:	8880004c 	andi	r2,r17,1
    b328:	002b883a 	mov	r21,zero
    b32c:	10000526 	beq	r2,zero,b344 <___vfiprintf_internal_r+0x14b8>
    b330:	00800c04 	movi	r2,48
    b334:	d88019c5 	stb	r2,103(sp)
    b338:	dd002817 	ldw	r20,160(sp)
    b33c:	ddc019c4 	addi	r23,sp,103
    b340:	003bd506 	br	a298 <_gp+0xfffee13c>
    b344:	0029883a 	mov	r20,zero
    b348:	ddc01a04 	addi	r23,sp,104
    b34c:	003bd206 	br	a298 <_gp+0xfffee13c>
    b350:	d9002303 	ldbu	r4,140(sp)
    b354:	d9001d85 	stb	r4,118(sp)
    b358:	003da606 	br	a9f4 <_gp+0xfffee898>
    b35c:	d8c02303 	ldbu	r3,140(sp)
    b360:	d8c01d85 	stb	r3,118(sp)
    b364:	003c7606 	br	a540 <_gp+0xfffee3e4>
    b368:	d8c02303 	ldbu	r3,140(sp)
    b36c:	d8c01d85 	stb	r3,118(sp)
    b370:	003c6506 	br	a508 <_gp+0xfffee3ac>
    b374:	d9002303 	ldbu	r4,140(sp)
    b378:	d9001d85 	stb	r4,118(sp)
    b37c:	003d3d06 	br	a874 <_gp+0xfffee718>
    b380:	d8c02303 	ldbu	r3,140(sp)
    b384:	d8c01d85 	stb	r3,118(sp)
    b388:	003d1d06 	br	a800 <_gp+0xfffee6a4>
    b38c:	d8c02303 	ldbu	r3,140(sp)
    b390:	d8c01d85 	stb	r3,118(sp)
    b394:	003d0306 	br	a7a4 <_gp+0xfffee648>

0000b398 <__vfiprintf_internal>:
    b398:	00800074 	movhi	r2,1
    b39c:	10905804 	addi	r2,r2,16736
    b3a0:	300f883a 	mov	r7,r6
    b3a4:	280d883a 	mov	r6,r5
    b3a8:	200b883a 	mov	r5,r4
    b3ac:	11000017 	ldw	r4,0(r2)
    b3b0:	0009e8c1 	jmpi	9e8c <___vfiprintf_internal_r>

0000b3b4 <__sbprintf>:
    b3b4:	2880030b 	ldhu	r2,12(r5)
    b3b8:	2ac01917 	ldw	r11,100(r5)
    b3bc:	2a80038b 	ldhu	r10,14(r5)
    b3c0:	2a400717 	ldw	r9,28(r5)
    b3c4:	2a000917 	ldw	r8,36(r5)
    b3c8:	defee204 	addi	sp,sp,-1144
    b3cc:	00c10004 	movi	r3,1024
    b3d0:	dc011a15 	stw	r16,1128(sp)
    b3d4:	10bfff4c 	andi	r2,r2,65533
    b3d8:	2821883a 	mov	r16,r5
    b3dc:	d8cb883a 	add	r5,sp,r3
    b3e0:	dc811c15 	stw	r18,1136(sp)
    b3e4:	dc411b15 	stw	r17,1132(sp)
    b3e8:	dfc11d15 	stw	ra,1140(sp)
    b3ec:	2025883a 	mov	r18,r4
    b3f0:	d881030d 	sth	r2,1036(sp)
    b3f4:	dac11915 	stw	r11,1124(sp)
    b3f8:	da81038d 	sth	r10,1038(sp)
    b3fc:	da410715 	stw	r9,1052(sp)
    b400:	da010915 	stw	r8,1060(sp)
    b404:	dec10015 	stw	sp,1024(sp)
    b408:	dec10415 	stw	sp,1040(sp)
    b40c:	d8c10215 	stw	r3,1032(sp)
    b410:	d8c10515 	stw	r3,1044(sp)
    b414:	d8010615 	stw	zero,1048(sp)
    b418:	0009e8c0 	call	9e8c <___vfiprintf_internal_r>
    b41c:	1023883a 	mov	r17,r2
    b420:	10000416 	blt	r2,zero,b434 <__sbprintf+0x80>
    b424:	d9410004 	addi	r5,sp,1024
    b428:	9009883a 	mov	r4,r18
    b42c:	00066680 	call	6668 <_fflush_r>
    b430:	10000d1e 	bne	r2,zero,b468 <__sbprintf+0xb4>
    b434:	d881030b 	ldhu	r2,1036(sp)
    b438:	1080100c 	andi	r2,r2,64
    b43c:	10000326 	beq	r2,zero,b44c <__sbprintf+0x98>
    b440:	8080030b 	ldhu	r2,12(r16)
    b444:	10801014 	ori	r2,r2,64
    b448:	8080030d 	sth	r2,12(r16)
    b44c:	8805883a 	mov	r2,r17
    b450:	dfc11d17 	ldw	ra,1140(sp)
    b454:	dc811c17 	ldw	r18,1136(sp)
    b458:	dc411b17 	ldw	r17,1132(sp)
    b45c:	dc011a17 	ldw	r16,1128(sp)
    b460:	dec11e04 	addi	sp,sp,1144
    b464:	f800283a 	ret
    b468:	047fffc4 	movi	r17,-1
    b46c:	003ff106 	br	b434 <_gp+0xfffef2d8>

0000b470 <_write_r>:
    b470:	defffd04 	addi	sp,sp,-12
    b474:	2805883a 	mov	r2,r5
    b478:	dc000015 	stw	r16,0(sp)
    b47c:	04000074 	movhi	r16,1
    b480:	dc400115 	stw	r17,4(sp)
    b484:	300b883a 	mov	r5,r6
    b488:	84172904 	addi	r16,r16,23716
    b48c:	2023883a 	mov	r17,r4
    b490:	380d883a 	mov	r6,r7
    b494:	1009883a 	mov	r4,r2
    b498:	dfc00215 	stw	ra,8(sp)
    b49c:	80000015 	stw	zero,0(r16)
    b4a0:	000fcc00 	call	fcc0 <write>
    b4a4:	00ffffc4 	movi	r3,-1
    b4a8:	10c00526 	beq	r2,r3,b4c0 <_write_r+0x50>
    b4ac:	dfc00217 	ldw	ra,8(sp)
    b4b0:	dc400117 	ldw	r17,4(sp)
    b4b4:	dc000017 	ldw	r16,0(sp)
    b4b8:	dec00304 	addi	sp,sp,12
    b4bc:	f800283a 	ret
    b4c0:	80c00017 	ldw	r3,0(r16)
    b4c4:	183ff926 	beq	r3,zero,b4ac <_gp+0xfffef350>
    b4c8:	88c00015 	stw	r3,0(r17)
    b4cc:	003ff706 	br	b4ac <_gp+0xfffef350>

0000b4d0 <_close_r>:
    b4d0:	defffd04 	addi	sp,sp,-12
    b4d4:	dc000015 	stw	r16,0(sp)
    b4d8:	04000074 	movhi	r16,1
    b4dc:	dc400115 	stw	r17,4(sp)
    b4e0:	84172904 	addi	r16,r16,23716
    b4e4:	2023883a 	mov	r17,r4
    b4e8:	2809883a 	mov	r4,r5
    b4ec:	dfc00215 	stw	ra,8(sp)
    b4f0:	80000015 	stw	zero,0(r16)
    b4f4:	000f4380 	call	f438 <close>
    b4f8:	00ffffc4 	movi	r3,-1
    b4fc:	10c00526 	beq	r2,r3,b514 <_close_r+0x44>
    b500:	dfc00217 	ldw	ra,8(sp)
    b504:	dc400117 	ldw	r17,4(sp)
    b508:	dc000017 	ldw	r16,0(sp)
    b50c:	dec00304 	addi	sp,sp,12
    b510:	f800283a 	ret
    b514:	80c00017 	ldw	r3,0(r16)
    b518:	183ff926 	beq	r3,zero,b500 <_gp+0xfffef3a4>
    b51c:	88c00015 	stw	r3,0(r17)
    b520:	003ff706 	br	b500 <_gp+0xfffef3a4>

0000b524 <_calloc_r>:
    b524:	defffe04 	addi	sp,sp,-8
    b528:	2805883a 	mov	r2,r5
    b52c:	dc000015 	stw	r16,0(sp)
    b530:	300b883a 	mov	r5,r6
    b534:	2021883a 	mov	r16,r4
    b538:	1009883a 	mov	r4,r2
    b53c:	dfc00115 	stw	ra,4(sp)
    b540:	000cb300 	call	cb30 <__mulsi3>
    b544:	100b883a 	mov	r5,r2
    b548:	8009883a 	mov	r4,r16
    b54c:	00077c00 	call	77c0 <_malloc_r>
    b550:	10002926 	beq	r2,zero,b5f8 <_calloc_r+0xd4>
    b554:	11bfff17 	ldw	r6,-4(r2)
    b558:	1021883a 	mov	r16,r2
    b55c:	00bfff04 	movi	r2,-4
    b560:	308c703a 	and	r6,r6,r2
    b564:	00c00904 	movi	r3,36
    b568:	308d883a 	add	r6,r6,r2
    b56c:	19801636 	bltu	r3,r6,b5c8 <_calloc_r+0xa4>
    b570:	008004c4 	movi	r2,19
    b574:	11800b2e 	bgeu	r2,r6,b5a4 <_calloc_r+0x80>
    b578:	80000015 	stw	zero,0(r16)
    b57c:	80000115 	stw	zero,4(r16)
    b580:	008006c4 	movi	r2,27
    b584:	11801a2e 	bgeu	r2,r6,b5f0 <_calloc_r+0xcc>
    b588:	80000215 	stw	zero,8(r16)
    b58c:	80000315 	stw	zero,12(r16)
    b590:	30c0151e 	bne	r6,r3,b5e8 <_calloc_r+0xc4>
    b594:	80000415 	stw	zero,16(r16)
    b598:	80800604 	addi	r2,r16,24
    b59c:	80000515 	stw	zero,20(r16)
    b5a0:	00000106 	br	b5a8 <_calloc_r+0x84>
    b5a4:	8005883a 	mov	r2,r16
    b5a8:	10000015 	stw	zero,0(r2)
    b5ac:	10000115 	stw	zero,4(r2)
    b5b0:	10000215 	stw	zero,8(r2)
    b5b4:	8005883a 	mov	r2,r16
    b5b8:	dfc00117 	ldw	ra,4(sp)
    b5bc:	dc000017 	ldw	r16,0(sp)
    b5c0:	dec00204 	addi	sp,sp,8
    b5c4:	f800283a 	ret
    b5c8:	000b883a 	mov	r5,zero
    b5cc:	8009883a 	mov	r4,r16
    b5d0:	00083540 	call	8354 <memset>
    b5d4:	8005883a 	mov	r2,r16
    b5d8:	dfc00117 	ldw	ra,4(sp)
    b5dc:	dc000017 	ldw	r16,0(sp)
    b5e0:	dec00204 	addi	sp,sp,8
    b5e4:	f800283a 	ret
    b5e8:	80800404 	addi	r2,r16,16
    b5ec:	003fee06 	br	b5a8 <_gp+0xfffef44c>
    b5f0:	80800204 	addi	r2,r16,8
    b5f4:	003fec06 	br	b5a8 <_gp+0xfffef44c>
    b5f8:	0005883a 	mov	r2,zero
    b5fc:	003fee06 	br	b5b8 <_gp+0xfffef45c>

0000b600 <_fclose_r>:
    b600:	28003926 	beq	r5,zero,b6e8 <_fclose_r+0xe8>
    b604:	defffc04 	addi	sp,sp,-16
    b608:	dc400115 	stw	r17,4(sp)
    b60c:	dc000015 	stw	r16,0(sp)
    b610:	dfc00315 	stw	ra,12(sp)
    b614:	dc800215 	stw	r18,8(sp)
    b618:	2023883a 	mov	r17,r4
    b61c:	2821883a 	mov	r16,r5
    b620:	20000226 	beq	r4,zero,b62c <_fclose_r+0x2c>
    b624:	20800e17 	ldw	r2,56(r4)
    b628:	10002726 	beq	r2,zero,b6c8 <_fclose_r+0xc8>
    b62c:	8080030f 	ldh	r2,12(r16)
    b630:	1000071e 	bne	r2,zero,b650 <_fclose_r+0x50>
    b634:	0005883a 	mov	r2,zero
    b638:	dfc00317 	ldw	ra,12(sp)
    b63c:	dc800217 	ldw	r18,8(sp)
    b640:	dc400117 	ldw	r17,4(sp)
    b644:	dc000017 	ldw	r16,0(sp)
    b648:	dec00404 	addi	sp,sp,16
    b64c:	f800283a 	ret
    b650:	800b883a 	mov	r5,r16
    b654:	8809883a 	mov	r4,r17
    b658:	000644c0 	call	644c <__sflush_r>
    b65c:	1025883a 	mov	r18,r2
    b660:	80800b17 	ldw	r2,44(r16)
    b664:	10000426 	beq	r2,zero,b678 <_fclose_r+0x78>
    b668:	81400717 	ldw	r5,28(r16)
    b66c:	8809883a 	mov	r4,r17
    b670:	103ee83a 	callr	r2
    b674:	10001616 	blt	r2,zero,b6d0 <_fclose_r+0xd0>
    b678:	8080030b 	ldhu	r2,12(r16)
    b67c:	1080200c 	andi	r2,r2,128
    b680:	1000151e 	bne	r2,zero,b6d8 <_fclose_r+0xd8>
    b684:	81400c17 	ldw	r5,48(r16)
    b688:	28000526 	beq	r5,zero,b6a0 <_fclose_r+0xa0>
    b68c:	80801004 	addi	r2,r16,64
    b690:	28800226 	beq	r5,r2,b69c <_fclose_r+0x9c>
    b694:	8809883a 	mov	r4,r17
    b698:	0006bc80 	call	6bc8 <_free_r>
    b69c:	80000c15 	stw	zero,48(r16)
    b6a0:	81401117 	ldw	r5,68(r16)
    b6a4:	28000326 	beq	r5,zero,b6b4 <_fclose_r+0xb4>
    b6a8:	8809883a 	mov	r4,r17
    b6ac:	0006bc80 	call	6bc8 <_free_r>
    b6b0:	80001115 	stw	zero,68(r16)
    b6b4:	0006a640 	call	6a64 <__sfp_lock_acquire>
    b6b8:	8000030d 	sth	zero,12(r16)
    b6bc:	0006a680 	call	6a68 <__sfp_lock_release>
    b6c0:	9005883a 	mov	r2,r18
    b6c4:	003fdc06 	br	b638 <_gp+0xfffef4dc>
    b6c8:	0006a540 	call	6a54 <__sinit>
    b6cc:	003fd706 	br	b62c <_gp+0xfffef4d0>
    b6d0:	04bfffc4 	movi	r18,-1
    b6d4:	003fe806 	br	b678 <_gp+0xfffef51c>
    b6d8:	81400417 	ldw	r5,16(r16)
    b6dc:	8809883a 	mov	r4,r17
    b6e0:	0006bc80 	call	6bc8 <_free_r>
    b6e4:	003fe706 	br	b684 <_gp+0xfffef528>
    b6e8:	0005883a 	mov	r2,zero
    b6ec:	f800283a 	ret

0000b6f0 <fclose>:
    b6f0:	00800074 	movhi	r2,1
    b6f4:	10905804 	addi	r2,r2,16736
    b6f8:	200b883a 	mov	r5,r4
    b6fc:	11000017 	ldw	r4,0(r2)
    b700:	000b6001 	jmpi	b600 <_fclose_r>

0000b704 <__fputwc>:
    b704:	defff804 	addi	sp,sp,-32
    b708:	dcc00415 	stw	r19,16(sp)
    b70c:	dc800315 	stw	r18,12(sp)
    b710:	dc000115 	stw	r16,4(sp)
    b714:	dfc00715 	stw	ra,28(sp)
    b718:	dd400615 	stw	r21,24(sp)
    b71c:	dd000515 	stw	r20,20(sp)
    b720:	dc400215 	stw	r17,8(sp)
    b724:	2027883a 	mov	r19,r4
    b728:	2825883a 	mov	r18,r5
    b72c:	3021883a 	mov	r16,r6
    b730:	00075b00 	call	75b0 <__locale_mb_cur_max>
    b734:	00c00044 	movi	r3,1
    b738:	10c03e26 	beq	r2,r3,b834 <__fputwc+0x130>
    b73c:	81c01704 	addi	r7,r16,92
    b740:	900d883a 	mov	r6,r18
    b744:	d80b883a 	mov	r5,sp
    b748:	9809883a 	mov	r4,r19
    b74c:	000bbd40 	call	bbd4 <_wcrtomb_r>
    b750:	1029883a 	mov	r20,r2
    b754:	00bfffc4 	movi	r2,-1
    b758:	a0802026 	beq	r20,r2,b7dc <__fputwc+0xd8>
    b75c:	d9400003 	ldbu	r5,0(sp)
    b760:	a0001c26 	beq	r20,zero,b7d4 <__fputwc+0xd0>
    b764:	0023883a 	mov	r17,zero
    b768:	05400284 	movi	r21,10
    b76c:	00000906 	br	b794 <__fputwc+0x90>
    b770:	80800017 	ldw	r2,0(r16)
    b774:	11400005 	stb	r5,0(r2)
    b778:	80c00017 	ldw	r3,0(r16)
    b77c:	18c00044 	addi	r3,r3,1
    b780:	80c00015 	stw	r3,0(r16)
    b784:	8c400044 	addi	r17,r17,1
    b788:	dc45883a 	add	r2,sp,r17
    b78c:	8d00112e 	bgeu	r17,r20,b7d4 <__fputwc+0xd0>
    b790:	11400003 	ldbu	r5,0(r2)
    b794:	80c00217 	ldw	r3,8(r16)
    b798:	18ffffc4 	addi	r3,r3,-1
    b79c:	80c00215 	stw	r3,8(r16)
    b7a0:	183ff30e 	bge	r3,zero,b770 <_gp+0xfffef614>
    b7a4:	80800617 	ldw	r2,24(r16)
    b7a8:	18801916 	blt	r3,r2,b810 <__fputwc+0x10c>
    b7ac:	80800017 	ldw	r2,0(r16)
    b7b0:	11400005 	stb	r5,0(r2)
    b7b4:	80800017 	ldw	r2,0(r16)
    b7b8:	10c00003 	ldbu	r3,0(r2)
    b7bc:	10800044 	addi	r2,r2,1
    b7c0:	1d402326 	beq	r3,r21,b850 <__fputwc+0x14c>
    b7c4:	80800015 	stw	r2,0(r16)
    b7c8:	8c400044 	addi	r17,r17,1
    b7cc:	dc45883a 	add	r2,sp,r17
    b7d0:	8d3fef36 	bltu	r17,r20,b790 <_gp+0xfffef634>
    b7d4:	9005883a 	mov	r2,r18
    b7d8:	00000406 	br	b7ec <__fputwc+0xe8>
    b7dc:	80c0030b 	ldhu	r3,12(r16)
    b7e0:	a005883a 	mov	r2,r20
    b7e4:	18c01014 	ori	r3,r3,64
    b7e8:	80c0030d 	sth	r3,12(r16)
    b7ec:	dfc00717 	ldw	ra,28(sp)
    b7f0:	dd400617 	ldw	r21,24(sp)
    b7f4:	dd000517 	ldw	r20,20(sp)
    b7f8:	dcc00417 	ldw	r19,16(sp)
    b7fc:	dc800317 	ldw	r18,12(sp)
    b800:	dc400217 	ldw	r17,8(sp)
    b804:	dc000117 	ldw	r16,4(sp)
    b808:	dec00804 	addi	sp,sp,32
    b80c:	f800283a 	ret
    b810:	800d883a 	mov	r6,r16
    b814:	29403fcc 	andi	r5,r5,255
    b818:	9809883a 	mov	r4,r19
    b81c:	000ba7c0 	call	ba7c <__swbuf_r>
    b820:	10bfffe0 	cmpeqi	r2,r2,-1
    b824:	10803fcc 	andi	r2,r2,255
    b828:	103fd626 	beq	r2,zero,b784 <_gp+0xfffef628>
    b82c:	00bfffc4 	movi	r2,-1
    b830:	003fee06 	br	b7ec <_gp+0xfffef690>
    b834:	90ffffc4 	addi	r3,r18,-1
    b838:	01003f84 	movi	r4,254
    b83c:	20ffbf36 	bltu	r4,r3,b73c <_gp+0xfffef5e0>
    b840:	900b883a 	mov	r5,r18
    b844:	dc800005 	stb	r18,0(sp)
    b848:	1029883a 	mov	r20,r2
    b84c:	003fc506 	br	b764 <_gp+0xfffef608>
    b850:	800d883a 	mov	r6,r16
    b854:	a80b883a 	mov	r5,r21
    b858:	9809883a 	mov	r4,r19
    b85c:	000ba7c0 	call	ba7c <__swbuf_r>
    b860:	10bfffe0 	cmpeqi	r2,r2,-1
    b864:	003fef06 	br	b824 <_gp+0xfffef6c8>

0000b868 <_fputwc_r>:
    b868:	3080030b 	ldhu	r2,12(r6)
    b86c:	10c8000c 	andi	r3,r2,8192
    b870:	1800051e 	bne	r3,zero,b888 <_fputwc_r+0x20>
    b874:	30c01917 	ldw	r3,100(r6)
    b878:	10880014 	ori	r2,r2,8192
    b87c:	3080030d 	sth	r2,12(r6)
    b880:	18880014 	ori	r2,r3,8192
    b884:	30801915 	stw	r2,100(r6)
    b888:	000b7041 	jmpi	b704 <__fputwc>

0000b88c <fputwc>:
    b88c:	00800074 	movhi	r2,1
    b890:	defffc04 	addi	sp,sp,-16
    b894:	10905804 	addi	r2,r2,16736
    b898:	dc000115 	stw	r16,4(sp)
    b89c:	14000017 	ldw	r16,0(r2)
    b8a0:	dc400215 	stw	r17,8(sp)
    b8a4:	dfc00315 	stw	ra,12(sp)
    b8a8:	2023883a 	mov	r17,r4
    b8ac:	80000226 	beq	r16,zero,b8b8 <fputwc+0x2c>
    b8b0:	80800e17 	ldw	r2,56(r16)
    b8b4:	10001026 	beq	r2,zero,b8f8 <fputwc+0x6c>
    b8b8:	2880030b 	ldhu	r2,12(r5)
    b8bc:	10c8000c 	andi	r3,r2,8192
    b8c0:	1800051e 	bne	r3,zero,b8d8 <fputwc+0x4c>
    b8c4:	28c01917 	ldw	r3,100(r5)
    b8c8:	10880014 	ori	r2,r2,8192
    b8cc:	2880030d 	sth	r2,12(r5)
    b8d0:	18880014 	ori	r2,r3,8192
    b8d4:	28801915 	stw	r2,100(r5)
    b8d8:	280d883a 	mov	r6,r5
    b8dc:	8009883a 	mov	r4,r16
    b8e0:	880b883a 	mov	r5,r17
    b8e4:	dfc00317 	ldw	ra,12(sp)
    b8e8:	dc400217 	ldw	r17,8(sp)
    b8ec:	dc000117 	ldw	r16,4(sp)
    b8f0:	dec00404 	addi	sp,sp,16
    b8f4:	000b7041 	jmpi	b704 <__fputwc>
    b8f8:	8009883a 	mov	r4,r16
    b8fc:	d9400015 	stw	r5,0(sp)
    b900:	0006a540 	call	6a54 <__sinit>
    b904:	d9400017 	ldw	r5,0(sp)
    b908:	003feb06 	br	b8b8 <_gp+0xfffef75c>

0000b90c <_fstat_r>:
    b90c:	defffd04 	addi	sp,sp,-12
    b910:	2805883a 	mov	r2,r5
    b914:	dc000015 	stw	r16,0(sp)
    b918:	04000074 	movhi	r16,1
    b91c:	dc400115 	stw	r17,4(sp)
    b920:	84172904 	addi	r16,r16,23716
    b924:	2023883a 	mov	r17,r4
    b928:	300b883a 	mov	r5,r6
    b92c:	1009883a 	mov	r4,r2
    b930:	dfc00215 	stw	ra,8(sp)
    b934:	80000015 	stw	zero,0(r16)
    b938:	000f5780 	call	f578 <fstat>
    b93c:	00ffffc4 	movi	r3,-1
    b940:	10c00526 	beq	r2,r3,b958 <_fstat_r+0x4c>
    b944:	dfc00217 	ldw	ra,8(sp)
    b948:	dc400117 	ldw	r17,4(sp)
    b94c:	dc000017 	ldw	r16,0(sp)
    b950:	dec00304 	addi	sp,sp,12
    b954:	f800283a 	ret
    b958:	80c00017 	ldw	r3,0(r16)
    b95c:	183ff926 	beq	r3,zero,b944 <_gp+0xfffef7e8>
    b960:	88c00015 	stw	r3,0(r17)
    b964:	003ff706 	br	b944 <_gp+0xfffef7e8>

0000b968 <_isatty_r>:
    b968:	defffd04 	addi	sp,sp,-12
    b96c:	dc000015 	stw	r16,0(sp)
    b970:	04000074 	movhi	r16,1
    b974:	dc400115 	stw	r17,4(sp)
    b978:	84172904 	addi	r16,r16,23716
    b97c:	2023883a 	mov	r17,r4
    b980:	2809883a 	mov	r4,r5
    b984:	dfc00215 	stw	ra,8(sp)
    b988:	80000015 	stw	zero,0(r16)
    b98c:	000f66c0 	call	f66c <isatty>
    b990:	00ffffc4 	movi	r3,-1
    b994:	10c00526 	beq	r2,r3,b9ac <_isatty_r+0x44>
    b998:	dfc00217 	ldw	ra,8(sp)
    b99c:	dc400117 	ldw	r17,4(sp)
    b9a0:	dc000017 	ldw	r16,0(sp)
    b9a4:	dec00304 	addi	sp,sp,12
    b9a8:	f800283a 	ret
    b9ac:	80c00017 	ldw	r3,0(r16)
    b9b0:	183ff926 	beq	r3,zero,b998 <_gp+0xfffef83c>
    b9b4:	88c00015 	stw	r3,0(r17)
    b9b8:	003ff706 	br	b998 <_gp+0xfffef83c>

0000b9bc <_lseek_r>:
    b9bc:	defffd04 	addi	sp,sp,-12
    b9c0:	2805883a 	mov	r2,r5
    b9c4:	dc000015 	stw	r16,0(sp)
    b9c8:	04000074 	movhi	r16,1
    b9cc:	dc400115 	stw	r17,4(sp)
    b9d0:	300b883a 	mov	r5,r6
    b9d4:	84172904 	addi	r16,r16,23716
    b9d8:	2023883a 	mov	r17,r4
    b9dc:	380d883a 	mov	r6,r7
    b9e0:	1009883a 	mov	r4,r2
    b9e4:	dfc00215 	stw	ra,8(sp)
    b9e8:	80000015 	stw	zero,0(r16)
    b9ec:	000f8400 	call	f840 <lseek>
    b9f0:	00ffffc4 	movi	r3,-1
    b9f4:	10c00526 	beq	r2,r3,ba0c <_lseek_r+0x50>
    b9f8:	dfc00217 	ldw	ra,8(sp)
    b9fc:	dc400117 	ldw	r17,4(sp)
    ba00:	dc000017 	ldw	r16,0(sp)
    ba04:	dec00304 	addi	sp,sp,12
    ba08:	f800283a 	ret
    ba0c:	80c00017 	ldw	r3,0(r16)
    ba10:	183ff926 	beq	r3,zero,b9f8 <_gp+0xfffef89c>
    ba14:	88c00015 	stw	r3,0(r17)
    ba18:	003ff706 	br	b9f8 <_gp+0xfffef89c>

0000ba1c <_read_r>:
    ba1c:	defffd04 	addi	sp,sp,-12
    ba20:	2805883a 	mov	r2,r5
    ba24:	dc000015 	stw	r16,0(sp)
    ba28:	04000074 	movhi	r16,1
    ba2c:	dc400115 	stw	r17,4(sp)
    ba30:	300b883a 	mov	r5,r6
    ba34:	84172904 	addi	r16,r16,23716
    ba38:	2023883a 	mov	r17,r4
    ba3c:	380d883a 	mov	r6,r7
    ba40:	1009883a 	mov	r4,r2
    ba44:	dfc00215 	stw	ra,8(sp)
    ba48:	80000015 	stw	zero,0(r16)
    ba4c:	000fa1c0 	call	fa1c <read>
    ba50:	00ffffc4 	movi	r3,-1
    ba54:	10c00526 	beq	r2,r3,ba6c <_read_r+0x50>
    ba58:	dfc00217 	ldw	ra,8(sp)
    ba5c:	dc400117 	ldw	r17,4(sp)
    ba60:	dc000017 	ldw	r16,0(sp)
    ba64:	dec00304 	addi	sp,sp,12
    ba68:	f800283a 	ret
    ba6c:	80c00017 	ldw	r3,0(r16)
    ba70:	183ff926 	beq	r3,zero,ba58 <_gp+0xfffef8fc>
    ba74:	88c00015 	stw	r3,0(r17)
    ba78:	003ff706 	br	ba58 <_gp+0xfffef8fc>

0000ba7c <__swbuf_r>:
    ba7c:	defffb04 	addi	sp,sp,-20
    ba80:	dcc00315 	stw	r19,12(sp)
    ba84:	dc800215 	stw	r18,8(sp)
    ba88:	dc000015 	stw	r16,0(sp)
    ba8c:	dfc00415 	stw	ra,16(sp)
    ba90:	dc400115 	stw	r17,4(sp)
    ba94:	2025883a 	mov	r18,r4
    ba98:	2827883a 	mov	r19,r5
    ba9c:	3021883a 	mov	r16,r6
    baa0:	20000226 	beq	r4,zero,baac <__swbuf_r+0x30>
    baa4:	20800e17 	ldw	r2,56(r4)
    baa8:	10004226 	beq	r2,zero,bbb4 <__swbuf_r+0x138>
    baac:	80800617 	ldw	r2,24(r16)
    bab0:	8100030b 	ldhu	r4,12(r16)
    bab4:	80800215 	stw	r2,8(r16)
    bab8:	2080020c 	andi	r2,r4,8
    babc:	10003626 	beq	r2,zero,bb98 <__swbuf_r+0x11c>
    bac0:	80c00417 	ldw	r3,16(r16)
    bac4:	18003426 	beq	r3,zero,bb98 <__swbuf_r+0x11c>
    bac8:	2088000c 	andi	r2,r4,8192
    bacc:	9c403fcc 	andi	r17,r19,255
    bad0:	10001a26 	beq	r2,zero,bb3c <__swbuf_r+0xc0>
    bad4:	80800017 	ldw	r2,0(r16)
    bad8:	81000517 	ldw	r4,20(r16)
    badc:	10c7c83a 	sub	r3,r2,r3
    bae0:	1900200e 	bge	r3,r4,bb64 <__swbuf_r+0xe8>
    bae4:	18c00044 	addi	r3,r3,1
    bae8:	81000217 	ldw	r4,8(r16)
    baec:	11400044 	addi	r5,r2,1
    baf0:	81400015 	stw	r5,0(r16)
    baf4:	213fffc4 	addi	r4,r4,-1
    baf8:	81000215 	stw	r4,8(r16)
    bafc:	14c00005 	stb	r19,0(r2)
    bb00:	80800517 	ldw	r2,20(r16)
    bb04:	10c01e26 	beq	r2,r3,bb80 <__swbuf_r+0x104>
    bb08:	8080030b 	ldhu	r2,12(r16)
    bb0c:	1080004c 	andi	r2,r2,1
    bb10:	10000226 	beq	r2,zero,bb1c <__swbuf_r+0xa0>
    bb14:	00800284 	movi	r2,10
    bb18:	88801926 	beq	r17,r2,bb80 <__swbuf_r+0x104>
    bb1c:	8805883a 	mov	r2,r17
    bb20:	dfc00417 	ldw	ra,16(sp)
    bb24:	dcc00317 	ldw	r19,12(sp)
    bb28:	dc800217 	ldw	r18,8(sp)
    bb2c:	dc400117 	ldw	r17,4(sp)
    bb30:	dc000017 	ldw	r16,0(sp)
    bb34:	dec00504 	addi	sp,sp,20
    bb38:	f800283a 	ret
    bb3c:	81401917 	ldw	r5,100(r16)
    bb40:	00b7ffc4 	movi	r2,-8193
    bb44:	21080014 	ori	r4,r4,8192
    bb48:	2884703a 	and	r2,r5,r2
    bb4c:	80801915 	stw	r2,100(r16)
    bb50:	80800017 	ldw	r2,0(r16)
    bb54:	8100030d 	sth	r4,12(r16)
    bb58:	81000517 	ldw	r4,20(r16)
    bb5c:	10c7c83a 	sub	r3,r2,r3
    bb60:	193fe016 	blt	r3,r4,bae4 <_gp+0xfffef988>
    bb64:	800b883a 	mov	r5,r16
    bb68:	9009883a 	mov	r4,r18
    bb6c:	00066680 	call	6668 <_fflush_r>
    bb70:	1000071e 	bne	r2,zero,bb90 <__swbuf_r+0x114>
    bb74:	80800017 	ldw	r2,0(r16)
    bb78:	00c00044 	movi	r3,1
    bb7c:	003fda06 	br	bae8 <_gp+0xfffef98c>
    bb80:	800b883a 	mov	r5,r16
    bb84:	9009883a 	mov	r4,r18
    bb88:	00066680 	call	6668 <_fflush_r>
    bb8c:	103fe326 	beq	r2,zero,bb1c <_gp+0xfffef9c0>
    bb90:	00bfffc4 	movi	r2,-1
    bb94:	003fe206 	br	bb20 <_gp+0xfffef9c4>
    bb98:	800b883a 	mov	r5,r16
    bb9c:	9009883a 	mov	r4,r18
    bba0:	0004a480 	call	4a48 <__swsetup_r>
    bba4:	103ffa1e 	bne	r2,zero,bb90 <_gp+0xfffefa34>
    bba8:	8100030b 	ldhu	r4,12(r16)
    bbac:	80c00417 	ldw	r3,16(r16)
    bbb0:	003fc506 	br	bac8 <_gp+0xfffef96c>
    bbb4:	0006a540 	call	6a54 <__sinit>
    bbb8:	003fbc06 	br	baac <_gp+0xfffef950>

0000bbbc <__swbuf>:
    bbbc:	00800074 	movhi	r2,1
    bbc0:	10905804 	addi	r2,r2,16736
    bbc4:	280d883a 	mov	r6,r5
    bbc8:	200b883a 	mov	r5,r4
    bbcc:	11000017 	ldw	r4,0(r2)
    bbd0:	000ba7c1 	jmpi	ba7c <__swbuf_r>

0000bbd4 <_wcrtomb_r>:
    bbd4:	defff604 	addi	sp,sp,-40
    bbd8:	00800074 	movhi	r2,1
    bbdc:	dc800815 	stw	r18,32(sp)
    bbe0:	dc400715 	stw	r17,28(sp)
    bbe4:	dc000615 	stw	r16,24(sp)
    bbe8:	10905c04 	addi	r2,r2,16752
    bbec:	dfc00915 	stw	ra,36(sp)
    bbf0:	2021883a 	mov	r16,r4
    bbf4:	3823883a 	mov	r17,r7
    bbf8:	14800017 	ldw	r18,0(r2)
    bbfc:	28001426 	beq	r5,zero,bc50 <_wcrtomb_r+0x7c>
    bc00:	d9400415 	stw	r5,16(sp)
    bc04:	d9800515 	stw	r6,20(sp)
    bc08:	00075a40 	call	75a4 <__locale_charset>
    bc0c:	d9800517 	ldw	r6,20(sp)
    bc10:	d9400417 	ldw	r5,16(sp)
    bc14:	100f883a 	mov	r7,r2
    bc18:	dc400015 	stw	r17,0(sp)
    bc1c:	8009883a 	mov	r4,r16
    bc20:	903ee83a 	callr	r18
    bc24:	00ffffc4 	movi	r3,-1
    bc28:	10c0031e 	bne	r2,r3,bc38 <_wcrtomb_r+0x64>
    bc2c:	88000015 	stw	zero,0(r17)
    bc30:	00c02284 	movi	r3,138
    bc34:	80c00015 	stw	r3,0(r16)
    bc38:	dfc00917 	ldw	ra,36(sp)
    bc3c:	dc800817 	ldw	r18,32(sp)
    bc40:	dc400717 	ldw	r17,28(sp)
    bc44:	dc000617 	ldw	r16,24(sp)
    bc48:	dec00a04 	addi	sp,sp,40
    bc4c:	f800283a 	ret
    bc50:	00075a40 	call	75a4 <__locale_charset>
    bc54:	100f883a 	mov	r7,r2
    bc58:	dc400015 	stw	r17,0(sp)
    bc5c:	000d883a 	mov	r6,zero
    bc60:	d9400104 	addi	r5,sp,4
    bc64:	8009883a 	mov	r4,r16
    bc68:	903ee83a 	callr	r18
    bc6c:	003fed06 	br	bc24 <_gp+0xfffefac8>

0000bc70 <wcrtomb>:
    bc70:	defff604 	addi	sp,sp,-40
    bc74:	00800074 	movhi	r2,1
    bc78:	dc800615 	stw	r18,24(sp)
    bc7c:	dc400515 	stw	r17,20(sp)
    bc80:	10905804 	addi	r2,r2,16736
    bc84:	dfc00915 	stw	ra,36(sp)
    bc88:	dd000815 	stw	r20,32(sp)
    bc8c:	dcc00715 	stw	r19,28(sp)
    bc90:	dc000415 	stw	r16,16(sp)
    bc94:	3025883a 	mov	r18,r6
    bc98:	14400017 	ldw	r17,0(r2)
    bc9c:	20001926 	beq	r4,zero,bd04 <wcrtomb+0x94>
    bca0:	00800074 	movhi	r2,1
    bca4:	10905c04 	addi	r2,r2,16752
    bca8:	15000017 	ldw	r20,0(r2)
    bcac:	2021883a 	mov	r16,r4
    bcb0:	2827883a 	mov	r19,r5
    bcb4:	00075a40 	call	75a4 <__locale_charset>
    bcb8:	100f883a 	mov	r7,r2
    bcbc:	dc800015 	stw	r18,0(sp)
    bcc0:	980d883a 	mov	r6,r19
    bcc4:	800b883a 	mov	r5,r16
    bcc8:	8809883a 	mov	r4,r17
    bccc:	a03ee83a 	callr	r20
    bcd0:	00ffffc4 	movi	r3,-1
    bcd4:	10c0031e 	bne	r2,r3,bce4 <wcrtomb+0x74>
    bcd8:	90000015 	stw	zero,0(r18)
    bcdc:	00c02284 	movi	r3,138
    bce0:	88c00015 	stw	r3,0(r17)
    bce4:	dfc00917 	ldw	ra,36(sp)
    bce8:	dd000817 	ldw	r20,32(sp)
    bcec:	dcc00717 	ldw	r19,28(sp)
    bcf0:	dc800617 	ldw	r18,24(sp)
    bcf4:	dc400517 	ldw	r17,20(sp)
    bcf8:	dc000417 	ldw	r16,16(sp)
    bcfc:	dec00a04 	addi	sp,sp,40
    bd00:	f800283a 	ret
    bd04:	00800074 	movhi	r2,1
    bd08:	10905c04 	addi	r2,r2,16752
    bd0c:	14000017 	ldw	r16,0(r2)
    bd10:	00075a40 	call	75a4 <__locale_charset>
    bd14:	100f883a 	mov	r7,r2
    bd18:	dc800015 	stw	r18,0(sp)
    bd1c:	000d883a 	mov	r6,zero
    bd20:	d9400104 	addi	r5,sp,4
    bd24:	8809883a 	mov	r4,r17
    bd28:	803ee83a 	callr	r16
    bd2c:	003fe806 	br	bcd0 <_gp+0xfffefb74>

0000bd30 <__ascii_wctomb>:
    bd30:	28000526 	beq	r5,zero,bd48 <__ascii_wctomb+0x18>
    bd34:	00803fc4 	movi	r2,255
    bd38:	11800536 	bltu	r2,r6,bd50 <__ascii_wctomb+0x20>
    bd3c:	29800005 	stb	r6,0(r5)
    bd40:	00800044 	movi	r2,1
    bd44:	f800283a 	ret
    bd48:	0005883a 	mov	r2,zero
    bd4c:	f800283a 	ret
    bd50:	00802284 	movi	r2,138
    bd54:	20800015 	stw	r2,0(r4)
    bd58:	00bfffc4 	movi	r2,-1
    bd5c:	f800283a 	ret

0000bd60 <_wctomb_r>:
    bd60:	00800074 	movhi	r2,1
    bd64:	defff904 	addi	sp,sp,-28
    bd68:	10905c04 	addi	r2,r2,16752
    bd6c:	dfc00615 	stw	ra,24(sp)
    bd70:	dc400515 	stw	r17,20(sp)
    bd74:	dc000415 	stw	r16,16(sp)
    bd78:	3823883a 	mov	r17,r7
    bd7c:	14000017 	ldw	r16,0(r2)
    bd80:	d9000115 	stw	r4,4(sp)
    bd84:	d9400215 	stw	r5,8(sp)
    bd88:	d9800315 	stw	r6,12(sp)
    bd8c:	00075a40 	call	75a4 <__locale_charset>
    bd90:	d9800317 	ldw	r6,12(sp)
    bd94:	d9400217 	ldw	r5,8(sp)
    bd98:	d9000117 	ldw	r4,4(sp)
    bd9c:	100f883a 	mov	r7,r2
    bda0:	dc400015 	stw	r17,0(sp)
    bda4:	803ee83a 	callr	r16
    bda8:	dfc00617 	ldw	ra,24(sp)
    bdac:	dc400517 	ldw	r17,20(sp)
    bdb0:	dc000417 	ldw	r16,16(sp)
    bdb4:	dec00704 	addi	sp,sp,28
    bdb8:	f800283a 	ret

0000bdbc <__udivdi3>:
    bdbc:	defff404 	addi	sp,sp,-48
    bdc0:	dcc00515 	stw	r19,20(sp)
    bdc4:	dc000215 	stw	r16,8(sp)
    bdc8:	dfc00b15 	stw	ra,44(sp)
    bdcc:	df000a15 	stw	fp,40(sp)
    bdd0:	ddc00915 	stw	r23,36(sp)
    bdd4:	dd800815 	stw	r22,32(sp)
    bdd8:	dd400715 	stw	r21,28(sp)
    bddc:	dd000615 	stw	r20,24(sp)
    bde0:	dc800415 	stw	r18,16(sp)
    bde4:	dc400315 	stw	r17,12(sp)
    bde8:	2027883a 	mov	r19,r4
    bdec:	2821883a 	mov	r16,r5
    bdf0:	3800461e 	bne	r7,zero,bf0c <__udivdi3+0x150>
    bdf4:	3023883a 	mov	r17,r6
    bdf8:	2025883a 	mov	r18,r4
    bdfc:	2980572e 	bgeu	r5,r6,bf5c <__udivdi3+0x1a0>
    be00:	00bfffd4 	movui	r2,65535
    be04:	282d883a 	mov	r22,r5
    be08:	1180b236 	bltu	r2,r6,c0d4 <__udivdi3+0x318>
    be0c:	00803fc4 	movi	r2,255
    be10:	1185803a 	cmpltu	r2,r2,r6
    be14:	100490fa 	slli	r2,r2,3
    be18:	3086d83a 	srl	r3,r6,r2
    be1c:	01000074 	movhi	r4,1
    be20:	21095f04 	addi	r4,r4,9596
    be24:	20c7883a 	add	r3,r4,r3
    be28:	18c00003 	ldbu	r3,0(r3)
    be2c:	1885883a 	add	r2,r3,r2
    be30:	00c00804 	movi	r3,32
    be34:	1887c83a 	sub	r3,r3,r2
    be38:	18000526 	beq	r3,zero,be50 <__udivdi3+0x94>
    be3c:	80e0983a 	sll	r16,r16,r3
    be40:	9884d83a 	srl	r2,r19,r2
    be44:	30e2983a 	sll	r17,r6,r3
    be48:	98e4983a 	sll	r18,r19,r3
    be4c:	142cb03a 	or	r22,r2,r16
    be50:	882ad43a 	srli	r21,r17,16
    be54:	b009883a 	mov	r4,r22
    be58:	8d3fffcc 	andi	r20,r17,65535
    be5c:	a80b883a 	mov	r5,r21
    be60:	000cad80 	call	cad8 <__umodsi3>
    be64:	b009883a 	mov	r4,r22
    be68:	a80b883a 	mov	r5,r21
    be6c:	1027883a 	mov	r19,r2
    be70:	000ca740 	call	ca74 <__udivsi3>
    be74:	100b883a 	mov	r5,r2
    be78:	a009883a 	mov	r4,r20
    be7c:	102d883a 	mov	r22,r2
    be80:	000cb300 	call	cb30 <__mulsi3>
    be84:	9826943a 	slli	r19,r19,16
    be88:	9006d43a 	srli	r3,r18,16
    be8c:	1cc6b03a 	or	r3,r3,r19
    be90:	1880052e 	bgeu	r3,r2,bea8 <__udivdi3+0xec>
    be94:	1c47883a 	add	r3,r3,r17
    be98:	b13fffc4 	addi	r4,r22,-1
    be9c:	1c400136 	bltu	r3,r17,bea4 <__udivdi3+0xe8>
    bea0:	18814236 	bltu	r3,r2,c3ac <__udivdi3+0x5f0>
    bea4:	202d883a 	mov	r22,r4
    bea8:	18a1c83a 	sub	r16,r3,r2
    beac:	8009883a 	mov	r4,r16
    beb0:	a80b883a 	mov	r5,r21
    beb4:	000cad80 	call	cad8 <__umodsi3>
    beb8:	1027883a 	mov	r19,r2
    bebc:	8009883a 	mov	r4,r16
    bec0:	a80b883a 	mov	r5,r21
    bec4:	9826943a 	slli	r19,r19,16
    bec8:	000ca740 	call	ca74 <__udivsi3>
    becc:	100b883a 	mov	r5,r2
    bed0:	a009883a 	mov	r4,r20
    bed4:	94bfffcc 	andi	r18,r18,65535
    bed8:	1021883a 	mov	r16,r2
    bedc:	94e4b03a 	or	r18,r18,r19
    bee0:	000cb300 	call	cb30 <__mulsi3>
    bee4:	9080052e 	bgeu	r18,r2,befc <__udivdi3+0x140>
    bee8:	8ca5883a 	add	r18,r17,r18
    beec:	80ffffc4 	addi	r3,r16,-1
    bef0:	94410c36 	bltu	r18,r17,c324 <__udivdi3+0x568>
    bef4:	90810b2e 	bgeu	r18,r2,c324 <__udivdi3+0x568>
    bef8:	843fff84 	addi	r16,r16,-2
    befc:	b004943a 	slli	r2,r22,16
    bf00:	0007883a 	mov	r3,zero
    bf04:	1404b03a 	or	r2,r2,r16
    bf08:	00005e06 	br	c084 <__udivdi3+0x2c8>
    bf0c:	29c05b36 	bltu	r5,r7,c07c <__udivdi3+0x2c0>
    bf10:	00bfffd4 	movui	r2,65535
    bf14:	11c0672e 	bgeu	r2,r7,c0b4 <__udivdi3+0x2f8>
    bf18:	00804034 	movhi	r2,256
    bf1c:	10bfffc4 	addi	r2,r2,-1
    bf20:	11c10a36 	bltu	r2,r7,c34c <__udivdi3+0x590>
    bf24:	00800404 	movi	r2,16
    bf28:	3886d83a 	srl	r3,r7,r2
    bf2c:	01000074 	movhi	r4,1
    bf30:	21095f04 	addi	r4,r4,9596
    bf34:	20c7883a 	add	r3,r4,r3
    bf38:	18c00003 	ldbu	r3,0(r3)
    bf3c:	05c00804 	movi	r23,32
    bf40:	1885883a 	add	r2,r3,r2
    bf44:	b8afc83a 	sub	r23,r23,r2
    bf48:	b800671e 	bne	r23,zero,c0e8 <__udivdi3+0x32c>
    bf4c:	3c010536 	bltu	r7,r16,c364 <__udivdi3+0x5a8>
    bf50:	9985403a 	cmpgeu	r2,r19,r6
    bf54:	0007883a 	mov	r3,zero
    bf58:	00004a06 	br	c084 <__udivdi3+0x2c8>
    bf5c:	3000041e 	bne	r6,zero,bf70 <__udivdi3+0x1b4>
    bf60:	000b883a 	mov	r5,zero
    bf64:	01000044 	movi	r4,1
    bf68:	000ca740 	call	ca74 <__udivsi3>
    bf6c:	1023883a 	mov	r17,r2
    bf70:	00bfffd4 	movui	r2,65535
    bf74:	1440532e 	bgeu	r2,r17,c0c4 <__udivdi3+0x308>
    bf78:	00804034 	movhi	r2,256
    bf7c:	10bfffc4 	addi	r2,r2,-1
    bf80:	1440f436 	bltu	r2,r17,c354 <__udivdi3+0x598>
    bf84:	00800404 	movi	r2,16
    bf88:	8886d83a 	srl	r3,r17,r2
    bf8c:	01000074 	movhi	r4,1
    bf90:	21095f04 	addi	r4,r4,9596
    bf94:	20c7883a 	add	r3,r4,r3
    bf98:	18c00003 	ldbu	r3,0(r3)
    bf9c:	1885883a 	add	r2,r3,r2
    bfa0:	00c00804 	movi	r3,32
    bfa4:	1887c83a 	sub	r3,r3,r2
    bfa8:	1800a51e 	bne	r3,zero,c240 <__udivdi3+0x484>
    bfac:	882ad43a 	srli	r21,r17,16
    bfb0:	8461c83a 	sub	r16,r16,r17
    bfb4:	8d3fffcc 	andi	r20,r17,65535
    bfb8:	00c00044 	movi	r3,1
    bfbc:	a80b883a 	mov	r5,r21
    bfc0:	8009883a 	mov	r4,r16
    bfc4:	d8c00115 	stw	r3,4(sp)
    bfc8:	000cad80 	call	cad8 <__umodsi3>
    bfcc:	a80b883a 	mov	r5,r21
    bfd0:	8009883a 	mov	r4,r16
    bfd4:	1027883a 	mov	r19,r2
    bfd8:	000ca740 	call	ca74 <__udivsi3>
    bfdc:	a00b883a 	mov	r5,r20
    bfe0:	1009883a 	mov	r4,r2
    bfe4:	102d883a 	mov	r22,r2
    bfe8:	000cb300 	call	cb30 <__mulsi3>
    bfec:	9826943a 	slli	r19,r19,16
    bff0:	900ed43a 	srli	r7,r18,16
    bff4:	d8c00117 	ldw	r3,4(sp)
    bff8:	3cceb03a 	or	r7,r7,r19
    bffc:	3880052e 	bgeu	r7,r2,c014 <__udivdi3+0x258>
    c000:	3c4f883a 	add	r7,r7,r17
    c004:	b13fffc4 	addi	r4,r22,-1
    c008:	3c400136 	bltu	r7,r17,c010 <__udivdi3+0x254>
    c00c:	3880e436 	bltu	r7,r2,c3a0 <__udivdi3+0x5e4>
    c010:	202d883a 	mov	r22,r4
    c014:	38a1c83a 	sub	r16,r7,r2
    c018:	8009883a 	mov	r4,r16
    c01c:	a80b883a 	mov	r5,r21
    c020:	d8c00115 	stw	r3,4(sp)
    c024:	000cad80 	call	cad8 <__umodsi3>
    c028:	1027883a 	mov	r19,r2
    c02c:	8009883a 	mov	r4,r16
    c030:	a80b883a 	mov	r5,r21
    c034:	9826943a 	slli	r19,r19,16
    c038:	000ca740 	call	ca74 <__udivsi3>
    c03c:	a00b883a 	mov	r5,r20
    c040:	1009883a 	mov	r4,r2
    c044:	94bfffcc 	andi	r18,r18,65535
    c048:	1021883a 	mov	r16,r2
    c04c:	94e4b03a 	or	r18,r18,r19
    c050:	000cb300 	call	cb30 <__mulsi3>
    c054:	d8c00117 	ldw	r3,4(sp)
    c058:	9080052e 	bgeu	r18,r2,c070 <__udivdi3+0x2b4>
    c05c:	8ca5883a 	add	r18,r17,r18
    c060:	813fffc4 	addi	r4,r16,-1
    c064:	9440ad36 	bltu	r18,r17,c31c <__udivdi3+0x560>
    c068:	9080ac2e 	bgeu	r18,r2,c31c <__udivdi3+0x560>
    c06c:	843fff84 	addi	r16,r16,-2
    c070:	b004943a 	slli	r2,r22,16
    c074:	1404b03a 	or	r2,r2,r16
    c078:	00000206 	br	c084 <__udivdi3+0x2c8>
    c07c:	0007883a 	mov	r3,zero
    c080:	0005883a 	mov	r2,zero
    c084:	dfc00b17 	ldw	ra,44(sp)
    c088:	df000a17 	ldw	fp,40(sp)
    c08c:	ddc00917 	ldw	r23,36(sp)
    c090:	dd800817 	ldw	r22,32(sp)
    c094:	dd400717 	ldw	r21,28(sp)
    c098:	dd000617 	ldw	r20,24(sp)
    c09c:	dcc00517 	ldw	r19,20(sp)
    c0a0:	dc800417 	ldw	r18,16(sp)
    c0a4:	dc400317 	ldw	r17,12(sp)
    c0a8:	dc000217 	ldw	r16,8(sp)
    c0ac:	dec00c04 	addi	sp,sp,48
    c0b0:	f800283a 	ret
    c0b4:	00803fc4 	movi	r2,255
    c0b8:	11c5803a 	cmpltu	r2,r2,r7
    c0bc:	100490fa 	slli	r2,r2,3
    c0c0:	003f9906 	br	bf28 <_gp+0xfffefdcc>
    c0c4:	00803fc4 	movi	r2,255
    c0c8:	1445803a 	cmpltu	r2,r2,r17
    c0cc:	100490fa 	slli	r2,r2,3
    c0d0:	003fad06 	br	bf88 <_gp+0xfffefe2c>
    c0d4:	00804034 	movhi	r2,256
    c0d8:	10bfffc4 	addi	r2,r2,-1
    c0dc:	11809f36 	bltu	r2,r6,c35c <__udivdi3+0x5a0>
    c0e0:	00800404 	movi	r2,16
    c0e4:	003f4c06 	br	be18 <_gp+0xfffefcbc>
    c0e8:	3dce983a 	sll	r7,r7,r23
    c0ec:	30b8d83a 	srl	fp,r6,r2
    c0f0:	80a2d83a 	srl	r17,r16,r2
    c0f4:	35cc983a 	sll	r6,r6,r23
    c0f8:	3f38b03a 	or	fp,r7,fp
    c0fc:	e024d43a 	srli	r18,fp,16
    c100:	9884d83a 	srl	r2,r19,r2
    c104:	85e0983a 	sll	r16,r16,r23
    c108:	8809883a 	mov	r4,r17
    c10c:	900b883a 	mov	r5,r18
    c110:	d9800015 	stw	r6,0(sp)
    c114:	1420b03a 	or	r16,r2,r16
    c118:	000cad80 	call	cad8 <__umodsi3>
    c11c:	900b883a 	mov	r5,r18
    c120:	8809883a 	mov	r4,r17
    c124:	1029883a 	mov	r20,r2
    c128:	e5bfffcc 	andi	r22,fp,65535
    c12c:	000ca740 	call	ca74 <__udivsi3>
    c130:	100b883a 	mov	r5,r2
    c134:	b009883a 	mov	r4,r22
    c138:	102b883a 	mov	r21,r2
    c13c:	000cb300 	call	cb30 <__mulsi3>
    c140:	a028943a 	slli	r20,r20,16
    c144:	8006d43a 	srli	r3,r16,16
    c148:	1d06b03a 	or	r3,r3,r20
    c14c:	1880042e 	bgeu	r3,r2,c160 <__udivdi3+0x3a4>
    c150:	1f07883a 	add	r3,r3,fp
    c154:	a93fffc4 	addi	r4,r21,-1
    c158:	1f00892e 	bgeu	r3,fp,c380 <__udivdi3+0x5c4>
    c15c:	202b883a 	mov	r21,r4
    c160:	18a3c83a 	sub	r17,r3,r2
    c164:	8809883a 	mov	r4,r17
    c168:	900b883a 	mov	r5,r18
    c16c:	000cad80 	call	cad8 <__umodsi3>
    c170:	1029883a 	mov	r20,r2
    c174:	8809883a 	mov	r4,r17
    c178:	900b883a 	mov	r5,r18
    c17c:	a028943a 	slli	r20,r20,16
    c180:	000ca740 	call	ca74 <__udivsi3>
    c184:	100b883a 	mov	r5,r2
    c188:	b009883a 	mov	r4,r22
    c18c:	843fffcc 	andi	r16,r16,65535
    c190:	1023883a 	mov	r17,r2
    c194:	8520b03a 	or	r16,r16,r20
    c198:	000cb300 	call	cb30 <__mulsi3>
    c19c:	8080042e 	bgeu	r16,r2,c1b0 <__udivdi3+0x3f4>
    c1a0:	8721883a 	add	r16,r16,fp
    c1a4:	88ffffc4 	addi	r3,r17,-1
    c1a8:	8700712e 	bgeu	r16,fp,c370 <__udivdi3+0x5b4>
    c1ac:	1823883a 	mov	r17,r3
    c1b0:	a80e943a 	slli	r7,r21,16
    c1b4:	d8c00017 	ldw	r3,0(sp)
    c1b8:	80a1c83a 	sub	r16,r16,r2
    c1bc:	3c64b03a 	or	r18,r7,r17
    c1c0:	1d3fffcc 	andi	r20,r3,65535
    c1c4:	9022d43a 	srli	r17,r18,16
    c1c8:	95bfffcc 	andi	r22,r18,65535
    c1cc:	a00b883a 	mov	r5,r20
    c1d0:	b009883a 	mov	r4,r22
    c1d4:	182ad43a 	srli	r21,r3,16
    c1d8:	000cb300 	call	cb30 <__mulsi3>
    c1dc:	a00b883a 	mov	r5,r20
    c1e0:	8809883a 	mov	r4,r17
    c1e4:	1039883a 	mov	fp,r2
    c1e8:	000cb300 	call	cb30 <__mulsi3>
    c1ec:	8809883a 	mov	r4,r17
    c1f0:	a80b883a 	mov	r5,r21
    c1f4:	1029883a 	mov	r20,r2
    c1f8:	000cb300 	call	cb30 <__mulsi3>
    c1fc:	a80b883a 	mov	r5,r21
    c200:	b009883a 	mov	r4,r22
    c204:	1023883a 	mov	r17,r2
    c208:	000cb300 	call	cb30 <__mulsi3>
    c20c:	e006d43a 	srli	r3,fp,16
    c210:	1505883a 	add	r2,r2,r20
    c214:	1887883a 	add	r3,r3,r2
    c218:	1d00022e 	bgeu	r3,r20,c224 <__udivdi3+0x468>
    c21c:	00800074 	movhi	r2,1
    c220:	88a3883a 	add	r17,r17,r2
    c224:	1804d43a 	srli	r2,r3,16
    c228:	1463883a 	add	r17,r2,r17
    c22c:	84404436 	bltu	r16,r17,c340 <__udivdi3+0x584>
    c230:	84403e26 	beq	r16,r17,c32c <__udivdi3+0x570>
    c234:	9005883a 	mov	r2,r18
    c238:	0007883a 	mov	r3,zero
    c23c:	003f9106 	br	c084 <_gp+0xfffeff28>
    c240:	88e2983a 	sll	r17,r17,r3
    c244:	80aed83a 	srl	r23,r16,r2
    c248:	80e0983a 	sll	r16,r16,r3
    c24c:	882ad43a 	srli	r21,r17,16
    c250:	9884d83a 	srl	r2,r19,r2
    c254:	b809883a 	mov	r4,r23
    c258:	a80b883a 	mov	r5,r21
    c25c:	98e4983a 	sll	r18,r19,r3
    c260:	142cb03a 	or	r22,r2,r16
    c264:	000cad80 	call	cad8 <__umodsi3>
    c268:	b809883a 	mov	r4,r23
    c26c:	a80b883a 	mov	r5,r21
    c270:	1027883a 	mov	r19,r2
    c274:	8d3fffcc 	andi	r20,r17,65535
    c278:	000ca740 	call	ca74 <__udivsi3>
    c27c:	a009883a 	mov	r4,r20
    c280:	100b883a 	mov	r5,r2
    c284:	102f883a 	mov	r23,r2
    c288:	000cb300 	call	cb30 <__mulsi3>
    c28c:	9826943a 	slli	r19,r19,16
    c290:	b008d43a 	srli	r4,r22,16
    c294:	24c8b03a 	or	r4,r4,r19
    c298:	2080062e 	bgeu	r4,r2,c2b4 <__udivdi3+0x4f8>
    c29c:	2449883a 	add	r4,r4,r17
    c2a0:	b8ffffc4 	addi	r3,r23,-1
    c2a4:	24403c36 	bltu	r4,r17,c398 <__udivdi3+0x5dc>
    c2a8:	20803b2e 	bgeu	r4,r2,c398 <__udivdi3+0x5dc>
    c2ac:	bdffff84 	addi	r23,r23,-2
    c2b0:	2449883a 	add	r4,r4,r17
    c2b4:	20a1c83a 	sub	r16,r4,r2
    c2b8:	a80b883a 	mov	r5,r21
    c2bc:	8009883a 	mov	r4,r16
    c2c0:	000cad80 	call	cad8 <__umodsi3>
    c2c4:	a80b883a 	mov	r5,r21
    c2c8:	8009883a 	mov	r4,r16
    c2cc:	1027883a 	mov	r19,r2
    c2d0:	000ca740 	call	ca74 <__udivsi3>
    c2d4:	a009883a 	mov	r4,r20
    c2d8:	100b883a 	mov	r5,r2
    c2dc:	9826943a 	slli	r19,r19,16
    c2e0:	1039883a 	mov	fp,r2
    c2e4:	000cb300 	call	cb30 <__mulsi3>
    c2e8:	b13fffcc 	andi	r4,r22,65535
    c2ec:	24c8b03a 	or	r4,r4,r19
    c2f0:	2080062e 	bgeu	r4,r2,c30c <__udivdi3+0x550>
    c2f4:	2449883a 	add	r4,r4,r17
    c2f8:	e0ffffc4 	addi	r3,fp,-1
    c2fc:	24402436 	bltu	r4,r17,c390 <__udivdi3+0x5d4>
    c300:	2080232e 	bgeu	r4,r2,c390 <__udivdi3+0x5d4>
    c304:	e73fff84 	addi	fp,fp,-2
    c308:	2449883a 	add	r4,r4,r17
    c30c:	b82e943a 	slli	r23,r23,16
    c310:	20a1c83a 	sub	r16,r4,r2
    c314:	bf06b03a 	or	r3,r23,fp
    c318:	003f2806 	br	bfbc <_gp+0xfffefe60>
    c31c:	2021883a 	mov	r16,r4
    c320:	003f5306 	br	c070 <_gp+0xfffeff14>
    c324:	1821883a 	mov	r16,r3
    c328:	003ef406 	br	befc <_gp+0xfffefda0>
    c32c:	1806943a 	slli	r3,r3,16
    c330:	9de6983a 	sll	r19,r19,r23
    c334:	e73fffcc 	andi	fp,fp,65535
    c338:	1f07883a 	add	r3,r3,fp
    c33c:	98ffbd2e 	bgeu	r19,r3,c234 <_gp+0xffff00d8>
    c340:	90bfffc4 	addi	r2,r18,-1
    c344:	0007883a 	mov	r3,zero
    c348:	003f4e06 	br	c084 <_gp+0xfffeff28>
    c34c:	00800604 	movi	r2,24
    c350:	003ef506 	br	bf28 <_gp+0xfffefdcc>
    c354:	00800604 	movi	r2,24
    c358:	003f0b06 	br	bf88 <_gp+0xfffefe2c>
    c35c:	00800604 	movi	r2,24
    c360:	003ead06 	br	be18 <_gp+0xfffefcbc>
    c364:	0007883a 	mov	r3,zero
    c368:	00800044 	movi	r2,1
    c36c:	003f4506 	br	c084 <_gp+0xfffeff28>
    c370:	80bf8e2e 	bgeu	r16,r2,c1ac <_gp+0xffff0050>
    c374:	8c7fff84 	addi	r17,r17,-2
    c378:	8721883a 	add	r16,r16,fp
    c37c:	003f8c06 	br	c1b0 <_gp+0xffff0054>
    c380:	18bf762e 	bgeu	r3,r2,c15c <_gp+0xffff0000>
    c384:	ad7fff84 	addi	r21,r21,-2
    c388:	1f07883a 	add	r3,r3,fp
    c38c:	003f7406 	br	c160 <_gp+0xffff0004>
    c390:	1839883a 	mov	fp,r3
    c394:	003fdd06 	br	c30c <_gp+0xffff01b0>
    c398:	182f883a 	mov	r23,r3
    c39c:	003fc506 	br	c2b4 <_gp+0xffff0158>
    c3a0:	b5bfff84 	addi	r22,r22,-2
    c3a4:	3c4f883a 	add	r7,r7,r17
    c3a8:	003f1a06 	br	c014 <_gp+0xfffefeb8>
    c3ac:	b5bfff84 	addi	r22,r22,-2
    c3b0:	1c47883a 	add	r3,r3,r17
    c3b4:	003ebc06 	br	bea8 <_gp+0xfffefd4c>

0000c3b8 <__umoddi3>:
    c3b8:	defff304 	addi	sp,sp,-52
    c3bc:	df000b15 	stw	fp,44(sp)
    c3c0:	dc400415 	stw	r17,16(sp)
    c3c4:	dc000315 	stw	r16,12(sp)
    c3c8:	dfc00c15 	stw	ra,48(sp)
    c3cc:	ddc00a15 	stw	r23,40(sp)
    c3d0:	dd800915 	stw	r22,36(sp)
    c3d4:	dd400815 	stw	r21,32(sp)
    c3d8:	dd000715 	stw	r20,28(sp)
    c3dc:	dcc00615 	stw	r19,24(sp)
    c3e0:	dc800515 	stw	r18,20(sp)
    c3e4:	2021883a 	mov	r16,r4
    c3e8:	2823883a 	mov	r17,r5
    c3ec:	2839883a 	mov	fp,r5
    c3f0:	3800401e 	bne	r7,zero,c4f4 <__umoddi3+0x13c>
    c3f4:	3027883a 	mov	r19,r6
    c3f8:	2029883a 	mov	r20,r4
    c3fc:	2980552e 	bgeu	r5,r6,c554 <__umoddi3+0x19c>
    c400:	00bfffd4 	movui	r2,65535
    c404:	1180a236 	bltu	r2,r6,c690 <__umoddi3+0x2d8>
    c408:	01003fc4 	movi	r4,255
    c40c:	2189803a 	cmpltu	r4,r4,r6
    c410:	200890fa 	slli	r4,r4,3
    c414:	3104d83a 	srl	r2,r6,r4
    c418:	00c00074 	movhi	r3,1
    c41c:	18c95f04 	addi	r3,r3,9596
    c420:	1885883a 	add	r2,r3,r2
    c424:	10c00003 	ldbu	r3,0(r2)
    c428:	00800804 	movi	r2,32
    c42c:	1909883a 	add	r4,r3,r4
    c430:	1125c83a 	sub	r18,r2,r4
    c434:	90000526 	beq	r18,zero,c44c <__umoddi3+0x94>
    c438:	8ca2983a 	sll	r17,r17,r18
    c43c:	8108d83a 	srl	r4,r16,r4
    c440:	34a6983a 	sll	r19,r6,r18
    c444:	84a8983a 	sll	r20,r16,r18
    c448:	2478b03a 	or	fp,r4,r17
    c44c:	982cd43a 	srli	r22,r19,16
    c450:	e009883a 	mov	r4,fp
    c454:	9dffffcc 	andi	r23,r19,65535
    c458:	b00b883a 	mov	r5,r22
    c45c:	000cad80 	call	cad8 <__umodsi3>
    c460:	b00b883a 	mov	r5,r22
    c464:	e009883a 	mov	r4,fp
    c468:	102b883a 	mov	r21,r2
    c46c:	000ca740 	call	ca74 <__udivsi3>
    c470:	100b883a 	mov	r5,r2
    c474:	b809883a 	mov	r4,r23
    c478:	000cb300 	call	cb30 <__mulsi3>
    c47c:	a82a943a 	slli	r21,r21,16
    c480:	a006d43a 	srli	r3,r20,16
    c484:	1d46b03a 	or	r3,r3,r21
    c488:	1880032e 	bgeu	r3,r2,c498 <__umoddi3+0xe0>
    c48c:	1cc7883a 	add	r3,r3,r19
    c490:	1cc00136 	bltu	r3,r19,c498 <__umoddi3+0xe0>
    c494:	18813136 	bltu	r3,r2,c95c <__umoddi3+0x5a4>
    c498:	18a1c83a 	sub	r16,r3,r2
    c49c:	b00b883a 	mov	r5,r22
    c4a0:	8009883a 	mov	r4,r16
    c4a4:	000cad80 	call	cad8 <__umodsi3>
    c4a8:	b00b883a 	mov	r5,r22
    c4ac:	8009883a 	mov	r4,r16
    c4b0:	1023883a 	mov	r17,r2
    c4b4:	000ca740 	call	ca74 <__udivsi3>
    c4b8:	100b883a 	mov	r5,r2
    c4bc:	b809883a 	mov	r4,r23
    c4c0:	8822943a 	slli	r17,r17,16
    c4c4:	000cb300 	call	cb30 <__mulsi3>
    c4c8:	a0ffffcc 	andi	r3,r20,65535
    c4cc:	1c46b03a 	or	r3,r3,r17
    c4d0:	1880042e 	bgeu	r3,r2,c4e4 <__umoddi3+0x12c>
    c4d4:	1cc7883a 	add	r3,r3,r19
    c4d8:	1cc00236 	bltu	r3,r19,c4e4 <__umoddi3+0x12c>
    c4dc:	1880012e 	bgeu	r3,r2,c4e4 <__umoddi3+0x12c>
    c4e0:	1cc7883a 	add	r3,r3,r19
    c4e4:	1885c83a 	sub	r2,r3,r2
    c4e8:	1484d83a 	srl	r2,r2,r18
    c4ec:	0007883a 	mov	r3,zero
    c4f0:	00005306 	br	c640 <__umoddi3+0x288>
    c4f4:	29c05036 	bltu	r5,r7,c638 <__umoddi3+0x280>
    c4f8:	00bfffd4 	movui	r2,65535
    c4fc:	11c05c2e 	bgeu	r2,r7,c670 <__umoddi3+0x2b8>
    c500:	00804034 	movhi	r2,256
    c504:	10bfffc4 	addi	r2,r2,-1
    c508:	11c10636 	bltu	r2,r7,c924 <__umoddi3+0x56c>
    c50c:	01000404 	movi	r4,16
    c510:	3904d83a 	srl	r2,r7,r4
    c514:	00c00074 	movhi	r3,1
    c518:	18c95f04 	addi	r3,r3,9596
    c51c:	1885883a 	add	r2,r3,r2
    c520:	14c00003 	ldbu	r19,0(r2)
    c524:	00c00804 	movi	r3,32
    c528:	9927883a 	add	r19,r19,r4
    c52c:	1ce9c83a 	sub	r20,r3,r19
    c530:	a0005c1e 	bne	r20,zero,c6a4 <__umoddi3+0x2ec>
    c534:	3c400136 	bltu	r7,r17,c53c <__umoddi3+0x184>
    c538:	81810a36 	bltu	r16,r6,c964 <__umoddi3+0x5ac>
    c53c:	8185c83a 	sub	r2,r16,r6
    c540:	89e3c83a 	sub	r17,r17,r7
    c544:	8089803a 	cmpltu	r4,r16,r2
    c548:	8939c83a 	sub	fp,r17,r4
    c54c:	e007883a 	mov	r3,fp
    c550:	00003b06 	br	c640 <__umoddi3+0x288>
    c554:	3000041e 	bne	r6,zero,c568 <__umoddi3+0x1b0>
    c558:	000b883a 	mov	r5,zero
    c55c:	01000044 	movi	r4,1
    c560:	000ca740 	call	ca74 <__udivsi3>
    c564:	1027883a 	mov	r19,r2
    c568:	00bfffd4 	movui	r2,65535
    c56c:	14c0442e 	bgeu	r2,r19,c680 <__umoddi3+0x2c8>
    c570:	00804034 	movhi	r2,256
    c574:	10bfffc4 	addi	r2,r2,-1
    c578:	14c0ec36 	bltu	r2,r19,c92c <__umoddi3+0x574>
    c57c:	00800404 	movi	r2,16
    c580:	9886d83a 	srl	r3,r19,r2
    c584:	01000074 	movhi	r4,1
    c588:	21095f04 	addi	r4,r4,9596
    c58c:	20c7883a 	add	r3,r4,r3
    c590:	18c00003 	ldbu	r3,0(r3)
    c594:	1887883a 	add	r3,r3,r2
    c598:	00800804 	movi	r2,32
    c59c:	10e5c83a 	sub	r18,r2,r3
    c5a0:	9000ab1e 	bne	r18,zero,c850 <__umoddi3+0x498>
    c5a4:	982cd43a 	srli	r22,r19,16
    c5a8:	8ce3c83a 	sub	r17,r17,r19
    c5ac:	9dffffcc 	andi	r23,r19,65535
    c5b0:	b00b883a 	mov	r5,r22
    c5b4:	8809883a 	mov	r4,r17
    c5b8:	000cad80 	call	cad8 <__umodsi3>
    c5bc:	b00b883a 	mov	r5,r22
    c5c0:	8809883a 	mov	r4,r17
    c5c4:	102b883a 	mov	r21,r2
    c5c8:	000ca740 	call	ca74 <__udivsi3>
    c5cc:	b80b883a 	mov	r5,r23
    c5d0:	1009883a 	mov	r4,r2
    c5d4:	000cb300 	call	cb30 <__mulsi3>
    c5d8:	a82a943a 	slli	r21,r21,16
    c5dc:	a006d43a 	srli	r3,r20,16
    c5e0:	1d46b03a 	or	r3,r3,r21
    c5e4:	1880042e 	bgeu	r3,r2,c5f8 <__umoddi3+0x240>
    c5e8:	1cc7883a 	add	r3,r3,r19
    c5ec:	1cc00236 	bltu	r3,r19,c5f8 <__umoddi3+0x240>
    c5f0:	1880012e 	bgeu	r3,r2,c5f8 <__umoddi3+0x240>
    c5f4:	1cc7883a 	add	r3,r3,r19
    c5f8:	18a1c83a 	sub	r16,r3,r2
    c5fc:	b00b883a 	mov	r5,r22
    c600:	8009883a 	mov	r4,r16
    c604:	000cad80 	call	cad8 <__umodsi3>
    c608:	1023883a 	mov	r17,r2
    c60c:	b00b883a 	mov	r5,r22
    c610:	8009883a 	mov	r4,r16
    c614:	000ca740 	call	ca74 <__udivsi3>
    c618:	8822943a 	slli	r17,r17,16
    c61c:	b80b883a 	mov	r5,r23
    c620:	1009883a 	mov	r4,r2
    c624:	000cb300 	call	cb30 <__mulsi3>
    c628:	a53fffcc 	andi	r20,r20,65535
    c62c:	a446b03a 	or	r3,r20,r17
    c630:	18bfac2e 	bgeu	r3,r2,c4e4 <_gp+0xffff0388>
    c634:	003fa706 	br	c4d4 <_gp+0xffff0378>
    c638:	2005883a 	mov	r2,r4
    c63c:	2807883a 	mov	r3,r5
    c640:	dfc00c17 	ldw	ra,48(sp)
    c644:	df000b17 	ldw	fp,44(sp)
    c648:	ddc00a17 	ldw	r23,40(sp)
    c64c:	dd800917 	ldw	r22,36(sp)
    c650:	dd400817 	ldw	r21,32(sp)
    c654:	dd000717 	ldw	r20,28(sp)
    c658:	dcc00617 	ldw	r19,24(sp)
    c65c:	dc800517 	ldw	r18,20(sp)
    c660:	dc400417 	ldw	r17,16(sp)
    c664:	dc000317 	ldw	r16,12(sp)
    c668:	dec00d04 	addi	sp,sp,52
    c66c:	f800283a 	ret
    c670:	04c03fc4 	movi	r19,255
    c674:	99c9803a 	cmpltu	r4,r19,r7
    c678:	200890fa 	slli	r4,r4,3
    c67c:	003fa406 	br	c510 <_gp+0xffff03b4>
    c680:	00803fc4 	movi	r2,255
    c684:	14c5803a 	cmpltu	r2,r2,r19
    c688:	100490fa 	slli	r2,r2,3
    c68c:	003fbc06 	br	c580 <_gp+0xffff0424>
    c690:	00804034 	movhi	r2,256
    c694:	10bfffc4 	addi	r2,r2,-1
    c698:	1180a636 	bltu	r2,r6,c934 <__umoddi3+0x57c>
    c69c:	01000404 	movi	r4,16
    c6a0:	003f5c06 	br	c414 <_gp+0xffff02b8>
    c6a4:	3d0e983a 	sll	r7,r7,r20
    c6a8:	34ead83a 	srl	r21,r6,r19
    c6ac:	8cc6d83a 	srl	r3,r17,r19
    c6b0:	8d10983a 	sll	r8,r17,r20
    c6b4:	3d6ab03a 	or	r21,r7,r21
    c6b8:	a82cd43a 	srli	r22,r21,16
    c6bc:	84e2d83a 	srl	r17,r16,r19
    c6c0:	1809883a 	mov	r4,r3
    c6c4:	b00b883a 	mov	r5,r22
    c6c8:	8a22b03a 	or	r17,r17,r8
    c6cc:	3524983a 	sll	r18,r6,r20
    c6d0:	dc400015 	stw	r17,0(sp)
    c6d4:	d8c00115 	stw	r3,4(sp)
    c6d8:	000cad80 	call	cad8 <__umodsi3>
    c6dc:	d8c00117 	ldw	r3,4(sp)
    c6e0:	b00b883a 	mov	r5,r22
    c6e4:	1039883a 	mov	fp,r2
    c6e8:	1809883a 	mov	r4,r3
    c6ec:	000ca740 	call	ca74 <__udivsi3>
    c6f0:	adffffcc 	andi	r23,r21,65535
    c6f4:	100b883a 	mov	r5,r2
    c6f8:	b809883a 	mov	r4,r23
    c6fc:	1023883a 	mov	r17,r2
    c700:	000cb300 	call	cb30 <__mulsi3>
    c704:	d9400017 	ldw	r5,0(sp)
    c708:	e008943a 	slli	r4,fp,16
    c70c:	8520983a 	sll	r16,r16,r20
    c710:	2806d43a 	srli	r3,r5,16
    c714:	1906b03a 	or	r3,r3,r4
    c718:	1880042e 	bgeu	r3,r2,c72c <__umoddi3+0x374>
    c71c:	1d47883a 	add	r3,r3,r21
    c720:	893fffc4 	addi	r4,r17,-1
    c724:	1d40892e 	bgeu	r3,r21,c94c <__umoddi3+0x594>
    c728:	2023883a 	mov	r17,r4
    c72c:	18b9c83a 	sub	fp,r3,r2
    c730:	b00b883a 	mov	r5,r22
    c734:	e009883a 	mov	r4,fp
    c738:	000cad80 	call	cad8 <__umodsi3>
    c73c:	b00b883a 	mov	r5,r22
    c740:	e009883a 	mov	r4,fp
    c744:	d8800215 	stw	r2,8(sp)
    c748:	000ca740 	call	ca74 <__udivsi3>
    c74c:	100b883a 	mov	r5,r2
    c750:	b809883a 	mov	r4,r23
    c754:	102d883a 	mov	r22,r2
    c758:	000cb300 	call	cb30 <__mulsi3>
    c75c:	d9800217 	ldw	r6,8(sp)
    c760:	d8c00017 	ldw	r3,0(sp)
    c764:	300c943a 	slli	r6,r6,16
    c768:	1a3fffcc 	andi	r8,r3,65535
    c76c:	4190b03a 	or	r8,r8,r6
    c770:	4080042e 	bgeu	r8,r2,c784 <__umoddi3+0x3cc>
    c774:	4551883a 	add	r8,r8,r21
    c778:	b0ffffc4 	addi	r3,r22,-1
    c77c:	45406f2e 	bgeu	r8,r21,c93c <__umoddi3+0x584>
    c780:	182d883a 	mov	r22,r3
    c784:	880e943a 	slli	r7,r17,16
    c788:	9006d43a 	srli	r3,r18,16
    c78c:	91bfffcc 	andi	r6,r18,65535
    c790:	3dacb03a 	or	r22,r7,r22
    c794:	b02ed43a 	srli	r23,r22,16
    c798:	b5bfffcc 	andi	r22,r22,65535
    c79c:	300b883a 	mov	r5,r6
    c7a0:	b009883a 	mov	r4,r22
    c7a4:	40a3c83a 	sub	r17,r8,r2
    c7a8:	d8c00115 	stw	r3,4(sp)
    c7ac:	d9800215 	stw	r6,8(sp)
    c7b0:	000cb300 	call	cb30 <__mulsi3>
    c7b4:	d9800217 	ldw	r6,8(sp)
    c7b8:	b809883a 	mov	r4,r23
    c7bc:	1039883a 	mov	fp,r2
    c7c0:	300b883a 	mov	r5,r6
    c7c4:	000cb300 	call	cb30 <__mulsi3>
    c7c8:	d8c00117 	ldw	r3,4(sp)
    c7cc:	b809883a 	mov	r4,r23
    c7d0:	d8800215 	stw	r2,8(sp)
    c7d4:	180b883a 	mov	r5,r3
    c7d8:	000cb300 	call	cb30 <__mulsi3>
    c7dc:	d8c00117 	ldw	r3,4(sp)
    c7e0:	b009883a 	mov	r4,r22
    c7e4:	102f883a 	mov	r23,r2
    c7e8:	180b883a 	mov	r5,r3
    c7ec:	000cb300 	call	cb30 <__mulsi3>
    c7f0:	d9800217 	ldw	r6,8(sp)
    c7f4:	e006d43a 	srli	r3,fp,16
    c7f8:	1185883a 	add	r2,r2,r6
    c7fc:	1885883a 	add	r2,r3,r2
    c800:	1180022e 	bgeu	r2,r6,c80c <__umoddi3+0x454>
    c804:	00c00074 	movhi	r3,1
    c808:	b8ef883a 	add	r23,r23,r3
    c80c:	1006d43a 	srli	r3,r2,16
    c810:	1004943a 	slli	r2,r2,16
    c814:	e73fffcc 	andi	fp,fp,65535
    c818:	1dc7883a 	add	r3,r3,r23
    c81c:	1739883a 	add	fp,r2,fp
    c820:	88c03a36 	bltu	r17,r3,c90c <__umoddi3+0x554>
    c824:	88c05126 	beq	r17,r3,c96c <__umoddi3+0x5b4>
    c828:	88c9c83a 	sub	r4,r17,r3
    c82c:	e00f883a 	mov	r7,fp
    c830:	81cfc83a 	sub	r7,r16,r7
    c834:	81c7803a 	cmpltu	r3,r16,r7
    c838:	20c7c83a 	sub	r3,r4,r3
    c83c:	1cc4983a 	sll	r2,r3,r19
    c840:	3d0ed83a 	srl	r7,r7,r20
    c844:	1d06d83a 	srl	r3,r3,r20
    c848:	11c4b03a 	or	r2,r2,r7
    c84c:	003f7c06 	br	c640 <_gp+0xffff04e4>
    c850:	9ca6983a 	sll	r19,r19,r18
    c854:	88f8d83a 	srl	fp,r17,r3
    c858:	80c4d83a 	srl	r2,r16,r3
    c85c:	982cd43a 	srli	r22,r19,16
    c860:	8ca2983a 	sll	r17,r17,r18
    c864:	e009883a 	mov	r4,fp
    c868:	b00b883a 	mov	r5,r22
    c86c:	146ab03a 	or	r21,r2,r17
    c870:	000cad80 	call	cad8 <__umodsi3>
    c874:	b00b883a 	mov	r5,r22
    c878:	e009883a 	mov	r4,fp
    c87c:	1029883a 	mov	r20,r2
    c880:	9dffffcc 	andi	r23,r19,65535
    c884:	000ca740 	call	ca74 <__udivsi3>
    c888:	b809883a 	mov	r4,r23
    c88c:	100b883a 	mov	r5,r2
    c890:	000cb300 	call	cb30 <__mulsi3>
    c894:	a008943a 	slli	r4,r20,16
    c898:	a806d43a 	srli	r3,r21,16
    c89c:	84a8983a 	sll	r20,r16,r18
    c8a0:	1906b03a 	or	r3,r3,r4
    c8a4:	1880042e 	bgeu	r3,r2,c8b8 <__umoddi3+0x500>
    c8a8:	1cc7883a 	add	r3,r3,r19
    c8ac:	1cc00236 	bltu	r3,r19,c8b8 <__umoddi3+0x500>
    c8b0:	1880012e 	bgeu	r3,r2,c8b8 <__umoddi3+0x500>
    c8b4:	1cc7883a 	add	r3,r3,r19
    c8b8:	18a3c83a 	sub	r17,r3,r2
    c8bc:	b00b883a 	mov	r5,r22
    c8c0:	8809883a 	mov	r4,r17
    c8c4:	000cad80 	call	cad8 <__umodsi3>
    c8c8:	b00b883a 	mov	r5,r22
    c8cc:	8809883a 	mov	r4,r17
    c8d0:	1021883a 	mov	r16,r2
    c8d4:	000ca740 	call	ca74 <__udivsi3>
    c8d8:	100b883a 	mov	r5,r2
    c8dc:	b809883a 	mov	r4,r23
    c8e0:	8020943a 	slli	r16,r16,16
    c8e4:	000cb300 	call	cb30 <__mulsi3>
    c8e8:	a8ffffcc 	andi	r3,r21,65535
    c8ec:	1c06b03a 	or	r3,r3,r16
    c8f0:	1880042e 	bgeu	r3,r2,c904 <__umoddi3+0x54c>
    c8f4:	1cc7883a 	add	r3,r3,r19
    c8f8:	1cc00236 	bltu	r3,r19,c904 <__umoddi3+0x54c>
    c8fc:	1880012e 	bgeu	r3,r2,c904 <__umoddi3+0x54c>
    c900:	1cc7883a 	add	r3,r3,r19
    c904:	18a3c83a 	sub	r17,r3,r2
    c908:	003f2906 	br	c5b0 <_gp+0xffff0454>
    c90c:	e48fc83a 	sub	r7,fp,r18
    c910:	1d49c83a 	sub	r4,r3,r21
    c914:	e1f9803a 	cmpltu	fp,fp,r7
    c918:	2739c83a 	sub	fp,r4,fp
    c91c:	8f09c83a 	sub	r4,r17,fp
    c920:	003fc306 	br	c830 <_gp+0xffff06d4>
    c924:	01000604 	movi	r4,24
    c928:	003ef906 	br	c510 <_gp+0xffff03b4>
    c92c:	00800604 	movi	r2,24
    c930:	003f1306 	br	c580 <_gp+0xffff0424>
    c934:	01000604 	movi	r4,24
    c938:	003eb606 	br	c414 <_gp+0xffff02b8>
    c93c:	40bf902e 	bgeu	r8,r2,c780 <_gp+0xffff0624>
    c940:	b5bfff84 	addi	r22,r22,-2
    c944:	4551883a 	add	r8,r8,r21
    c948:	003f8e06 	br	c784 <_gp+0xffff0628>
    c94c:	18bf762e 	bgeu	r3,r2,c728 <_gp+0xffff05cc>
    c950:	8c7fff84 	addi	r17,r17,-2
    c954:	1d47883a 	add	r3,r3,r21
    c958:	003f7406 	br	c72c <_gp+0xffff05d0>
    c95c:	1cc7883a 	add	r3,r3,r19
    c960:	003ecd06 	br	c498 <_gp+0xffff033c>
    c964:	8005883a 	mov	r2,r16
    c968:	003ef806 	br	c54c <_gp+0xffff03f0>
    c96c:	873fe736 	bltu	r16,fp,c90c <_gp+0xffff07b0>
    c970:	e00f883a 	mov	r7,fp
    c974:	0009883a 	mov	r4,zero
    c978:	003fad06 	br	c830 <_gp+0xffff06d4>

0000c97c <__divsi3>:
    c97c:	20001b16 	blt	r4,zero,c9ec <__divsi3+0x70>
    c980:	000f883a 	mov	r7,zero
    c984:	28001616 	blt	r5,zero,c9e0 <__divsi3+0x64>
    c988:	200d883a 	mov	r6,r4
    c98c:	29001a2e 	bgeu	r5,r4,c9f8 <__divsi3+0x7c>
    c990:	00800804 	movi	r2,32
    c994:	00c00044 	movi	r3,1
    c998:	00000106 	br	c9a0 <__divsi3+0x24>
    c99c:	10000d26 	beq	r2,zero,c9d4 <__divsi3+0x58>
    c9a0:	294b883a 	add	r5,r5,r5
    c9a4:	10bfffc4 	addi	r2,r2,-1
    c9a8:	18c7883a 	add	r3,r3,r3
    c9ac:	293ffb36 	bltu	r5,r4,c99c <_gp+0xffff0840>
    c9b0:	0005883a 	mov	r2,zero
    c9b4:	18000726 	beq	r3,zero,c9d4 <__divsi3+0x58>
    c9b8:	0005883a 	mov	r2,zero
    c9bc:	31400236 	bltu	r6,r5,c9c8 <__divsi3+0x4c>
    c9c0:	314dc83a 	sub	r6,r6,r5
    c9c4:	10c4b03a 	or	r2,r2,r3
    c9c8:	1806d07a 	srli	r3,r3,1
    c9cc:	280ad07a 	srli	r5,r5,1
    c9d0:	183ffa1e 	bne	r3,zero,c9bc <_gp+0xffff0860>
    c9d4:	38000126 	beq	r7,zero,c9dc <__divsi3+0x60>
    c9d8:	0085c83a 	sub	r2,zero,r2
    c9dc:	f800283a 	ret
    c9e0:	014bc83a 	sub	r5,zero,r5
    c9e4:	39c0005c 	xori	r7,r7,1
    c9e8:	003fe706 	br	c988 <_gp+0xffff082c>
    c9ec:	0109c83a 	sub	r4,zero,r4
    c9f0:	01c00044 	movi	r7,1
    c9f4:	003fe306 	br	c984 <_gp+0xffff0828>
    c9f8:	00c00044 	movi	r3,1
    c9fc:	003fee06 	br	c9b8 <_gp+0xffff085c>

0000ca00 <__modsi3>:
    ca00:	20001716 	blt	r4,zero,ca60 <__modsi3+0x60>
    ca04:	000f883a 	mov	r7,zero
    ca08:	2005883a 	mov	r2,r4
    ca0c:	28001216 	blt	r5,zero,ca58 <__modsi3+0x58>
    ca10:	2900162e 	bgeu	r5,r4,ca6c <__modsi3+0x6c>
    ca14:	01800804 	movi	r6,32
    ca18:	00c00044 	movi	r3,1
    ca1c:	00000106 	br	ca24 <__modsi3+0x24>
    ca20:	30000a26 	beq	r6,zero,ca4c <__modsi3+0x4c>
    ca24:	294b883a 	add	r5,r5,r5
    ca28:	31bfffc4 	addi	r6,r6,-1
    ca2c:	18c7883a 	add	r3,r3,r3
    ca30:	293ffb36 	bltu	r5,r4,ca20 <_gp+0xffff08c4>
    ca34:	18000526 	beq	r3,zero,ca4c <__modsi3+0x4c>
    ca38:	1806d07a 	srli	r3,r3,1
    ca3c:	11400136 	bltu	r2,r5,ca44 <__modsi3+0x44>
    ca40:	1145c83a 	sub	r2,r2,r5
    ca44:	280ad07a 	srli	r5,r5,1
    ca48:	183ffb1e 	bne	r3,zero,ca38 <_gp+0xffff08dc>
    ca4c:	38000126 	beq	r7,zero,ca54 <__modsi3+0x54>
    ca50:	0085c83a 	sub	r2,zero,r2
    ca54:	f800283a 	ret
    ca58:	014bc83a 	sub	r5,zero,r5
    ca5c:	003fec06 	br	ca10 <_gp+0xffff08b4>
    ca60:	0109c83a 	sub	r4,zero,r4
    ca64:	01c00044 	movi	r7,1
    ca68:	003fe706 	br	ca08 <_gp+0xffff08ac>
    ca6c:	00c00044 	movi	r3,1
    ca70:	003ff106 	br	ca38 <_gp+0xffff08dc>

0000ca74 <__udivsi3>:
    ca74:	200d883a 	mov	r6,r4
    ca78:	2900152e 	bgeu	r5,r4,cad0 <__udivsi3+0x5c>
    ca7c:	28001416 	blt	r5,zero,cad0 <__udivsi3+0x5c>
    ca80:	00800804 	movi	r2,32
    ca84:	00c00044 	movi	r3,1
    ca88:	00000206 	br	ca94 <__udivsi3+0x20>
    ca8c:	10000e26 	beq	r2,zero,cac8 <__udivsi3+0x54>
    ca90:	28000516 	blt	r5,zero,caa8 <__udivsi3+0x34>
    ca94:	294b883a 	add	r5,r5,r5
    ca98:	10bfffc4 	addi	r2,r2,-1
    ca9c:	18c7883a 	add	r3,r3,r3
    caa0:	293ffa36 	bltu	r5,r4,ca8c <_gp+0xffff0930>
    caa4:	18000826 	beq	r3,zero,cac8 <__udivsi3+0x54>
    caa8:	0005883a 	mov	r2,zero
    caac:	31400236 	bltu	r6,r5,cab8 <__udivsi3+0x44>
    cab0:	314dc83a 	sub	r6,r6,r5
    cab4:	10c4b03a 	or	r2,r2,r3
    cab8:	1806d07a 	srli	r3,r3,1
    cabc:	280ad07a 	srli	r5,r5,1
    cac0:	183ffa1e 	bne	r3,zero,caac <_gp+0xffff0950>
    cac4:	f800283a 	ret
    cac8:	0005883a 	mov	r2,zero
    cacc:	f800283a 	ret
    cad0:	00c00044 	movi	r3,1
    cad4:	003ff406 	br	caa8 <_gp+0xffff094c>

0000cad8 <__umodsi3>:
    cad8:	2005883a 	mov	r2,r4
    cadc:	2900122e 	bgeu	r5,r4,cb28 <__umodsi3+0x50>
    cae0:	28001116 	blt	r5,zero,cb28 <__umodsi3+0x50>
    cae4:	01800804 	movi	r6,32
    cae8:	00c00044 	movi	r3,1
    caec:	00000206 	br	caf8 <__umodsi3+0x20>
    caf0:	30000c26 	beq	r6,zero,cb24 <__umodsi3+0x4c>
    caf4:	28000516 	blt	r5,zero,cb0c <__umodsi3+0x34>
    caf8:	294b883a 	add	r5,r5,r5
    cafc:	31bfffc4 	addi	r6,r6,-1
    cb00:	18c7883a 	add	r3,r3,r3
    cb04:	293ffa36 	bltu	r5,r4,caf0 <_gp+0xffff0994>
    cb08:	18000626 	beq	r3,zero,cb24 <__umodsi3+0x4c>
    cb0c:	1806d07a 	srli	r3,r3,1
    cb10:	11400136 	bltu	r2,r5,cb18 <__umodsi3+0x40>
    cb14:	1145c83a 	sub	r2,r2,r5
    cb18:	280ad07a 	srli	r5,r5,1
    cb1c:	183ffb1e 	bne	r3,zero,cb0c <_gp+0xffff09b0>
    cb20:	f800283a 	ret
    cb24:	f800283a 	ret
    cb28:	00c00044 	movi	r3,1
    cb2c:	003ff706 	br	cb0c <_gp+0xffff09b0>

0000cb30 <__mulsi3>:
    cb30:	0005883a 	mov	r2,zero
    cb34:	20000726 	beq	r4,zero,cb54 <__mulsi3+0x24>
    cb38:	20c0004c 	andi	r3,r4,1
    cb3c:	2008d07a 	srli	r4,r4,1
    cb40:	18000126 	beq	r3,zero,cb48 <__mulsi3+0x18>
    cb44:	1145883a 	add	r2,r2,r5
    cb48:	294b883a 	add	r5,r5,r5
    cb4c:	203ffa1e 	bne	r4,zero,cb38 <_gp+0xffff09dc>
    cb50:	f800283a 	ret
    cb54:	f800283a 	ret

0000cb58 <__adddf3>:
    cb58:	02c00434 	movhi	r11,16
    cb5c:	5affffc4 	addi	r11,r11,-1
    cb60:	2806d7fa 	srli	r3,r5,31
    cb64:	2ad4703a 	and	r10,r5,r11
    cb68:	3ad2703a 	and	r9,r7,r11
    cb6c:	3804d53a 	srli	r2,r7,20
    cb70:	3018d77a 	srli	r12,r6,29
    cb74:	280ad53a 	srli	r5,r5,20
    cb78:	501490fa 	slli	r10,r10,3
    cb7c:	2010d77a 	srli	r8,r4,29
    cb80:	481290fa 	slli	r9,r9,3
    cb84:	380ed7fa 	srli	r7,r7,31
    cb88:	defffb04 	addi	sp,sp,-20
    cb8c:	dc800215 	stw	r18,8(sp)
    cb90:	dc400115 	stw	r17,4(sp)
    cb94:	dc000015 	stw	r16,0(sp)
    cb98:	dfc00415 	stw	ra,16(sp)
    cb9c:	dcc00315 	stw	r19,12(sp)
    cba0:	1c803fcc 	andi	r18,r3,255
    cba4:	2c01ffcc 	andi	r16,r5,2047
    cba8:	5210b03a 	or	r8,r10,r8
    cbac:	202290fa 	slli	r17,r4,3
    cbb0:	1081ffcc 	andi	r2,r2,2047
    cbb4:	4b12b03a 	or	r9,r9,r12
    cbb8:	300c90fa 	slli	r6,r6,3
    cbbc:	91c07526 	beq	r18,r7,cd94 <__adddf3+0x23c>
    cbc0:	8087c83a 	sub	r3,r16,r2
    cbc4:	00c0ab0e 	bge	zero,r3,ce74 <__adddf3+0x31c>
    cbc8:	10002a1e 	bne	r2,zero,cc74 <__adddf3+0x11c>
    cbcc:	4984b03a 	or	r2,r9,r6
    cbd0:	1000961e 	bne	r2,zero,ce2c <__adddf3+0x2d4>
    cbd4:	888001cc 	andi	r2,r17,7
    cbd8:	10000726 	beq	r2,zero,cbf8 <__adddf3+0xa0>
    cbdc:	888003cc 	andi	r2,r17,15
    cbe0:	00c00104 	movi	r3,4
    cbe4:	10c00426 	beq	r2,r3,cbf8 <__adddf3+0xa0>
    cbe8:	88c7883a 	add	r3,r17,r3
    cbec:	1c63803a 	cmpltu	r17,r3,r17
    cbf0:	4451883a 	add	r8,r8,r17
    cbf4:	1823883a 	mov	r17,r3
    cbf8:	4080202c 	andhi	r2,r8,128
    cbfc:	10005926 	beq	r2,zero,cd64 <__adddf3+0x20c>
    cc00:	84000044 	addi	r16,r16,1
    cc04:	0081ffc4 	movi	r2,2047
    cc08:	8080ba26 	beq	r16,r2,cef4 <__adddf3+0x39c>
    cc0c:	00bfe034 	movhi	r2,65408
    cc10:	10bfffc4 	addi	r2,r2,-1
    cc14:	4090703a 	and	r8,r8,r2
    cc18:	4004977a 	slli	r2,r8,29
    cc1c:	4010927a 	slli	r8,r8,9
    cc20:	8822d0fa 	srli	r17,r17,3
    cc24:	8401ffcc 	andi	r16,r16,2047
    cc28:	4010d33a 	srli	r8,r8,12
    cc2c:	9007883a 	mov	r3,r18
    cc30:	1444b03a 	or	r2,r2,r17
    cc34:	8401ffcc 	andi	r16,r16,2047
    cc38:	8020953a 	slli	r16,r16,20
    cc3c:	18c03fcc 	andi	r3,r3,255
    cc40:	01000434 	movhi	r4,16
    cc44:	213fffc4 	addi	r4,r4,-1
    cc48:	180697fa 	slli	r3,r3,31
    cc4c:	4110703a 	and	r8,r8,r4
    cc50:	4410b03a 	or	r8,r8,r16
    cc54:	40c6b03a 	or	r3,r8,r3
    cc58:	dfc00417 	ldw	ra,16(sp)
    cc5c:	dcc00317 	ldw	r19,12(sp)
    cc60:	dc800217 	ldw	r18,8(sp)
    cc64:	dc400117 	ldw	r17,4(sp)
    cc68:	dc000017 	ldw	r16,0(sp)
    cc6c:	dec00504 	addi	sp,sp,20
    cc70:	f800283a 	ret
    cc74:	0081ffc4 	movi	r2,2047
    cc78:	80bfd626 	beq	r16,r2,cbd4 <_gp+0xffff0a78>
    cc7c:	4a402034 	orhi	r9,r9,128
    cc80:	00800e04 	movi	r2,56
    cc84:	10c09f16 	blt	r2,r3,cf04 <__adddf3+0x3ac>
    cc88:	008007c4 	movi	r2,31
    cc8c:	10c0c216 	blt	r2,r3,cf98 <__adddf3+0x440>
    cc90:	00800804 	movi	r2,32
    cc94:	10c5c83a 	sub	r2,r2,r3
    cc98:	488a983a 	sll	r5,r9,r2
    cc9c:	30c8d83a 	srl	r4,r6,r3
    cca0:	3084983a 	sll	r2,r6,r2
    cca4:	48c6d83a 	srl	r3,r9,r3
    cca8:	290cb03a 	or	r6,r5,r4
    ccac:	1004c03a 	cmpne	r2,r2,zero
    ccb0:	308cb03a 	or	r6,r6,r2
    ccb4:	898dc83a 	sub	r6,r17,r6
    ccb8:	89a3803a 	cmpltu	r17,r17,r6
    ccbc:	40d1c83a 	sub	r8,r8,r3
    ccc0:	4451c83a 	sub	r8,r8,r17
    ccc4:	3023883a 	mov	r17,r6
    ccc8:	4080202c 	andhi	r2,r8,128
    cccc:	10002326 	beq	r2,zero,cd5c <__adddf3+0x204>
    ccd0:	04c02034 	movhi	r19,128
    ccd4:	9cffffc4 	addi	r19,r19,-1
    ccd8:	44e6703a 	and	r19,r8,r19
    ccdc:	98007626 	beq	r19,zero,ceb8 <__adddf3+0x360>
    cce0:	9809883a 	mov	r4,r19
    cce4:	000f3980 	call	f398 <__clzsi2>
    cce8:	10fffe04 	addi	r3,r2,-8
    ccec:	010007c4 	movi	r4,31
    ccf0:	20c07716 	blt	r4,r3,ced0 <__adddf3+0x378>
    ccf4:	00800804 	movi	r2,32
    ccf8:	10c5c83a 	sub	r2,r2,r3
    ccfc:	8884d83a 	srl	r2,r17,r2
    cd00:	98d0983a 	sll	r8,r19,r3
    cd04:	88e2983a 	sll	r17,r17,r3
    cd08:	1204b03a 	or	r2,r2,r8
    cd0c:	1c007416 	blt	r3,r16,cee0 <__adddf3+0x388>
    cd10:	1c21c83a 	sub	r16,r3,r16
    cd14:	82000044 	addi	r8,r16,1
    cd18:	00c007c4 	movi	r3,31
    cd1c:	1a009116 	blt	r3,r8,cf64 <__adddf3+0x40c>
    cd20:	00c00804 	movi	r3,32
    cd24:	1a07c83a 	sub	r3,r3,r8
    cd28:	8a08d83a 	srl	r4,r17,r8
    cd2c:	88e2983a 	sll	r17,r17,r3
    cd30:	10c6983a 	sll	r3,r2,r3
    cd34:	1210d83a 	srl	r8,r2,r8
    cd38:	8804c03a 	cmpne	r2,r17,zero
    cd3c:	1906b03a 	or	r3,r3,r4
    cd40:	18a2b03a 	or	r17,r3,r2
    cd44:	0021883a 	mov	r16,zero
    cd48:	003fa206 	br	cbd4 <_gp+0xffff0a78>
    cd4c:	1890b03a 	or	r8,r3,r2
    cd50:	40017d26 	beq	r8,zero,d348 <__adddf3+0x7f0>
    cd54:	1011883a 	mov	r8,r2
    cd58:	1823883a 	mov	r17,r3
    cd5c:	888001cc 	andi	r2,r17,7
    cd60:	103f9e1e 	bne	r2,zero,cbdc <_gp+0xffff0a80>
    cd64:	4004977a 	slli	r2,r8,29
    cd68:	8822d0fa 	srli	r17,r17,3
    cd6c:	4010d0fa 	srli	r8,r8,3
    cd70:	9007883a 	mov	r3,r18
    cd74:	1444b03a 	or	r2,r2,r17
    cd78:	0101ffc4 	movi	r4,2047
    cd7c:	81002426 	beq	r16,r4,ce10 <__adddf3+0x2b8>
    cd80:	8120703a 	and	r16,r16,r4
    cd84:	01000434 	movhi	r4,16
    cd88:	213fffc4 	addi	r4,r4,-1
    cd8c:	4110703a 	and	r8,r8,r4
    cd90:	003fa806 	br	cc34 <_gp+0xffff0ad8>
    cd94:	8089c83a 	sub	r4,r16,r2
    cd98:	01005e0e 	bge	zero,r4,cf14 <__adddf3+0x3bc>
    cd9c:	10002b26 	beq	r2,zero,ce4c <__adddf3+0x2f4>
    cda0:	0081ffc4 	movi	r2,2047
    cda4:	80bf8b26 	beq	r16,r2,cbd4 <_gp+0xffff0a78>
    cda8:	4a402034 	orhi	r9,r9,128
    cdac:	00800e04 	movi	r2,56
    cdb0:	1100a40e 	bge	r2,r4,d044 <__adddf3+0x4ec>
    cdb4:	498cb03a 	or	r6,r9,r6
    cdb8:	300ac03a 	cmpne	r5,r6,zero
    cdbc:	0013883a 	mov	r9,zero
    cdc0:	2c4b883a 	add	r5,r5,r17
    cdc4:	2c63803a 	cmpltu	r17,r5,r17
    cdc8:	4a11883a 	add	r8,r9,r8
    cdcc:	8a11883a 	add	r8,r17,r8
    cdd0:	2823883a 	mov	r17,r5
    cdd4:	4080202c 	andhi	r2,r8,128
    cdd8:	103fe026 	beq	r2,zero,cd5c <_gp+0xffff0c00>
    cddc:	84000044 	addi	r16,r16,1
    cde0:	0081ffc4 	movi	r2,2047
    cde4:	8080d226 	beq	r16,r2,d130 <__adddf3+0x5d8>
    cde8:	00bfe034 	movhi	r2,65408
    cdec:	10bfffc4 	addi	r2,r2,-1
    cdf0:	4090703a 	and	r8,r8,r2
    cdf4:	880ad07a 	srli	r5,r17,1
    cdf8:	400897fa 	slli	r4,r8,31
    cdfc:	88c0004c 	andi	r3,r17,1
    ce00:	28e2b03a 	or	r17,r5,r3
    ce04:	4010d07a 	srli	r8,r8,1
    ce08:	2462b03a 	or	r17,r4,r17
    ce0c:	003f7106 	br	cbd4 <_gp+0xffff0a78>
    ce10:	4088b03a 	or	r4,r8,r2
    ce14:	20014526 	beq	r4,zero,d32c <__adddf3+0x7d4>
    ce18:	01000434 	movhi	r4,16
    ce1c:	42000234 	orhi	r8,r8,8
    ce20:	213fffc4 	addi	r4,r4,-1
    ce24:	4110703a 	and	r8,r8,r4
    ce28:	003f8206 	br	cc34 <_gp+0xffff0ad8>
    ce2c:	18ffffc4 	addi	r3,r3,-1
    ce30:	1800491e 	bne	r3,zero,cf58 <__adddf3+0x400>
    ce34:	898bc83a 	sub	r5,r17,r6
    ce38:	8963803a 	cmpltu	r17,r17,r5
    ce3c:	4251c83a 	sub	r8,r8,r9
    ce40:	4451c83a 	sub	r8,r8,r17
    ce44:	2823883a 	mov	r17,r5
    ce48:	003f9f06 	br	ccc8 <_gp+0xffff0b6c>
    ce4c:	4984b03a 	or	r2,r9,r6
    ce50:	103f6026 	beq	r2,zero,cbd4 <_gp+0xffff0a78>
    ce54:	213fffc4 	addi	r4,r4,-1
    ce58:	2000931e 	bne	r4,zero,d0a8 <__adddf3+0x550>
    ce5c:	898d883a 	add	r6,r17,r6
    ce60:	3463803a 	cmpltu	r17,r6,r17
    ce64:	4251883a 	add	r8,r8,r9
    ce68:	8a11883a 	add	r8,r17,r8
    ce6c:	3023883a 	mov	r17,r6
    ce70:	003fd806 	br	cdd4 <_gp+0xffff0c78>
    ce74:	1800541e 	bne	r3,zero,cfc8 <__adddf3+0x470>
    ce78:	80800044 	addi	r2,r16,1
    ce7c:	1081ffcc 	andi	r2,r2,2047
    ce80:	00c00044 	movi	r3,1
    ce84:	1880a00e 	bge	r3,r2,d108 <__adddf3+0x5b0>
    ce88:	8989c83a 	sub	r4,r17,r6
    ce8c:	8905803a 	cmpltu	r2,r17,r4
    ce90:	4267c83a 	sub	r19,r8,r9
    ce94:	98a7c83a 	sub	r19,r19,r2
    ce98:	9880202c 	andhi	r2,r19,128
    ce9c:	10006326 	beq	r2,zero,d02c <__adddf3+0x4d4>
    cea0:	3463c83a 	sub	r17,r6,r17
    cea4:	4a07c83a 	sub	r3,r9,r8
    cea8:	344d803a 	cmpltu	r6,r6,r17
    ceac:	19a7c83a 	sub	r19,r3,r6
    ceb0:	3825883a 	mov	r18,r7
    ceb4:	983f8a1e 	bne	r19,zero,cce0 <_gp+0xffff0b84>
    ceb8:	8809883a 	mov	r4,r17
    cebc:	000f3980 	call	f398 <__clzsi2>
    cec0:	10800804 	addi	r2,r2,32
    cec4:	10fffe04 	addi	r3,r2,-8
    cec8:	010007c4 	movi	r4,31
    cecc:	20ff890e 	bge	r4,r3,ccf4 <_gp+0xffff0b98>
    ced0:	10bff604 	addi	r2,r2,-40
    ced4:	8884983a 	sll	r2,r17,r2
    ced8:	0023883a 	mov	r17,zero
    cedc:	1c3f8c0e 	bge	r3,r16,cd10 <_gp+0xffff0bb4>
    cee0:	023fe034 	movhi	r8,65408
    cee4:	423fffc4 	addi	r8,r8,-1
    cee8:	80e1c83a 	sub	r16,r16,r3
    ceec:	1210703a 	and	r8,r2,r8
    cef0:	003f3806 	br	cbd4 <_gp+0xffff0a78>
    cef4:	9007883a 	mov	r3,r18
    cef8:	0011883a 	mov	r8,zero
    cefc:	0005883a 	mov	r2,zero
    cf00:	003f4c06 	br	cc34 <_gp+0xffff0ad8>
    cf04:	498cb03a 	or	r6,r9,r6
    cf08:	300cc03a 	cmpne	r6,r6,zero
    cf0c:	0007883a 	mov	r3,zero
    cf10:	003f6806 	br	ccb4 <_gp+0xffff0b58>
    cf14:	20009c1e 	bne	r4,zero,d188 <__adddf3+0x630>
    cf18:	80800044 	addi	r2,r16,1
    cf1c:	1141ffcc 	andi	r5,r2,2047
    cf20:	01000044 	movi	r4,1
    cf24:	2140670e 	bge	r4,r5,d0c4 <__adddf3+0x56c>
    cf28:	0101ffc4 	movi	r4,2047
    cf2c:	11007f26 	beq	r2,r4,d12c <__adddf3+0x5d4>
    cf30:	898d883a 	add	r6,r17,r6
    cf34:	4247883a 	add	r3,r8,r9
    cf38:	3451803a 	cmpltu	r8,r6,r17
    cf3c:	40d1883a 	add	r8,r8,r3
    cf40:	402297fa 	slli	r17,r8,31
    cf44:	300cd07a 	srli	r6,r6,1
    cf48:	4010d07a 	srli	r8,r8,1
    cf4c:	1021883a 	mov	r16,r2
    cf50:	89a2b03a 	or	r17,r17,r6
    cf54:	003f1f06 	br	cbd4 <_gp+0xffff0a78>
    cf58:	0081ffc4 	movi	r2,2047
    cf5c:	80bf481e 	bne	r16,r2,cc80 <_gp+0xffff0b24>
    cf60:	003f1c06 	br	cbd4 <_gp+0xffff0a78>
    cf64:	843ff844 	addi	r16,r16,-31
    cf68:	01000804 	movi	r4,32
    cf6c:	1406d83a 	srl	r3,r2,r16
    cf70:	41005026 	beq	r8,r4,d0b4 <__adddf3+0x55c>
    cf74:	01001004 	movi	r4,64
    cf78:	2211c83a 	sub	r8,r4,r8
    cf7c:	1204983a 	sll	r2,r2,r8
    cf80:	88a2b03a 	or	r17,r17,r2
    cf84:	8822c03a 	cmpne	r17,r17,zero
    cf88:	1c62b03a 	or	r17,r3,r17
    cf8c:	0011883a 	mov	r8,zero
    cf90:	0021883a 	mov	r16,zero
    cf94:	003f7106 	br	cd5c <_gp+0xffff0c00>
    cf98:	193ff804 	addi	r4,r3,-32
    cf9c:	00800804 	movi	r2,32
    cfa0:	4908d83a 	srl	r4,r9,r4
    cfa4:	18804526 	beq	r3,r2,d0bc <__adddf3+0x564>
    cfa8:	00801004 	movi	r2,64
    cfac:	10c5c83a 	sub	r2,r2,r3
    cfb0:	4886983a 	sll	r3,r9,r2
    cfb4:	198cb03a 	or	r6,r3,r6
    cfb8:	300cc03a 	cmpne	r6,r6,zero
    cfbc:	218cb03a 	or	r6,r4,r6
    cfc0:	0007883a 	mov	r3,zero
    cfc4:	003f3b06 	br	ccb4 <_gp+0xffff0b58>
    cfc8:	80002a26 	beq	r16,zero,d074 <__adddf3+0x51c>
    cfcc:	0101ffc4 	movi	r4,2047
    cfd0:	11006826 	beq	r2,r4,d174 <__adddf3+0x61c>
    cfd4:	00c7c83a 	sub	r3,zero,r3
    cfd8:	42002034 	orhi	r8,r8,128
    cfdc:	01000e04 	movi	r4,56
    cfe0:	20c07c16 	blt	r4,r3,d1d4 <__adddf3+0x67c>
    cfe4:	010007c4 	movi	r4,31
    cfe8:	20c0da16 	blt	r4,r3,d354 <__adddf3+0x7fc>
    cfec:	01000804 	movi	r4,32
    cff0:	20c9c83a 	sub	r4,r4,r3
    cff4:	4114983a 	sll	r10,r8,r4
    cff8:	88cad83a 	srl	r5,r17,r3
    cffc:	8908983a 	sll	r4,r17,r4
    d000:	40c6d83a 	srl	r3,r8,r3
    d004:	5162b03a 	or	r17,r10,r5
    d008:	2008c03a 	cmpne	r4,r4,zero
    d00c:	8922b03a 	or	r17,r17,r4
    d010:	3463c83a 	sub	r17,r6,r17
    d014:	48c7c83a 	sub	r3,r9,r3
    d018:	344d803a 	cmpltu	r6,r6,r17
    d01c:	1991c83a 	sub	r8,r3,r6
    d020:	1021883a 	mov	r16,r2
    d024:	3825883a 	mov	r18,r7
    d028:	003f2706 	br	ccc8 <_gp+0xffff0b6c>
    d02c:	24d0b03a 	or	r8,r4,r19
    d030:	40001b1e 	bne	r8,zero,d0a0 <__adddf3+0x548>
    d034:	0005883a 	mov	r2,zero
    d038:	0007883a 	mov	r3,zero
    d03c:	0021883a 	mov	r16,zero
    d040:	003f4d06 	br	cd78 <_gp+0xffff0c1c>
    d044:	008007c4 	movi	r2,31
    d048:	11003c16 	blt	r2,r4,d13c <__adddf3+0x5e4>
    d04c:	00800804 	movi	r2,32
    d050:	1105c83a 	sub	r2,r2,r4
    d054:	488e983a 	sll	r7,r9,r2
    d058:	310ad83a 	srl	r5,r6,r4
    d05c:	3084983a 	sll	r2,r6,r2
    d060:	4912d83a 	srl	r9,r9,r4
    d064:	394ab03a 	or	r5,r7,r5
    d068:	1004c03a 	cmpne	r2,r2,zero
    d06c:	288ab03a 	or	r5,r5,r2
    d070:	003f5306 	br	cdc0 <_gp+0xffff0c64>
    d074:	4448b03a 	or	r4,r8,r17
    d078:	20003e26 	beq	r4,zero,d174 <__adddf3+0x61c>
    d07c:	00c6303a 	nor	r3,zero,r3
    d080:	18003a1e 	bne	r3,zero,d16c <__adddf3+0x614>
    d084:	3463c83a 	sub	r17,r6,r17
    d088:	4a07c83a 	sub	r3,r9,r8
    d08c:	344d803a 	cmpltu	r6,r6,r17
    d090:	1991c83a 	sub	r8,r3,r6
    d094:	1021883a 	mov	r16,r2
    d098:	3825883a 	mov	r18,r7
    d09c:	003f0a06 	br	ccc8 <_gp+0xffff0b6c>
    d0a0:	2023883a 	mov	r17,r4
    d0a4:	003f0d06 	br	ccdc <_gp+0xffff0b80>
    d0a8:	0081ffc4 	movi	r2,2047
    d0ac:	80bf3f1e 	bne	r16,r2,cdac <_gp+0xffff0c50>
    d0b0:	003ec806 	br	cbd4 <_gp+0xffff0a78>
    d0b4:	0005883a 	mov	r2,zero
    d0b8:	003fb106 	br	cf80 <_gp+0xffff0e24>
    d0bc:	0007883a 	mov	r3,zero
    d0c0:	003fbc06 	br	cfb4 <_gp+0xffff0e58>
    d0c4:	4444b03a 	or	r2,r8,r17
    d0c8:	8000871e 	bne	r16,zero,d2e8 <__adddf3+0x790>
    d0cc:	1000ba26 	beq	r2,zero,d3b8 <__adddf3+0x860>
    d0d0:	4984b03a 	or	r2,r9,r6
    d0d4:	103ebf26 	beq	r2,zero,cbd4 <_gp+0xffff0a78>
    d0d8:	8985883a 	add	r2,r17,r6
    d0dc:	4247883a 	add	r3,r8,r9
    d0e0:	1451803a 	cmpltu	r8,r2,r17
    d0e4:	40d1883a 	add	r8,r8,r3
    d0e8:	40c0202c 	andhi	r3,r8,128
    d0ec:	1023883a 	mov	r17,r2
    d0f0:	183f1a26 	beq	r3,zero,cd5c <_gp+0xffff0c00>
    d0f4:	00bfe034 	movhi	r2,65408
    d0f8:	10bfffc4 	addi	r2,r2,-1
    d0fc:	2021883a 	mov	r16,r4
    d100:	4090703a 	and	r8,r8,r2
    d104:	003eb306 	br	cbd4 <_gp+0xffff0a78>
    d108:	4444b03a 	or	r2,r8,r17
    d10c:	8000291e 	bne	r16,zero,d1b4 <__adddf3+0x65c>
    d110:	10004b1e 	bne	r2,zero,d240 <__adddf3+0x6e8>
    d114:	4990b03a 	or	r8,r9,r6
    d118:	40008b26 	beq	r8,zero,d348 <__adddf3+0x7f0>
    d11c:	4811883a 	mov	r8,r9
    d120:	3023883a 	mov	r17,r6
    d124:	3825883a 	mov	r18,r7
    d128:	003eaa06 	br	cbd4 <_gp+0xffff0a78>
    d12c:	1021883a 	mov	r16,r2
    d130:	0011883a 	mov	r8,zero
    d134:	0005883a 	mov	r2,zero
    d138:	003f0f06 	br	cd78 <_gp+0xffff0c1c>
    d13c:	217ff804 	addi	r5,r4,-32
    d140:	00800804 	movi	r2,32
    d144:	494ad83a 	srl	r5,r9,r5
    d148:	20807d26 	beq	r4,r2,d340 <__adddf3+0x7e8>
    d14c:	00801004 	movi	r2,64
    d150:	1109c83a 	sub	r4,r2,r4
    d154:	4912983a 	sll	r9,r9,r4
    d158:	498cb03a 	or	r6,r9,r6
    d15c:	300cc03a 	cmpne	r6,r6,zero
    d160:	298ab03a 	or	r5,r5,r6
    d164:	0013883a 	mov	r9,zero
    d168:	003f1506 	br	cdc0 <_gp+0xffff0c64>
    d16c:	0101ffc4 	movi	r4,2047
    d170:	113f9a1e 	bne	r2,r4,cfdc <_gp+0xffff0e80>
    d174:	4811883a 	mov	r8,r9
    d178:	3023883a 	mov	r17,r6
    d17c:	1021883a 	mov	r16,r2
    d180:	3825883a 	mov	r18,r7
    d184:	003e9306 	br	cbd4 <_gp+0xffff0a78>
    d188:	8000161e 	bne	r16,zero,d1e4 <__adddf3+0x68c>
    d18c:	444ab03a 	or	r5,r8,r17
    d190:	28005126 	beq	r5,zero,d2d8 <__adddf3+0x780>
    d194:	0108303a 	nor	r4,zero,r4
    d198:	20004d1e 	bne	r4,zero,d2d0 <__adddf3+0x778>
    d19c:	89a3883a 	add	r17,r17,r6
    d1a0:	4253883a 	add	r9,r8,r9
    d1a4:	898d803a 	cmpltu	r6,r17,r6
    d1a8:	3251883a 	add	r8,r6,r9
    d1ac:	1021883a 	mov	r16,r2
    d1b0:	003f0806 	br	cdd4 <_gp+0xffff0c78>
    d1b4:	1000301e 	bne	r2,zero,d278 <__adddf3+0x720>
    d1b8:	4984b03a 	or	r2,r9,r6
    d1bc:	10007126 	beq	r2,zero,d384 <__adddf3+0x82c>
    d1c0:	4811883a 	mov	r8,r9
    d1c4:	3023883a 	mov	r17,r6
    d1c8:	3825883a 	mov	r18,r7
    d1cc:	0401ffc4 	movi	r16,2047
    d1d0:	003e8006 	br	cbd4 <_gp+0xffff0a78>
    d1d4:	4462b03a 	or	r17,r8,r17
    d1d8:	8822c03a 	cmpne	r17,r17,zero
    d1dc:	0007883a 	mov	r3,zero
    d1e0:	003f8b06 	br	d010 <_gp+0xffff0eb4>
    d1e4:	0141ffc4 	movi	r5,2047
    d1e8:	11403b26 	beq	r2,r5,d2d8 <__adddf3+0x780>
    d1ec:	0109c83a 	sub	r4,zero,r4
    d1f0:	42002034 	orhi	r8,r8,128
    d1f4:	01400e04 	movi	r5,56
    d1f8:	29006716 	blt	r5,r4,d398 <__adddf3+0x840>
    d1fc:	014007c4 	movi	r5,31
    d200:	29007016 	blt	r5,r4,d3c4 <__adddf3+0x86c>
    d204:	01400804 	movi	r5,32
    d208:	290bc83a 	sub	r5,r5,r4
    d20c:	4154983a 	sll	r10,r8,r5
    d210:	890ed83a 	srl	r7,r17,r4
    d214:	894a983a 	sll	r5,r17,r5
    d218:	4108d83a 	srl	r4,r8,r4
    d21c:	51e2b03a 	or	r17,r10,r7
    d220:	280ac03a 	cmpne	r5,r5,zero
    d224:	8962b03a 	or	r17,r17,r5
    d228:	89a3883a 	add	r17,r17,r6
    d22c:	2253883a 	add	r9,r4,r9
    d230:	898d803a 	cmpltu	r6,r17,r6
    d234:	3251883a 	add	r8,r6,r9
    d238:	1021883a 	mov	r16,r2
    d23c:	003ee506 	br	cdd4 <_gp+0xffff0c78>
    d240:	4984b03a 	or	r2,r9,r6
    d244:	103e6326 	beq	r2,zero,cbd4 <_gp+0xffff0a78>
    d248:	8987c83a 	sub	r3,r17,r6
    d24c:	88c9803a 	cmpltu	r4,r17,r3
    d250:	4245c83a 	sub	r2,r8,r9
    d254:	1105c83a 	sub	r2,r2,r4
    d258:	1100202c 	andhi	r4,r2,128
    d25c:	203ebb26 	beq	r4,zero,cd4c <_gp+0xffff0bf0>
    d260:	3463c83a 	sub	r17,r6,r17
    d264:	4a07c83a 	sub	r3,r9,r8
    d268:	344d803a 	cmpltu	r6,r6,r17
    d26c:	1991c83a 	sub	r8,r3,r6
    d270:	3825883a 	mov	r18,r7
    d274:	003e5706 	br	cbd4 <_gp+0xffff0a78>
    d278:	4984b03a 	or	r2,r9,r6
    d27c:	10002e26 	beq	r2,zero,d338 <__adddf3+0x7e0>
    d280:	4004d0fa 	srli	r2,r8,3
    d284:	8822d0fa 	srli	r17,r17,3
    d288:	4010977a 	slli	r8,r8,29
    d28c:	10c0022c 	andhi	r3,r2,8
    d290:	4462b03a 	or	r17,r8,r17
    d294:	18000826 	beq	r3,zero,d2b8 <__adddf3+0x760>
    d298:	4808d0fa 	srli	r4,r9,3
    d29c:	20c0022c 	andhi	r3,r4,8
    d2a0:	1800051e 	bne	r3,zero,d2b8 <__adddf3+0x760>
    d2a4:	300cd0fa 	srli	r6,r6,3
    d2a8:	4806977a 	slli	r3,r9,29
    d2ac:	2005883a 	mov	r2,r4
    d2b0:	3825883a 	mov	r18,r7
    d2b4:	19a2b03a 	or	r17,r3,r6
    d2b8:	8810d77a 	srli	r8,r17,29
    d2bc:	100490fa 	slli	r2,r2,3
    d2c0:	882290fa 	slli	r17,r17,3
    d2c4:	0401ffc4 	movi	r16,2047
    d2c8:	4090b03a 	or	r8,r8,r2
    d2cc:	003e4106 	br	cbd4 <_gp+0xffff0a78>
    d2d0:	0141ffc4 	movi	r5,2047
    d2d4:	117fc71e 	bne	r2,r5,d1f4 <_gp+0xffff1098>
    d2d8:	4811883a 	mov	r8,r9
    d2dc:	3023883a 	mov	r17,r6
    d2e0:	1021883a 	mov	r16,r2
    d2e4:	003e3b06 	br	cbd4 <_gp+0xffff0a78>
    d2e8:	10002f26 	beq	r2,zero,d3a8 <__adddf3+0x850>
    d2ec:	4984b03a 	or	r2,r9,r6
    d2f0:	10001126 	beq	r2,zero,d338 <__adddf3+0x7e0>
    d2f4:	4004d0fa 	srli	r2,r8,3
    d2f8:	8822d0fa 	srli	r17,r17,3
    d2fc:	4010977a 	slli	r8,r8,29
    d300:	10c0022c 	andhi	r3,r2,8
    d304:	4462b03a 	or	r17,r8,r17
    d308:	183feb26 	beq	r3,zero,d2b8 <_gp+0xffff115c>
    d30c:	4808d0fa 	srli	r4,r9,3
    d310:	20c0022c 	andhi	r3,r4,8
    d314:	183fe81e 	bne	r3,zero,d2b8 <_gp+0xffff115c>
    d318:	300cd0fa 	srli	r6,r6,3
    d31c:	4806977a 	slli	r3,r9,29
    d320:	2005883a 	mov	r2,r4
    d324:	19a2b03a 	or	r17,r3,r6
    d328:	003fe306 	br	d2b8 <_gp+0xffff115c>
    d32c:	0011883a 	mov	r8,zero
    d330:	0005883a 	mov	r2,zero
    d334:	003e3f06 	br	cc34 <_gp+0xffff0ad8>
    d338:	0401ffc4 	movi	r16,2047
    d33c:	003e2506 	br	cbd4 <_gp+0xffff0a78>
    d340:	0013883a 	mov	r9,zero
    d344:	003f8406 	br	d158 <_gp+0xffff0ffc>
    d348:	0005883a 	mov	r2,zero
    d34c:	0007883a 	mov	r3,zero
    d350:	003e8906 	br	cd78 <_gp+0xffff0c1c>
    d354:	197ff804 	addi	r5,r3,-32
    d358:	01000804 	movi	r4,32
    d35c:	414ad83a 	srl	r5,r8,r5
    d360:	19002426 	beq	r3,r4,d3f4 <__adddf3+0x89c>
    d364:	01001004 	movi	r4,64
    d368:	20c7c83a 	sub	r3,r4,r3
    d36c:	40c6983a 	sll	r3,r8,r3
    d370:	1c46b03a 	or	r3,r3,r17
    d374:	1806c03a 	cmpne	r3,r3,zero
    d378:	28e2b03a 	or	r17,r5,r3
    d37c:	0007883a 	mov	r3,zero
    d380:	003f2306 	br	d010 <_gp+0xffff0eb4>
    d384:	0007883a 	mov	r3,zero
    d388:	5811883a 	mov	r8,r11
    d38c:	00bfffc4 	movi	r2,-1
    d390:	0401ffc4 	movi	r16,2047
    d394:	003e7806 	br	cd78 <_gp+0xffff0c1c>
    d398:	4462b03a 	or	r17,r8,r17
    d39c:	8822c03a 	cmpne	r17,r17,zero
    d3a0:	0009883a 	mov	r4,zero
    d3a4:	003fa006 	br	d228 <_gp+0xffff10cc>
    d3a8:	4811883a 	mov	r8,r9
    d3ac:	3023883a 	mov	r17,r6
    d3b0:	0401ffc4 	movi	r16,2047
    d3b4:	003e0706 	br	cbd4 <_gp+0xffff0a78>
    d3b8:	4811883a 	mov	r8,r9
    d3bc:	3023883a 	mov	r17,r6
    d3c0:	003e0406 	br	cbd4 <_gp+0xffff0a78>
    d3c4:	21fff804 	addi	r7,r4,-32
    d3c8:	01400804 	movi	r5,32
    d3cc:	41ced83a 	srl	r7,r8,r7
    d3d0:	21400a26 	beq	r4,r5,d3fc <__adddf3+0x8a4>
    d3d4:	01401004 	movi	r5,64
    d3d8:	2909c83a 	sub	r4,r5,r4
    d3dc:	4108983a 	sll	r4,r8,r4
    d3e0:	2448b03a 	or	r4,r4,r17
    d3e4:	2008c03a 	cmpne	r4,r4,zero
    d3e8:	3922b03a 	or	r17,r7,r4
    d3ec:	0009883a 	mov	r4,zero
    d3f0:	003f8d06 	br	d228 <_gp+0xffff10cc>
    d3f4:	0007883a 	mov	r3,zero
    d3f8:	003fdd06 	br	d370 <_gp+0xffff1214>
    d3fc:	0009883a 	mov	r4,zero
    d400:	003ff706 	br	d3e0 <_gp+0xffff1284>

0000d404 <__divdf3>:
    d404:	defff004 	addi	sp,sp,-64
    d408:	dc800815 	stw	r18,32(sp)
    d40c:	2824d53a 	srli	r18,r5,20
    d410:	dd800c15 	stw	r22,48(sp)
    d414:	282cd7fa 	srli	r22,r5,31
    d418:	dc000615 	stw	r16,24(sp)
    d41c:	04000434 	movhi	r16,16
    d420:	843fffc4 	addi	r16,r16,-1
    d424:	dfc00f15 	stw	ra,60(sp)
    d428:	df000e15 	stw	fp,56(sp)
    d42c:	ddc00d15 	stw	r23,52(sp)
    d430:	dd400b15 	stw	r21,44(sp)
    d434:	dd000a15 	stw	r20,40(sp)
    d438:	dcc00915 	stw	r19,36(sp)
    d43c:	dc400715 	stw	r17,28(sp)
    d440:	9481ffcc 	andi	r18,r18,2047
    d444:	2c20703a 	and	r16,r5,r16
    d448:	b2003fcc 	andi	r8,r22,255
    d44c:	90006126 	beq	r18,zero,d5d4 <__divdf3+0x1d0>
    d450:	0081ffc4 	movi	r2,2047
    d454:	202b883a 	mov	r21,r4
    d458:	90803726 	beq	r18,r2,d538 <__divdf3+0x134>
    d45c:	80800434 	orhi	r2,r16,16
    d460:	100490fa 	slli	r2,r2,3
    d464:	2020d77a 	srli	r16,r4,29
    d468:	202a90fa 	slli	r21,r4,3
    d46c:	94bf0044 	addi	r18,r18,-1023
    d470:	80a0b03a 	or	r16,r16,r2
    d474:	0013883a 	mov	r9,zero
    d478:	000b883a 	mov	r5,zero
    d47c:	3806d53a 	srli	r3,r7,20
    d480:	382ed7fa 	srli	r23,r7,31
    d484:	04400434 	movhi	r17,16
    d488:	8c7fffc4 	addi	r17,r17,-1
    d48c:	18c1ffcc 	andi	r3,r3,2047
    d490:	3029883a 	mov	r20,r6
    d494:	3c62703a 	and	r17,r7,r17
    d498:	bf003fcc 	andi	fp,r23,255
    d49c:	18006e26 	beq	r3,zero,d658 <__divdf3+0x254>
    d4a0:	0081ffc4 	movi	r2,2047
    d4a4:	18806626 	beq	r3,r2,d640 <__divdf3+0x23c>
    d4a8:	88800434 	orhi	r2,r17,16
    d4ac:	100490fa 	slli	r2,r2,3
    d4b0:	3022d77a 	srli	r17,r6,29
    d4b4:	302890fa 	slli	r20,r6,3
    d4b8:	18ff0044 	addi	r3,r3,-1023
    d4bc:	88a2b03a 	or	r17,r17,r2
    d4c0:	000f883a 	mov	r7,zero
    d4c4:	b5e6f03a 	xor	r19,r22,r23
    d4c8:	3a4cb03a 	or	r6,r7,r9
    d4cc:	008003c4 	movi	r2,15
    d4d0:	9809883a 	mov	r4,r19
    d4d4:	90c7c83a 	sub	r3,r18,r3
    d4d8:	9cc03fcc 	andi	r19,r19,255
    d4dc:	11809636 	bltu	r2,r6,d738 <__divdf3+0x334>
    d4e0:	300c90ba 	slli	r6,r6,2
    d4e4:	00800074 	movhi	r2,1
    d4e8:	10b53e04 	addi	r2,r2,-11016
    d4ec:	308d883a 	add	r6,r6,r2
    d4f0:	30800017 	ldw	r2,0(r6)
    d4f4:	1000683a 	jmp	r2
    d4f8:	0000d738 	rdprs	zero,zero,860
    d4fc:	0000d570 	cmpltui	zero,zero,853
    d500:	0000d728 	cmpgeui	zero,zero,860
    d504:	0000d564 	muli	zero,zero,853
    d508:	0000d728 	cmpgeui	zero,zero,860
    d50c:	0000d6fc 	xorhi	zero,zero,859
    d510:	0000d728 	cmpgeui	zero,zero,860
    d514:	0000d564 	muli	zero,zero,853
    d518:	0000d570 	cmpltui	zero,zero,853
    d51c:	0000d570 	cmpltui	zero,zero,853
    d520:	0000d6fc 	xorhi	zero,zero,859
    d524:	0000d564 	muli	zero,zero,853
    d528:	0000d554 	movui	zero,853
    d52c:	0000d554 	movui	zero,853
    d530:	0000d554 	movui	zero,853
    d534:	0000dac0 	call	dac <main+0x958>
    d538:	2404b03a 	or	r2,r4,r16
    d53c:	10006c1e 	bne	r2,zero,d6f0 <__divdf3+0x2ec>
    d540:	02400204 	movi	r9,8
    d544:	0021883a 	mov	r16,zero
    d548:	002b883a 	mov	r21,zero
    d54c:	01400084 	movi	r5,2
    d550:	003fca06 	br	d47c <_gp+0xffff1320>
    d554:	8023883a 	mov	r17,r16
    d558:	a829883a 	mov	r20,r21
    d55c:	4039883a 	mov	fp,r8
    d560:	280f883a 	mov	r7,r5
    d564:	00800084 	movi	r2,2
    d568:	3881601e 	bne	r7,r2,daec <__divdf3+0x6e8>
    d56c:	e027883a 	mov	r19,fp
    d570:	9900004c 	andi	r4,r19,1
    d574:	0081ffc4 	movi	r2,2047
    d578:	0021883a 	mov	r16,zero
    d57c:	002b883a 	mov	r21,zero
    d580:	1004953a 	slli	r2,r2,20
    d584:	20c03fcc 	andi	r3,r4,255
    d588:	01400434 	movhi	r5,16
    d58c:	297fffc4 	addi	r5,r5,-1
    d590:	180697fa 	slli	r3,r3,31
    d594:	8160703a 	and	r16,r16,r5
    d598:	80a0b03a 	or	r16,r16,r2
    d59c:	80c6b03a 	or	r3,r16,r3
    d5a0:	a805883a 	mov	r2,r21
    d5a4:	dfc00f17 	ldw	ra,60(sp)
    d5a8:	df000e17 	ldw	fp,56(sp)
    d5ac:	ddc00d17 	ldw	r23,52(sp)
    d5b0:	dd800c17 	ldw	r22,48(sp)
    d5b4:	dd400b17 	ldw	r21,44(sp)
    d5b8:	dd000a17 	ldw	r20,40(sp)
    d5bc:	dcc00917 	ldw	r19,36(sp)
    d5c0:	dc800817 	ldw	r18,32(sp)
    d5c4:	dc400717 	ldw	r17,28(sp)
    d5c8:	dc000617 	ldw	r16,24(sp)
    d5cc:	dec01004 	addi	sp,sp,64
    d5d0:	f800283a 	ret
    d5d4:	2404b03a 	or	r2,r4,r16
    d5d8:	2023883a 	mov	r17,r4
    d5dc:	10003f26 	beq	r2,zero,d6dc <__divdf3+0x2d8>
    d5e0:	80015e26 	beq	r16,zero,db5c <__divdf3+0x758>
    d5e4:	8009883a 	mov	r4,r16
    d5e8:	d9800215 	stw	r6,8(sp)
    d5ec:	d9c00515 	stw	r7,20(sp)
    d5f0:	da000415 	stw	r8,16(sp)
    d5f4:	000f3980 	call	f398 <__clzsi2>
    d5f8:	d9800217 	ldw	r6,8(sp)
    d5fc:	d9c00517 	ldw	r7,20(sp)
    d600:	da000417 	ldw	r8,16(sp)
    d604:	113ffd44 	addi	r4,r2,-11
    d608:	00c00704 	movi	r3,28
    d60c:	19014f16 	blt	r3,r4,db4c <__divdf3+0x748>
    d610:	00c00744 	movi	r3,29
    d614:	157ffe04 	addi	r21,r2,-8
    d618:	1907c83a 	sub	r3,r3,r4
    d61c:	8560983a 	sll	r16,r16,r21
    d620:	88c6d83a 	srl	r3,r17,r3
    d624:	8d6a983a 	sll	r21,r17,r21
    d628:	1c20b03a 	or	r16,r3,r16
    d62c:	1080fcc4 	addi	r2,r2,1011
    d630:	00a5c83a 	sub	r18,zero,r2
    d634:	0013883a 	mov	r9,zero
    d638:	000b883a 	mov	r5,zero
    d63c:	003f8f06 	br	d47c <_gp+0xffff1320>
    d640:	3444b03a 	or	r2,r6,r17
    d644:	1000231e 	bne	r2,zero,d6d4 <__divdf3+0x2d0>
    d648:	0023883a 	mov	r17,zero
    d64c:	0029883a 	mov	r20,zero
    d650:	01c00084 	movi	r7,2
    d654:	003f9b06 	br	d4c4 <_gp+0xffff1368>
    d658:	3444b03a 	or	r2,r6,r17
    d65c:	10001926 	beq	r2,zero,d6c4 <__divdf3+0x2c0>
    d660:	88014b26 	beq	r17,zero,db90 <__divdf3+0x78c>
    d664:	8809883a 	mov	r4,r17
    d668:	d9400115 	stw	r5,4(sp)
    d66c:	d9800215 	stw	r6,8(sp)
    d670:	da000415 	stw	r8,16(sp)
    d674:	da400315 	stw	r9,12(sp)
    d678:	000f3980 	call	f398 <__clzsi2>
    d67c:	d9400117 	ldw	r5,4(sp)
    d680:	d9800217 	ldw	r6,8(sp)
    d684:	da000417 	ldw	r8,16(sp)
    d688:	da400317 	ldw	r9,12(sp)
    d68c:	113ffd44 	addi	r4,r2,-11
    d690:	00c00704 	movi	r3,28
    d694:	19013a16 	blt	r3,r4,db80 <__divdf3+0x77c>
    d698:	00c00744 	movi	r3,29
    d69c:	153ffe04 	addi	r20,r2,-8
    d6a0:	1907c83a 	sub	r3,r3,r4
    d6a4:	8d22983a 	sll	r17,r17,r20
    d6a8:	30c6d83a 	srl	r3,r6,r3
    d6ac:	3528983a 	sll	r20,r6,r20
    d6b0:	1c62b03a 	or	r17,r3,r17
    d6b4:	1080fcc4 	addi	r2,r2,1011
    d6b8:	0087c83a 	sub	r3,zero,r2
    d6bc:	000f883a 	mov	r7,zero
    d6c0:	003f8006 	br	d4c4 <_gp+0xffff1368>
    d6c4:	0023883a 	mov	r17,zero
    d6c8:	0029883a 	mov	r20,zero
    d6cc:	01c00044 	movi	r7,1
    d6d0:	003f7c06 	br	d4c4 <_gp+0xffff1368>
    d6d4:	01c000c4 	movi	r7,3
    d6d8:	003f7a06 	br	d4c4 <_gp+0xffff1368>
    d6dc:	02400104 	movi	r9,4
    d6e0:	0021883a 	mov	r16,zero
    d6e4:	002b883a 	mov	r21,zero
    d6e8:	01400044 	movi	r5,1
    d6ec:	003f6306 	br	d47c <_gp+0xffff1320>
    d6f0:	02400304 	movi	r9,12
    d6f4:	014000c4 	movi	r5,3
    d6f8:	003f6006 	br	d47c <_gp+0xffff1320>
    d6fc:	04000434 	movhi	r16,16
    d700:	0009883a 	mov	r4,zero
    d704:	843fffc4 	addi	r16,r16,-1
    d708:	057fffc4 	movi	r21,-1
    d70c:	0081ffc4 	movi	r2,2047
    d710:	003f9b06 	br	d580 <_gp+0xffff1424>
    d714:	00c00044 	movi	r3,1
    d718:	1887c83a 	sub	r3,r3,r2
    d71c:	01000e04 	movi	r4,56
    d720:	20c1530e 	bge	r4,r3,dc70 <__divdf3+0x86c>
    d724:	9900004c 	andi	r4,r19,1
    d728:	0005883a 	mov	r2,zero
    d72c:	0021883a 	mov	r16,zero
    d730:	002b883a 	mov	r21,zero
    d734:	003f9206 	br	d580 <_gp+0xffff1424>
    d738:	8c012e36 	bltu	r17,r16,dbf4 <__divdf3+0x7f0>
    d73c:	84412c26 	beq	r16,r17,dbf0 <__divdf3+0x7ec>
    d740:	a82f883a 	mov	r23,r21
    d744:	18ffffc4 	addi	r3,r3,-1
    d748:	002b883a 	mov	r21,zero
    d74c:	a004d63a 	srli	r2,r20,24
    d750:	8822923a 	slli	r17,r17,8
    d754:	a028923a 	slli	r20,r20,8
    d758:	8009883a 	mov	r4,r16
    d75c:	88acb03a 	or	r22,r17,r2
    d760:	dd000015 	stw	r20,0(sp)
    d764:	b028d43a 	srli	r20,r22,16
    d768:	d8c00215 	stw	r3,8(sp)
    d76c:	b4bfffcc 	andi	r18,r22,65535
    d770:	a00b883a 	mov	r5,r20
    d774:	000ca740 	call	ca74 <__udivsi3>
    d778:	100b883a 	mov	r5,r2
    d77c:	9009883a 	mov	r4,r18
    d780:	1023883a 	mov	r17,r2
    d784:	000cb300 	call	cb30 <__mulsi3>
    d788:	8009883a 	mov	r4,r16
    d78c:	a00b883a 	mov	r5,r20
    d790:	1039883a 	mov	fp,r2
    d794:	000cad80 	call	cad8 <__umodsi3>
    d798:	1004943a 	slli	r2,r2,16
    d79c:	b808d43a 	srli	r4,r23,16
    d7a0:	d8c00217 	ldw	r3,8(sp)
    d7a4:	2084b03a 	or	r2,r4,r2
    d7a8:	1700062e 	bgeu	r2,fp,d7c4 <__divdf3+0x3c0>
    d7ac:	1585883a 	add	r2,r2,r22
    d7b0:	893fffc4 	addi	r4,r17,-1
    d7b4:	15811d36 	bltu	r2,r22,dc2c <__divdf3+0x828>
    d7b8:	17011c2e 	bgeu	r2,fp,dc2c <__divdf3+0x828>
    d7bc:	8c7fff84 	addi	r17,r17,-2
    d7c0:	1585883a 	add	r2,r2,r22
    d7c4:	1739c83a 	sub	fp,r2,fp
    d7c8:	a00b883a 	mov	r5,r20
    d7cc:	e009883a 	mov	r4,fp
    d7d0:	d8c00215 	stw	r3,8(sp)
    d7d4:	000ca740 	call	ca74 <__udivsi3>
    d7d8:	100b883a 	mov	r5,r2
    d7dc:	9009883a 	mov	r4,r18
    d7e0:	1021883a 	mov	r16,r2
    d7e4:	000cb300 	call	cb30 <__mulsi3>
    d7e8:	a00b883a 	mov	r5,r20
    d7ec:	e009883a 	mov	r4,fp
    d7f0:	d8800415 	stw	r2,16(sp)
    d7f4:	000cad80 	call	cad8 <__umodsi3>
    d7f8:	1004943a 	slli	r2,r2,16
    d7fc:	da000417 	ldw	r8,16(sp)
    d800:	bdffffcc 	andi	r23,r23,65535
    d804:	b884b03a 	or	r2,r23,r2
    d808:	d8c00217 	ldw	r3,8(sp)
    d80c:	1200062e 	bgeu	r2,r8,d828 <__divdf3+0x424>
    d810:	1585883a 	add	r2,r2,r22
    d814:	813fffc4 	addi	r4,r16,-1
    d818:	15810236 	bltu	r2,r22,dc24 <__divdf3+0x820>
    d81c:	1201012e 	bgeu	r2,r8,dc24 <__divdf3+0x820>
    d820:	843fff84 	addi	r16,r16,-2
    d824:	1585883a 	add	r2,r2,r22
    d828:	8822943a 	slli	r17,r17,16
    d82c:	d9800017 	ldw	r6,0(sp)
    d830:	1211c83a 	sub	r8,r2,r8
    d834:	8c22b03a 	or	r17,r17,r16
    d838:	373fffcc 	andi	fp,r6,65535
    d83c:	8abfffcc 	andi	r10,r17,65535
    d840:	8820d43a 	srli	r16,r17,16
    d844:	5009883a 	mov	r4,r10
    d848:	e00b883a 	mov	r5,fp
    d84c:	302ed43a 	srli	r23,r6,16
    d850:	d8c00215 	stw	r3,8(sp)
    d854:	da000415 	stw	r8,16(sp)
    d858:	da800115 	stw	r10,4(sp)
    d85c:	000cb300 	call	cb30 <__mulsi3>
    d860:	800b883a 	mov	r5,r16
    d864:	e009883a 	mov	r4,fp
    d868:	d8800515 	stw	r2,20(sp)
    d86c:	000cb300 	call	cb30 <__mulsi3>
    d870:	8009883a 	mov	r4,r16
    d874:	b80b883a 	mov	r5,r23
    d878:	d8800315 	stw	r2,12(sp)
    d87c:	000cb300 	call	cb30 <__mulsi3>
    d880:	da800117 	ldw	r10,4(sp)
    d884:	b80b883a 	mov	r5,r23
    d888:	1021883a 	mov	r16,r2
    d88c:	5009883a 	mov	r4,r10
    d890:	000cb300 	call	cb30 <__mulsi3>
    d894:	d9c00517 	ldw	r7,20(sp)
    d898:	da400317 	ldw	r9,12(sp)
    d89c:	d8c00217 	ldw	r3,8(sp)
    d8a0:	3808d43a 	srli	r4,r7,16
    d8a4:	1245883a 	add	r2,r2,r9
    d8a8:	da000417 	ldw	r8,16(sp)
    d8ac:	2085883a 	add	r2,r4,r2
    d8b0:	1240022e 	bgeu	r2,r9,d8bc <__divdf3+0x4b8>
    d8b4:	01000074 	movhi	r4,1
    d8b8:	8121883a 	add	r16,r16,r4
    d8bc:	1008d43a 	srli	r4,r2,16
    d8c0:	1004943a 	slli	r2,r2,16
    d8c4:	39ffffcc 	andi	r7,r7,65535
    d8c8:	2409883a 	add	r4,r4,r16
    d8cc:	11c5883a 	add	r2,r2,r7
    d8d0:	4100bb36 	bltu	r8,r4,dbc0 <__divdf3+0x7bc>
    d8d4:	4100d726 	beq	r8,r4,dc34 <__divdf3+0x830>
    d8d8:	4109c83a 	sub	r4,r8,r4
    d8dc:	a8a1c83a 	sub	r16,r21,r2
    d8e0:	ac2b803a 	cmpltu	r21,r21,r16
    d8e4:	256bc83a 	sub	r21,r4,r21
    d8e8:	b540d926 	beq	r22,r21,dc50 <__divdf3+0x84c>
    d8ec:	a00b883a 	mov	r5,r20
    d8f0:	a809883a 	mov	r4,r21
    d8f4:	d8c00215 	stw	r3,8(sp)
    d8f8:	000ca740 	call	ca74 <__udivsi3>
    d8fc:	100b883a 	mov	r5,r2
    d900:	9009883a 	mov	r4,r18
    d904:	d8800515 	stw	r2,20(sp)
    d908:	000cb300 	call	cb30 <__mulsi3>
    d90c:	a809883a 	mov	r4,r21
    d910:	a00b883a 	mov	r5,r20
    d914:	d8800415 	stw	r2,16(sp)
    d918:	000cad80 	call	cad8 <__umodsi3>
    d91c:	1004943a 	slli	r2,r2,16
    d920:	8008d43a 	srli	r4,r16,16
    d924:	da000417 	ldw	r8,16(sp)
    d928:	d8c00217 	ldw	r3,8(sp)
    d92c:	2084b03a 	or	r2,r4,r2
    d930:	d9c00517 	ldw	r7,20(sp)
    d934:	1200062e 	bgeu	r2,r8,d950 <__divdf3+0x54c>
    d938:	1585883a 	add	r2,r2,r22
    d93c:	393fffc4 	addi	r4,r7,-1
    d940:	1580c536 	bltu	r2,r22,dc58 <__divdf3+0x854>
    d944:	1200c42e 	bgeu	r2,r8,dc58 <__divdf3+0x854>
    d948:	39ffff84 	addi	r7,r7,-2
    d94c:	1585883a 	add	r2,r2,r22
    d950:	122bc83a 	sub	r21,r2,r8
    d954:	a00b883a 	mov	r5,r20
    d958:	a809883a 	mov	r4,r21
    d95c:	d8c00215 	stw	r3,8(sp)
    d960:	d9c00515 	stw	r7,20(sp)
    d964:	000ca740 	call	ca74 <__udivsi3>
    d968:	9009883a 	mov	r4,r18
    d96c:	100b883a 	mov	r5,r2
    d970:	d8800415 	stw	r2,16(sp)
    d974:	000cb300 	call	cb30 <__mulsi3>
    d978:	a809883a 	mov	r4,r21
    d97c:	a00b883a 	mov	r5,r20
    d980:	1025883a 	mov	r18,r2
    d984:	000cad80 	call	cad8 <__umodsi3>
    d988:	1004943a 	slli	r2,r2,16
    d98c:	813fffcc 	andi	r4,r16,65535
    d990:	d8c00217 	ldw	r3,8(sp)
    d994:	20a0b03a 	or	r16,r4,r2
    d998:	d9c00517 	ldw	r7,20(sp)
    d99c:	da000417 	ldw	r8,16(sp)
    d9a0:	8480062e 	bgeu	r16,r18,d9bc <__divdf3+0x5b8>
    d9a4:	85a1883a 	add	r16,r16,r22
    d9a8:	40bfffc4 	addi	r2,r8,-1
    d9ac:	8580ac36 	bltu	r16,r22,dc60 <__divdf3+0x85c>
    d9b0:	8480ab2e 	bgeu	r16,r18,dc60 <__divdf3+0x85c>
    d9b4:	423fff84 	addi	r8,r8,-2
    d9b8:	85a1883a 	add	r16,r16,r22
    d9bc:	3804943a 	slli	r2,r7,16
    d9c0:	84a1c83a 	sub	r16,r16,r18
    d9c4:	e009883a 	mov	r4,fp
    d9c8:	1228b03a 	or	r20,r2,r8
    d9cc:	a1ffffcc 	andi	r7,r20,65535
    d9d0:	a024d43a 	srli	r18,r20,16
    d9d4:	380b883a 	mov	r5,r7
    d9d8:	d8c00215 	stw	r3,8(sp)
    d9dc:	d9c00515 	stw	r7,20(sp)
    d9e0:	000cb300 	call	cb30 <__mulsi3>
    d9e4:	900b883a 	mov	r5,r18
    d9e8:	e009883a 	mov	r4,fp
    d9ec:	102b883a 	mov	r21,r2
    d9f0:	000cb300 	call	cb30 <__mulsi3>
    d9f4:	900b883a 	mov	r5,r18
    d9f8:	b809883a 	mov	r4,r23
    d9fc:	1039883a 	mov	fp,r2
    da00:	000cb300 	call	cb30 <__mulsi3>
    da04:	d9c00517 	ldw	r7,20(sp)
    da08:	b80b883a 	mov	r5,r23
    da0c:	1025883a 	mov	r18,r2
    da10:	3809883a 	mov	r4,r7
    da14:	000cb300 	call	cb30 <__mulsi3>
    da18:	a808d43a 	srli	r4,r21,16
    da1c:	1705883a 	add	r2,r2,fp
    da20:	d8c00217 	ldw	r3,8(sp)
    da24:	2085883a 	add	r2,r4,r2
    da28:	1700022e 	bgeu	r2,fp,da34 <__divdf3+0x630>
    da2c:	01000074 	movhi	r4,1
    da30:	9125883a 	add	r18,r18,r4
    da34:	1008d43a 	srli	r4,r2,16
    da38:	1004943a 	slli	r2,r2,16
    da3c:	ad7fffcc 	andi	r21,r21,65535
    da40:	2489883a 	add	r4,r4,r18
    da44:	1545883a 	add	r2,r2,r21
    da48:	81003836 	bltu	r16,r4,db2c <__divdf3+0x728>
    da4c:	81003626 	beq	r16,r4,db28 <__divdf3+0x724>
    da50:	a5000054 	ori	r20,r20,1
    da54:	1880ffc4 	addi	r2,r3,1023
    da58:	00bf2e0e 	bge	zero,r2,d714 <_gp+0xffff15b8>
    da5c:	a10001cc 	andi	r4,r20,7
    da60:	20000726 	beq	r4,zero,da80 <__divdf3+0x67c>
    da64:	a10003cc 	andi	r4,r20,15
    da68:	01400104 	movi	r5,4
    da6c:	21400426 	beq	r4,r5,da80 <__divdf3+0x67c>
    da70:	a149883a 	add	r4,r20,r5
    da74:	2529803a 	cmpltu	r20,r4,r20
    da78:	8d23883a 	add	r17,r17,r20
    da7c:	2029883a 	mov	r20,r4
    da80:	8900402c 	andhi	r4,r17,256
    da84:	20000426 	beq	r4,zero,da98 <__divdf3+0x694>
    da88:	18810004 	addi	r2,r3,1024
    da8c:	00ffc034 	movhi	r3,65280
    da90:	18ffffc4 	addi	r3,r3,-1
    da94:	88e2703a 	and	r17,r17,r3
    da98:	00c1ff84 	movi	r3,2046
    da9c:	18beb416 	blt	r3,r2,d570 <_gp+0xffff1414>
    daa0:	a028d0fa 	srli	r20,r20,3
    daa4:	882a977a 	slli	r21,r17,29
    daa8:	8820927a 	slli	r16,r17,9
    daac:	1081ffcc 	andi	r2,r2,2047
    dab0:	ad2ab03a 	or	r21,r21,r20
    dab4:	8020d33a 	srli	r16,r16,12
    dab8:	9900004c 	andi	r4,r19,1
    dabc:	003eb006 	br	d580 <_gp+0xffff1424>
    dac0:	8080022c 	andhi	r2,r16,8
    dac4:	10001226 	beq	r2,zero,db10 <__divdf3+0x70c>
    dac8:	8880022c 	andhi	r2,r17,8
    dacc:	1000101e 	bne	r2,zero,db10 <__divdf3+0x70c>
    dad0:	00800434 	movhi	r2,16
    dad4:	8c000234 	orhi	r16,r17,8
    dad8:	10bfffc4 	addi	r2,r2,-1
    dadc:	b809883a 	mov	r4,r23
    dae0:	80a0703a 	and	r16,r16,r2
    dae4:	a02b883a 	mov	r21,r20
    dae8:	003f0806 	br	d70c <_gp+0xffff15b0>
    daec:	008000c4 	movi	r2,3
    daf0:	3880b126 	beq	r7,r2,ddb8 <__divdf3+0x9b4>
    daf4:	00800044 	movi	r2,1
    daf8:	38805b1e 	bne	r7,r2,dc68 <__divdf3+0x864>
    dafc:	e009883a 	mov	r4,fp
    db00:	0005883a 	mov	r2,zero
    db04:	0021883a 	mov	r16,zero
    db08:	002b883a 	mov	r21,zero
    db0c:	003e9c06 	br	d580 <_gp+0xffff1424>
    db10:	00800434 	movhi	r2,16
    db14:	84000234 	orhi	r16,r16,8
    db18:	10bfffc4 	addi	r2,r2,-1
    db1c:	b009883a 	mov	r4,r22
    db20:	80a0703a 	and	r16,r16,r2
    db24:	003ef906 	br	d70c <_gp+0xffff15b0>
    db28:	103fca26 	beq	r2,zero,da54 <_gp+0xffff18f8>
    db2c:	b421883a 	add	r16,r22,r16
    db30:	a17fffc4 	addi	r5,r20,-1
    db34:	8580422e 	bgeu	r16,r22,dc40 <__divdf3+0x83c>
    db38:	2829883a 	mov	r20,r5
    db3c:	813fc41e 	bne	r16,r4,da50 <_gp+0xffff18f4>
    db40:	d9800017 	ldw	r6,0(sp)
    db44:	30bfc21e 	bne	r6,r2,da50 <_gp+0xffff18f4>
    db48:	003fc206 	br	da54 <_gp+0xffff18f8>
    db4c:	143ff604 	addi	r16,r2,-40
    db50:	8c20983a 	sll	r16,r17,r16
    db54:	002b883a 	mov	r21,zero
    db58:	003eb406 	br	d62c <_gp+0xffff14d0>
    db5c:	d9800215 	stw	r6,8(sp)
    db60:	d9c00515 	stw	r7,20(sp)
    db64:	da000415 	stw	r8,16(sp)
    db68:	000f3980 	call	f398 <__clzsi2>
    db6c:	10800804 	addi	r2,r2,32
    db70:	da000417 	ldw	r8,16(sp)
    db74:	d9c00517 	ldw	r7,20(sp)
    db78:	d9800217 	ldw	r6,8(sp)
    db7c:	003ea106 	br	d604 <_gp+0xffff14a8>
    db80:	147ff604 	addi	r17,r2,-40
    db84:	3462983a 	sll	r17,r6,r17
    db88:	0029883a 	mov	r20,zero
    db8c:	003ec906 	br	d6b4 <_gp+0xffff1558>
    db90:	3009883a 	mov	r4,r6
    db94:	d9400115 	stw	r5,4(sp)
    db98:	d9800215 	stw	r6,8(sp)
    db9c:	da000415 	stw	r8,16(sp)
    dba0:	da400315 	stw	r9,12(sp)
    dba4:	000f3980 	call	f398 <__clzsi2>
    dba8:	10800804 	addi	r2,r2,32
    dbac:	da400317 	ldw	r9,12(sp)
    dbb0:	da000417 	ldw	r8,16(sp)
    dbb4:	d9800217 	ldw	r6,8(sp)
    dbb8:	d9400117 	ldw	r5,4(sp)
    dbbc:	003eb306 	br	d68c <_gp+0xffff1530>
    dbc0:	d9800017 	ldw	r6,0(sp)
    dbc4:	a9ab883a 	add	r21,r21,r6
    dbc8:	a98b803a 	cmpltu	r5,r21,r6
    dbcc:	2d8b883a 	add	r5,r5,r22
    dbd0:	2a11883a 	add	r8,r5,r8
    dbd4:	897fffc4 	addi	r5,r17,-1
    dbd8:	b2000c2e 	bgeu	r22,r8,dc0c <__divdf3+0x808>
    dbdc:	41003f36 	bltu	r8,r4,dcdc <__divdf3+0x8d8>
    dbe0:	22006c26 	beq	r4,r8,dd94 <__divdf3+0x990>
    dbe4:	4109c83a 	sub	r4,r8,r4
    dbe8:	2823883a 	mov	r17,r5
    dbec:	003f3b06 	br	d8dc <_gp+0xffff1780>
    dbf0:	ad3ed336 	bltu	r21,r20,d740 <_gp+0xffff15e4>
    dbf4:	a804d07a 	srli	r2,r21,1
    dbf8:	802e97fa 	slli	r23,r16,31
    dbfc:	a82a97fa 	slli	r21,r21,31
    dc00:	8020d07a 	srli	r16,r16,1
    dc04:	b8aeb03a 	or	r23,r23,r2
    dc08:	003ed006 	br	d74c <_gp+0xffff15f0>
    dc0c:	b23ff51e 	bne	r22,r8,dbe4 <_gp+0xffff1a88>
    dc10:	d9800017 	ldw	r6,0(sp)
    dc14:	a9bff12e 	bgeu	r21,r6,dbdc <_gp+0xffff1a80>
    dc18:	b109c83a 	sub	r4,r22,r4
    dc1c:	2823883a 	mov	r17,r5
    dc20:	003f2e06 	br	d8dc <_gp+0xffff1780>
    dc24:	2021883a 	mov	r16,r4
    dc28:	003eff06 	br	d828 <_gp+0xffff16cc>
    dc2c:	2023883a 	mov	r17,r4
    dc30:	003ee406 	br	d7c4 <_gp+0xffff1668>
    dc34:	a8bfe236 	bltu	r21,r2,dbc0 <_gp+0xffff1a64>
    dc38:	0009883a 	mov	r4,zero
    dc3c:	003f2706 	br	d8dc <_gp+0xffff1780>
    dc40:	81002d36 	bltu	r16,r4,dcf8 <__divdf3+0x8f4>
    dc44:	24005626 	beq	r4,r16,dda0 <__divdf3+0x99c>
    dc48:	2829883a 	mov	r20,r5
    dc4c:	003f8006 	br	da50 <_gp+0xffff18f4>
    dc50:	053fffc4 	movi	r20,-1
    dc54:	003f7f06 	br	da54 <_gp+0xffff18f8>
    dc58:	200f883a 	mov	r7,r4
    dc5c:	003f3c06 	br	d950 <_gp+0xffff17f4>
    dc60:	1011883a 	mov	r8,r2
    dc64:	003f5506 	br	d9bc <_gp+0xffff1860>
    dc68:	e027883a 	mov	r19,fp
    dc6c:	003f7906 	br	da54 <_gp+0xffff18f8>
    dc70:	010007c4 	movi	r4,31
    dc74:	20c02816 	blt	r4,r3,dd18 <__divdf3+0x914>
    dc78:	00800804 	movi	r2,32
    dc7c:	10c5c83a 	sub	r2,r2,r3
    dc80:	888a983a 	sll	r5,r17,r2
    dc84:	a0c8d83a 	srl	r4,r20,r3
    dc88:	a084983a 	sll	r2,r20,r2
    dc8c:	88e2d83a 	srl	r17,r17,r3
    dc90:	2906b03a 	or	r3,r5,r4
    dc94:	1004c03a 	cmpne	r2,r2,zero
    dc98:	1886b03a 	or	r3,r3,r2
    dc9c:	188001cc 	andi	r2,r3,7
    dca0:	10000726 	beq	r2,zero,dcc0 <__divdf3+0x8bc>
    dca4:	188003cc 	andi	r2,r3,15
    dca8:	01000104 	movi	r4,4
    dcac:	11000426 	beq	r2,r4,dcc0 <__divdf3+0x8bc>
    dcb0:	1805883a 	mov	r2,r3
    dcb4:	10c00104 	addi	r3,r2,4
    dcb8:	1885803a 	cmpltu	r2,r3,r2
    dcbc:	88a3883a 	add	r17,r17,r2
    dcc0:	8880202c 	andhi	r2,r17,128
    dcc4:	10002926 	beq	r2,zero,dd6c <__divdf3+0x968>
    dcc8:	9900004c 	andi	r4,r19,1
    dccc:	00800044 	movi	r2,1
    dcd0:	0021883a 	mov	r16,zero
    dcd4:	002b883a 	mov	r21,zero
    dcd8:	003e2906 	br	d580 <_gp+0xffff1424>
    dcdc:	d9800017 	ldw	r6,0(sp)
    dce0:	8c7fff84 	addi	r17,r17,-2
    dce4:	a9ab883a 	add	r21,r21,r6
    dce8:	a98b803a 	cmpltu	r5,r21,r6
    dcec:	2d8b883a 	add	r5,r5,r22
    dcf0:	2a11883a 	add	r8,r5,r8
    dcf4:	003ef806 	br	d8d8 <_gp+0xffff177c>
    dcf8:	d9800017 	ldw	r6,0(sp)
    dcfc:	318f883a 	add	r7,r6,r6
    dd00:	398b803a 	cmpltu	r5,r7,r6
    dd04:	2d8d883a 	add	r6,r5,r22
    dd08:	81a1883a 	add	r16,r16,r6
    dd0c:	a17fff84 	addi	r5,r20,-2
    dd10:	d9c00015 	stw	r7,0(sp)
    dd14:	003f8806 	br	db38 <_gp+0xffff19dc>
    dd18:	013ff844 	movi	r4,-31
    dd1c:	2085c83a 	sub	r2,r4,r2
    dd20:	8888d83a 	srl	r4,r17,r2
    dd24:	00800804 	movi	r2,32
    dd28:	18802126 	beq	r3,r2,ddb0 <__divdf3+0x9ac>
    dd2c:	04001004 	movi	r16,64
    dd30:	80c7c83a 	sub	r3,r16,r3
    dd34:	88e0983a 	sll	r16,r17,r3
    dd38:	8504b03a 	or	r2,r16,r20
    dd3c:	1004c03a 	cmpne	r2,r2,zero
    dd40:	2084b03a 	or	r2,r4,r2
    dd44:	144001cc 	andi	r17,r2,7
    dd48:	88000d1e 	bne	r17,zero,dd80 <__divdf3+0x97c>
    dd4c:	0021883a 	mov	r16,zero
    dd50:	102ad0fa 	srli	r21,r2,3
    dd54:	9900004c 	andi	r4,r19,1
    dd58:	0005883a 	mov	r2,zero
    dd5c:	ac6ab03a 	or	r21,r21,r17
    dd60:	003e0706 	br	d580 <_gp+0xffff1424>
    dd64:	1007883a 	mov	r3,r2
    dd68:	0023883a 	mov	r17,zero
    dd6c:	8820927a 	slli	r16,r17,9
    dd70:	1805883a 	mov	r2,r3
    dd74:	8822977a 	slli	r17,r17,29
    dd78:	8020d33a 	srli	r16,r16,12
    dd7c:	003ff406 	br	dd50 <_gp+0xffff1bf4>
    dd80:	10c003cc 	andi	r3,r2,15
    dd84:	01000104 	movi	r4,4
    dd88:	193ff626 	beq	r3,r4,dd64 <_gp+0xffff1c08>
    dd8c:	0023883a 	mov	r17,zero
    dd90:	003fc806 	br	dcb4 <_gp+0xffff1b58>
    dd94:	a8bfd136 	bltu	r21,r2,dcdc <_gp+0xffff1b80>
    dd98:	2823883a 	mov	r17,r5
    dd9c:	003fa606 	br	dc38 <_gp+0xffff1adc>
    dda0:	d9800017 	ldw	r6,0(sp)
    dda4:	30bfd436 	bltu	r6,r2,dcf8 <_gp+0xffff1b9c>
    dda8:	2829883a 	mov	r20,r5
    ddac:	003f6406 	br	db40 <_gp+0xffff19e4>
    ddb0:	0021883a 	mov	r16,zero
    ddb4:	003fe006 	br	dd38 <_gp+0xffff1bdc>
    ddb8:	00800434 	movhi	r2,16
    ddbc:	8c000234 	orhi	r16,r17,8
    ddc0:	10bfffc4 	addi	r2,r2,-1
    ddc4:	e009883a 	mov	r4,fp
    ddc8:	80a0703a 	and	r16,r16,r2
    ddcc:	a02b883a 	mov	r21,r20
    ddd0:	003e4e06 	br	d70c <_gp+0xffff15b0>

0000ddd4 <__eqdf2>:
    ddd4:	2804d53a 	srli	r2,r5,20
    ddd8:	3806d53a 	srli	r3,r7,20
    dddc:	02000434 	movhi	r8,16
    dde0:	423fffc4 	addi	r8,r8,-1
    dde4:	1081ffcc 	andi	r2,r2,2047
    dde8:	0281ffc4 	movi	r10,2047
    ddec:	2a12703a 	and	r9,r5,r8
    ddf0:	18c1ffcc 	andi	r3,r3,2047
    ddf4:	3a10703a 	and	r8,r7,r8
    ddf8:	280ad7fa 	srli	r5,r5,31
    ddfc:	380ed7fa 	srli	r7,r7,31
    de00:	12801026 	beq	r2,r10,de44 <__eqdf2+0x70>
    de04:	0281ffc4 	movi	r10,2047
    de08:	1a800a26 	beq	r3,r10,de34 <__eqdf2+0x60>
    de0c:	10c00226 	beq	r2,r3,de18 <__eqdf2+0x44>
    de10:	00800044 	movi	r2,1
    de14:	f800283a 	ret
    de18:	4a3ffd1e 	bne	r9,r8,de10 <_gp+0xffff1cb4>
    de1c:	21bffc1e 	bne	r4,r6,de10 <_gp+0xffff1cb4>
    de20:	29c00c26 	beq	r5,r7,de54 <__eqdf2+0x80>
    de24:	103ffa1e 	bne	r2,zero,de10 <_gp+0xffff1cb4>
    de28:	2244b03a 	or	r2,r4,r9
    de2c:	1004c03a 	cmpne	r2,r2,zero
    de30:	f800283a 	ret
    de34:	3214b03a 	or	r10,r6,r8
    de38:	503ff426 	beq	r10,zero,de0c <_gp+0xffff1cb0>
    de3c:	00800044 	movi	r2,1
    de40:	f800283a 	ret
    de44:	2254b03a 	or	r10,r4,r9
    de48:	503fee26 	beq	r10,zero,de04 <_gp+0xffff1ca8>
    de4c:	00800044 	movi	r2,1
    de50:	f800283a 	ret
    de54:	0005883a 	mov	r2,zero
    de58:	f800283a 	ret

0000de5c <__gedf2>:
    de5c:	2804d53a 	srli	r2,r5,20
    de60:	3806d53a 	srli	r3,r7,20
    de64:	02000434 	movhi	r8,16
    de68:	423fffc4 	addi	r8,r8,-1
    de6c:	1081ffcc 	andi	r2,r2,2047
    de70:	0241ffc4 	movi	r9,2047
    de74:	2a14703a 	and	r10,r5,r8
    de78:	18c1ffcc 	andi	r3,r3,2047
    de7c:	3a10703a 	and	r8,r7,r8
    de80:	280ad7fa 	srli	r5,r5,31
    de84:	380ed7fa 	srli	r7,r7,31
    de88:	12401d26 	beq	r2,r9,df00 <__gedf2+0xa4>
    de8c:	0241ffc4 	movi	r9,2047
    de90:	1a401226 	beq	r3,r9,dedc <__gedf2+0x80>
    de94:	1000081e 	bne	r2,zero,deb8 <__gedf2+0x5c>
    de98:	2296b03a 	or	r11,r4,r10
    de9c:	5813003a 	cmpeq	r9,r11,zero
    dea0:	1800091e 	bne	r3,zero,dec8 <__gedf2+0x6c>
    dea4:	3218b03a 	or	r12,r6,r8
    dea8:	6000071e 	bne	r12,zero,dec8 <__gedf2+0x6c>
    deac:	0005883a 	mov	r2,zero
    deb0:	5800101e 	bne	r11,zero,def4 <__gedf2+0x98>
    deb4:	f800283a 	ret
    deb8:	18000c1e 	bne	r3,zero,deec <__gedf2+0x90>
    debc:	3212b03a 	or	r9,r6,r8
    dec0:	48000c26 	beq	r9,zero,def4 <__gedf2+0x98>
    dec4:	0013883a 	mov	r9,zero
    dec8:	39c03fcc 	andi	r7,r7,255
    decc:	48000826 	beq	r9,zero,def0 <__gedf2+0x94>
    ded0:	38000926 	beq	r7,zero,def8 <__gedf2+0x9c>
    ded4:	00800044 	movi	r2,1
    ded8:	f800283a 	ret
    dedc:	3212b03a 	or	r9,r6,r8
    dee0:	483fec26 	beq	r9,zero,de94 <_gp+0xffff1d38>
    dee4:	00bfff84 	movi	r2,-2
    dee8:	f800283a 	ret
    deec:	39c03fcc 	andi	r7,r7,255
    def0:	29c00626 	beq	r5,r7,df0c <__gedf2+0xb0>
    def4:	283ff726 	beq	r5,zero,ded4 <_gp+0xffff1d78>
    def8:	00bfffc4 	movi	r2,-1
    defc:	f800283a 	ret
    df00:	2292b03a 	or	r9,r4,r10
    df04:	483fe126 	beq	r9,zero,de8c <_gp+0xffff1d30>
    df08:	003ff606 	br	dee4 <_gp+0xffff1d88>
    df0c:	18bff916 	blt	r3,r2,def4 <_gp+0xffff1d98>
    df10:	10c00316 	blt	r2,r3,df20 <__gedf2+0xc4>
    df14:	42bff736 	bltu	r8,r10,def4 <_gp+0xffff1d98>
    df18:	52000326 	beq	r10,r8,df28 <__gedf2+0xcc>
    df1c:	5200042e 	bgeu	r10,r8,df30 <__gedf2+0xd4>
    df20:	283fec1e 	bne	r5,zero,ded4 <_gp+0xffff1d78>
    df24:	003ff406 	br	def8 <_gp+0xffff1d9c>
    df28:	313ff236 	bltu	r6,r4,def4 <_gp+0xffff1d98>
    df2c:	21bffc36 	bltu	r4,r6,df20 <_gp+0xffff1dc4>
    df30:	0005883a 	mov	r2,zero
    df34:	f800283a 	ret

0000df38 <__ledf2>:
    df38:	2804d53a 	srli	r2,r5,20
    df3c:	3810d53a 	srli	r8,r7,20
    df40:	00c00434 	movhi	r3,16
    df44:	18ffffc4 	addi	r3,r3,-1
    df48:	1081ffcc 	andi	r2,r2,2047
    df4c:	0241ffc4 	movi	r9,2047
    df50:	28d4703a 	and	r10,r5,r3
    df54:	4201ffcc 	andi	r8,r8,2047
    df58:	38c6703a 	and	r3,r7,r3
    df5c:	280ad7fa 	srli	r5,r5,31
    df60:	380ed7fa 	srli	r7,r7,31
    df64:	12401f26 	beq	r2,r9,dfe4 <__ledf2+0xac>
    df68:	0241ffc4 	movi	r9,2047
    df6c:	42401426 	beq	r8,r9,dfc0 <__ledf2+0x88>
    df70:	1000091e 	bne	r2,zero,df98 <__ledf2+0x60>
    df74:	2296b03a 	or	r11,r4,r10
    df78:	5813003a 	cmpeq	r9,r11,zero
    df7c:	29403fcc 	andi	r5,r5,255
    df80:	40000a1e 	bne	r8,zero,dfac <__ledf2+0x74>
    df84:	30d8b03a 	or	r12,r6,r3
    df88:	6000081e 	bne	r12,zero,dfac <__ledf2+0x74>
    df8c:	0005883a 	mov	r2,zero
    df90:	5800111e 	bne	r11,zero,dfd8 <__ledf2+0xa0>
    df94:	f800283a 	ret
    df98:	29403fcc 	andi	r5,r5,255
    df9c:	40000c1e 	bne	r8,zero,dfd0 <__ledf2+0x98>
    dfa0:	30d2b03a 	or	r9,r6,r3
    dfa4:	48000c26 	beq	r9,zero,dfd8 <__ledf2+0xa0>
    dfa8:	0013883a 	mov	r9,zero
    dfac:	39c03fcc 	andi	r7,r7,255
    dfb0:	48000826 	beq	r9,zero,dfd4 <__ledf2+0x9c>
    dfb4:	38001126 	beq	r7,zero,dffc <__ledf2+0xc4>
    dfb8:	00800044 	movi	r2,1
    dfbc:	f800283a 	ret
    dfc0:	30d2b03a 	or	r9,r6,r3
    dfc4:	483fea26 	beq	r9,zero,df70 <_gp+0xffff1e14>
    dfc8:	00800084 	movi	r2,2
    dfcc:	f800283a 	ret
    dfd0:	39c03fcc 	andi	r7,r7,255
    dfd4:	39400726 	beq	r7,r5,dff4 <__ledf2+0xbc>
    dfd8:	2800081e 	bne	r5,zero,dffc <__ledf2+0xc4>
    dfdc:	00800044 	movi	r2,1
    dfe0:	f800283a 	ret
    dfe4:	2292b03a 	or	r9,r4,r10
    dfe8:	483fdf26 	beq	r9,zero,df68 <_gp+0xffff1e0c>
    dfec:	00800084 	movi	r2,2
    dff0:	f800283a 	ret
    dff4:	4080030e 	bge	r8,r2,e004 <__ledf2+0xcc>
    dff8:	383fef26 	beq	r7,zero,dfb8 <_gp+0xffff1e5c>
    dffc:	00bfffc4 	movi	r2,-1
    e000:	f800283a 	ret
    e004:	123feb16 	blt	r2,r8,dfb4 <_gp+0xffff1e58>
    e008:	1abff336 	bltu	r3,r10,dfd8 <_gp+0xffff1e7c>
    e00c:	50c00326 	beq	r10,r3,e01c <__ledf2+0xe4>
    e010:	50c0042e 	bgeu	r10,r3,e024 <__ledf2+0xec>
    e014:	283fe81e 	bne	r5,zero,dfb8 <_gp+0xffff1e5c>
    e018:	003ff806 	br	dffc <_gp+0xffff1ea0>
    e01c:	313fee36 	bltu	r6,r4,dfd8 <_gp+0xffff1e7c>
    e020:	21bffc36 	bltu	r4,r6,e014 <_gp+0xffff1eb8>
    e024:	0005883a 	mov	r2,zero
    e028:	f800283a 	ret

0000e02c <__muldf3>:
    e02c:	deffee04 	addi	sp,sp,-72
    e030:	dd000c15 	stw	r20,48(sp)
    e034:	2828d53a 	srli	r20,r5,20
    e038:	ddc00f15 	stw	r23,60(sp)
    e03c:	282ed7fa 	srli	r23,r5,31
    e040:	dc000815 	stw	r16,32(sp)
    e044:	04000434 	movhi	r16,16
    e048:	dcc00b15 	stw	r19,44(sp)
    e04c:	843fffc4 	addi	r16,r16,-1
    e050:	dfc01115 	stw	ra,68(sp)
    e054:	df001015 	stw	fp,64(sp)
    e058:	dd800e15 	stw	r22,56(sp)
    e05c:	dd400d15 	stw	r21,52(sp)
    e060:	dc800a15 	stw	r18,40(sp)
    e064:	dc400915 	stw	r17,36(sp)
    e068:	a501ffcc 	andi	r20,r20,2047
    e06c:	2c20703a 	and	r16,r5,r16
    e070:	b827883a 	mov	r19,r23
    e074:	ba403fcc 	andi	r9,r23,255
    e078:	a0006026 	beq	r20,zero,e1fc <__muldf3+0x1d0>
    e07c:	0081ffc4 	movi	r2,2047
    e080:	202d883a 	mov	r22,r4
    e084:	a0803626 	beq	r20,r2,e160 <__muldf3+0x134>
    e088:	84000434 	orhi	r16,r16,16
    e08c:	200ad77a 	srli	r5,r4,29
    e090:	800490fa 	slli	r2,r16,3
    e094:	202c90fa 	slli	r22,r4,3
    e098:	a53f0044 	addi	r20,r20,-1023
    e09c:	28a0b03a 	or	r16,r5,r2
    e0a0:	002b883a 	mov	r21,zero
    e0a4:	000b883a 	mov	r5,zero
    e0a8:	3804d53a 	srli	r2,r7,20
    e0ac:	3838d7fa 	srli	fp,r7,31
    e0b0:	04400434 	movhi	r17,16
    e0b4:	8c7fffc4 	addi	r17,r17,-1
    e0b8:	1081ffcc 	andi	r2,r2,2047
    e0bc:	3025883a 	mov	r18,r6
    e0c0:	3c62703a 	and	r17,r7,r17
    e0c4:	e2803fcc 	andi	r10,fp,255
    e0c8:	10006d26 	beq	r2,zero,e280 <__muldf3+0x254>
    e0cc:	00c1ffc4 	movi	r3,2047
    e0d0:	10c06526 	beq	r2,r3,e268 <__muldf3+0x23c>
    e0d4:	8c400434 	orhi	r17,r17,16
    e0d8:	300ed77a 	srli	r7,r6,29
    e0dc:	880690fa 	slli	r3,r17,3
    e0e0:	302490fa 	slli	r18,r6,3
    e0e4:	10bf0044 	addi	r2,r2,-1023
    e0e8:	38e2b03a 	or	r17,r7,r3
    e0ec:	000f883a 	mov	r7,zero
    e0f0:	a087883a 	add	r3,r20,r2
    e0f4:	010003c4 	movi	r4,15
    e0f8:	3d44b03a 	or	r2,r7,r21
    e0fc:	e5ccf03a 	xor	r6,fp,r23
    e100:	1a000044 	addi	r8,r3,1
    e104:	20809b36 	bltu	r4,r2,e374 <__muldf3+0x348>
    e108:	100490ba 	slli	r2,r2,2
    e10c:	01000074 	movhi	r4,1
    e110:	21384804 	addi	r4,r4,-7904
    e114:	1105883a 	add	r2,r2,r4
    e118:	10800017 	ldw	r2,0(r2)
    e11c:	1000683a 	jmp	r2
    e120:	0000e374 	movhi	zero,909
    e124:	0000e180 	call	e18 <main+0x9c4>
    e128:	0000e180 	call	e18 <main+0x9c4>
    e12c:	0000e17c 	xorhi	zero,zero,901
    e130:	0000e350 	cmplti	zero,zero,909
    e134:	0000e350 	cmplti	zero,zero,909
    e138:	0000e338 	rdprs	zero,zero,908
    e13c:	0000e17c 	xorhi	zero,zero,901
    e140:	0000e350 	cmplti	zero,zero,909
    e144:	0000e338 	rdprs	zero,zero,908
    e148:	0000e350 	cmplti	zero,zero,909
    e14c:	0000e17c 	xorhi	zero,zero,901
    e150:	0000e360 	cmpeqi	zero,zero,909
    e154:	0000e360 	cmpeqi	zero,zero,909
    e158:	0000e360 	cmpeqi	zero,zero,909
    e15c:	0000e6c0 	call	e6c <main+0xa18>
    e160:	2404b03a 	or	r2,r4,r16
    e164:	1000711e 	bne	r2,zero,e32c <__muldf3+0x300>
    e168:	05400204 	movi	r21,8
    e16c:	0021883a 	mov	r16,zero
    e170:	002d883a 	mov	r22,zero
    e174:	01400084 	movi	r5,2
    e178:	003fcb06 	br	e0a8 <_gp+0xffff1f4c>
    e17c:	500d883a 	mov	r6,r10
    e180:	00800084 	movi	r2,2
    e184:	38805926 	beq	r7,r2,e2ec <__muldf3+0x2c0>
    e188:	008000c4 	movi	r2,3
    e18c:	3881bb26 	beq	r7,r2,e87c <__muldf3+0x850>
    e190:	00800044 	movi	r2,1
    e194:	3881961e 	bne	r7,r2,e7f0 <__muldf3+0x7c4>
    e198:	3027883a 	mov	r19,r6
    e19c:	0005883a 	mov	r2,zero
    e1a0:	0021883a 	mov	r16,zero
    e1a4:	002d883a 	mov	r22,zero
    e1a8:	1004953a 	slli	r2,r2,20
    e1ac:	98c03fcc 	andi	r3,r19,255
    e1b0:	04400434 	movhi	r17,16
    e1b4:	8c7fffc4 	addi	r17,r17,-1
    e1b8:	180697fa 	slli	r3,r3,31
    e1bc:	8460703a 	and	r16,r16,r17
    e1c0:	80a0b03a 	or	r16,r16,r2
    e1c4:	80c6b03a 	or	r3,r16,r3
    e1c8:	b005883a 	mov	r2,r22
    e1cc:	dfc01117 	ldw	ra,68(sp)
    e1d0:	df001017 	ldw	fp,64(sp)
    e1d4:	ddc00f17 	ldw	r23,60(sp)
    e1d8:	dd800e17 	ldw	r22,56(sp)
    e1dc:	dd400d17 	ldw	r21,52(sp)
    e1e0:	dd000c17 	ldw	r20,48(sp)
    e1e4:	dcc00b17 	ldw	r19,44(sp)
    e1e8:	dc800a17 	ldw	r18,40(sp)
    e1ec:	dc400917 	ldw	r17,36(sp)
    e1f0:	dc000817 	ldw	r16,32(sp)
    e1f4:	dec01204 	addi	sp,sp,72
    e1f8:	f800283a 	ret
    e1fc:	2404b03a 	or	r2,r4,r16
    e200:	202b883a 	mov	r21,r4
    e204:	10004426 	beq	r2,zero,e318 <__muldf3+0x2ec>
    e208:	80015126 	beq	r16,zero,e750 <__muldf3+0x724>
    e20c:	8009883a 	mov	r4,r16
    e210:	d9800715 	stw	r6,28(sp)
    e214:	d9c00215 	stw	r7,8(sp)
    e218:	da400415 	stw	r9,16(sp)
    e21c:	000f3980 	call	f398 <__clzsi2>
    e220:	d9800717 	ldw	r6,28(sp)
    e224:	d9c00217 	ldw	r7,8(sp)
    e228:	da400417 	ldw	r9,16(sp)
    e22c:	113ffd44 	addi	r4,r2,-11
    e230:	00c00704 	movi	r3,28
    e234:	19014216 	blt	r3,r4,e740 <__muldf3+0x714>
    e238:	00c00744 	movi	r3,29
    e23c:	15bffe04 	addi	r22,r2,-8
    e240:	1907c83a 	sub	r3,r3,r4
    e244:	85a0983a 	sll	r16,r16,r22
    e248:	a8c6d83a 	srl	r3,r21,r3
    e24c:	adac983a 	sll	r22,r21,r22
    e250:	1c20b03a 	or	r16,r3,r16
    e254:	1080fcc4 	addi	r2,r2,1011
    e258:	00a9c83a 	sub	r20,zero,r2
    e25c:	002b883a 	mov	r21,zero
    e260:	000b883a 	mov	r5,zero
    e264:	003f9006 	br	e0a8 <_gp+0xffff1f4c>
    e268:	3446b03a 	or	r3,r6,r17
    e26c:	1800281e 	bne	r3,zero,e310 <__muldf3+0x2e4>
    e270:	0023883a 	mov	r17,zero
    e274:	0025883a 	mov	r18,zero
    e278:	01c00084 	movi	r7,2
    e27c:	003f9c06 	br	e0f0 <_gp+0xffff1f94>
    e280:	3446b03a 	or	r3,r6,r17
    e284:	18001e26 	beq	r3,zero,e300 <__muldf3+0x2d4>
    e288:	88012126 	beq	r17,zero,e710 <__muldf3+0x6e4>
    e28c:	8809883a 	mov	r4,r17
    e290:	d9400215 	stw	r5,8(sp)
    e294:	d9800715 	stw	r6,28(sp)
    e298:	da400415 	stw	r9,16(sp)
    e29c:	da800315 	stw	r10,12(sp)
    e2a0:	000f3980 	call	f398 <__clzsi2>
    e2a4:	d9400217 	ldw	r5,8(sp)
    e2a8:	d9800717 	ldw	r6,28(sp)
    e2ac:	da400417 	ldw	r9,16(sp)
    e2b0:	da800317 	ldw	r10,12(sp)
    e2b4:	113ffd44 	addi	r4,r2,-11
    e2b8:	00c00704 	movi	r3,28
    e2bc:	19011016 	blt	r3,r4,e700 <__muldf3+0x6d4>
    e2c0:	00c00744 	movi	r3,29
    e2c4:	14bffe04 	addi	r18,r2,-8
    e2c8:	1907c83a 	sub	r3,r3,r4
    e2cc:	8ca2983a 	sll	r17,r17,r18
    e2d0:	30c6d83a 	srl	r3,r6,r3
    e2d4:	34a4983a 	sll	r18,r6,r18
    e2d8:	1c62b03a 	or	r17,r3,r17
    e2dc:	1080fcc4 	addi	r2,r2,1011
    e2e0:	0085c83a 	sub	r2,zero,r2
    e2e4:	000f883a 	mov	r7,zero
    e2e8:	003f8106 	br	e0f0 <_gp+0xffff1f94>
    e2ec:	3027883a 	mov	r19,r6
    e2f0:	0081ffc4 	movi	r2,2047
    e2f4:	0021883a 	mov	r16,zero
    e2f8:	002d883a 	mov	r22,zero
    e2fc:	003faa06 	br	e1a8 <_gp+0xffff204c>
    e300:	0023883a 	mov	r17,zero
    e304:	0025883a 	mov	r18,zero
    e308:	01c00044 	movi	r7,1
    e30c:	003f7806 	br	e0f0 <_gp+0xffff1f94>
    e310:	01c000c4 	movi	r7,3
    e314:	003f7606 	br	e0f0 <_gp+0xffff1f94>
    e318:	05400104 	movi	r21,4
    e31c:	0021883a 	mov	r16,zero
    e320:	002d883a 	mov	r22,zero
    e324:	01400044 	movi	r5,1
    e328:	003f5f06 	br	e0a8 <_gp+0xffff1f4c>
    e32c:	05400304 	movi	r21,12
    e330:	014000c4 	movi	r5,3
    e334:	003f5c06 	br	e0a8 <_gp+0xffff1f4c>
    e338:	04000434 	movhi	r16,16
    e33c:	0027883a 	mov	r19,zero
    e340:	843fffc4 	addi	r16,r16,-1
    e344:	05bfffc4 	movi	r22,-1
    e348:	0081ffc4 	movi	r2,2047
    e34c:	003f9606 	br	e1a8 <_gp+0xffff204c>
    e350:	8023883a 	mov	r17,r16
    e354:	b025883a 	mov	r18,r22
    e358:	280f883a 	mov	r7,r5
    e35c:	003f8806 	br	e180 <_gp+0xffff2024>
    e360:	8023883a 	mov	r17,r16
    e364:	b025883a 	mov	r18,r22
    e368:	480d883a 	mov	r6,r9
    e36c:	280f883a 	mov	r7,r5
    e370:	003f8306 	br	e180 <_gp+0xffff2024>
    e374:	b026d43a 	srli	r19,r22,16
    e378:	902ed43a 	srli	r23,r18,16
    e37c:	b5bfffcc 	andi	r22,r22,65535
    e380:	94bfffcc 	andi	r18,r18,65535
    e384:	b00b883a 	mov	r5,r22
    e388:	9009883a 	mov	r4,r18
    e38c:	d8c00515 	stw	r3,20(sp)
    e390:	d9800715 	stw	r6,28(sp)
    e394:	da000615 	stw	r8,24(sp)
    e398:	000cb300 	call	cb30 <__mulsi3>
    e39c:	980b883a 	mov	r5,r19
    e3a0:	9009883a 	mov	r4,r18
    e3a4:	1029883a 	mov	r20,r2
    e3a8:	000cb300 	call	cb30 <__mulsi3>
    e3ac:	b80b883a 	mov	r5,r23
    e3b0:	9809883a 	mov	r4,r19
    e3b4:	102b883a 	mov	r21,r2
    e3b8:	000cb300 	call	cb30 <__mulsi3>
    e3bc:	b809883a 	mov	r4,r23
    e3c0:	b00b883a 	mov	r5,r22
    e3c4:	1039883a 	mov	fp,r2
    e3c8:	000cb300 	call	cb30 <__mulsi3>
    e3cc:	a008d43a 	srli	r4,r20,16
    e3d0:	1545883a 	add	r2,r2,r21
    e3d4:	d8c00517 	ldw	r3,20(sp)
    e3d8:	2085883a 	add	r2,r4,r2
    e3dc:	d9800717 	ldw	r6,28(sp)
    e3e0:	da000617 	ldw	r8,24(sp)
    e3e4:	1540022e 	bgeu	r2,r21,e3f0 <__muldf3+0x3c4>
    e3e8:	01000074 	movhi	r4,1
    e3ec:	e139883a 	add	fp,fp,r4
    e3f0:	100e943a 	slli	r7,r2,16
    e3f4:	1004d43a 	srli	r2,r2,16
    e3f8:	882ad43a 	srli	r21,r17,16
    e3fc:	a53fffcc 	andi	r20,r20,65535
    e400:	8c7fffcc 	andi	r17,r17,65535
    e404:	3d29883a 	add	r20,r7,r20
    e408:	b00b883a 	mov	r5,r22
    e40c:	8809883a 	mov	r4,r17
    e410:	d8c00515 	stw	r3,20(sp)
    e414:	d9800715 	stw	r6,28(sp)
    e418:	da000615 	stw	r8,24(sp)
    e41c:	dd000115 	stw	r20,4(sp)
    e420:	d8800015 	stw	r2,0(sp)
    e424:	000cb300 	call	cb30 <__mulsi3>
    e428:	980b883a 	mov	r5,r19
    e42c:	8809883a 	mov	r4,r17
    e430:	d8800215 	stw	r2,8(sp)
    e434:	000cb300 	call	cb30 <__mulsi3>
    e438:	9809883a 	mov	r4,r19
    e43c:	a80b883a 	mov	r5,r21
    e440:	1029883a 	mov	r20,r2
    e444:	000cb300 	call	cb30 <__mulsi3>
    e448:	b00b883a 	mov	r5,r22
    e44c:	a809883a 	mov	r4,r21
    e450:	d8800415 	stw	r2,16(sp)
    e454:	000cb300 	call	cb30 <__mulsi3>
    e458:	d9c00217 	ldw	r7,8(sp)
    e45c:	1505883a 	add	r2,r2,r20
    e460:	d8c00517 	ldw	r3,20(sp)
    e464:	3826d43a 	srli	r19,r7,16
    e468:	d9800717 	ldw	r6,28(sp)
    e46c:	da000617 	ldw	r8,24(sp)
    e470:	9885883a 	add	r2,r19,r2
    e474:	da400417 	ldw	r9,16(sp)
    e478:	1500022e 	bgeu	r2,r20,e484 <__muldf3+0x458>
    e47c:	01000074 	movhi	r4,1
    e480:	4913883a 	add	r9,r9,r4
    e484:	1028d43a 	srli	r20,r2,16
    e488:	1004943a 	slli	r2,r2,16
    e48c:	802cd43a 	srli	r22,r16,16
    e490:	843fffcc 	andi	r16,r16,65535
    e494:	3cffffcc 	andi	r19,r7,65535
    e498:	9009883a 	mov	r4,r18
    e49c:	800b883a 	mov	r5,r16
    e4a0:	a269883a 	add	r20,r20,r9
    e4a4:	d8c00515 	stw	r3,20(sp)
    e4a8:	d9800715 	stw	r6,28(sp)
    e4ac:	da000615 	stw	r8,24(sp)
    e4b0:	14e7883a 	add	r19,r2,r19
    e4b4:	000cb300 	call	cb30 <__mulsi3>
    e4b8:	9009883a 	mov	r4,r18
    e4bc:	b00b883a 	mov	r5,r22
    e4c0:	d8800315 	stw	r2,12(sp)
    e4c4:	000cb300 	call	cb30 <__mulsi3>
    e4c8:	b809883a 	mov	r4,r23
    e4cc:	b00b883a 	mov	r5,r22
    e4d0:	d8800215 	stw	r2,8(sp)
    e4d4:	000cb300 	call	cb30 <__mulsi3>
    e4d8:	b80b883a 	mov	r5,r23
    e4dc:	8009883a 	mov	r4,r16
    e4e0:	d8800415 	stw	r2,16(sp)
    e4e4:	000cb300 	call	cb30 <__mulsi3>
    e4e8:	da800317 	ldw	r10,12(sp)
    e4ec:	d9c00217 	ldw	r7,8(sp)
    e4f0:	d9000017 	ldw	r4,0(sp)
    e4f4:	502ed43a 	srli	r23,r10,16
    e4f8:	11c5883a 	add	r2,r2,r7
    e4fc:	24e5883a 	add	r18,r4,r19
    e500:	b885883a 	add	r2,r23,r2
    e504:	d8c00517 	ldw	r3,20(sp)
    e508:	d9800717 	ldw	r6,28(sp)
    e50c:	da000617 	ldw	r8,24(sp)
    e510:	da400417 	ldw	r9,16(sp)
    e514:	11c0022e 	bgeu	r2,r7,e520 <__muldf3+0x4f4>
    e518:	01000074 	movhi	r4,1
    e51c:	4913883a 	add	r9,r9,r4
    e520:	100ed43a 	srli	r7,r2,16
    e524:	1004943a 	slli	r2,r2,16
    e528:	55ffffcc 	andi	r23,r10,65535
    e52c:	3a53883a 	add	r9,r7,r9
    e530:	8809883a 	mov	r4,r17
    e534:	800b883a 	mov	r5,r16
    e538:	d8c00515 	stw	r3,20(sp)
    e53c:	d9800715 	stw	r6,28(sp)
    e540:	da000615 	stw	r8,24(sp)
    e544:	da400415 	stw	r9,16(sp)
    e548:	15ef883a 	add	r23,r2,r23
    e54c:	000cb300 	call	cb30 <__mulsi3>
    e550:	8809883a 	mov	r4,r17
    e554:	b00b883a 	mov	r5,r22
    e558:	d8800215 	stw	r2,8(sp)
    e55c:	000cb300 	call	cb30 <__mulsi3>
    e560:	b00b883a 	mov	r5,r22
    e564:	a809883a 	mov	r4,r21
    e568:	d8800315 	stw	r2,12(sp)
    e56c:	000cb300 	call	cb30 <__mulsi3>
    e570:	8009883a 	mov	r4,r16
    e574:	a80b883a 	mov	r5,r21
    e578:	1023883a 	mov	r17,r2
    e57c:	000cb300 	call	cb30 <__mulsi3>
    e580:	d9c00217 	ldw	r7,8(sp)
    e584:	da800317 	ldw	r10,12(sp)
    e588:	d8c00517 	ldw	r3,20(sp)
    e58c:	3808d43a 	srli	r4,r7,16
    e590:	1285883a 	add	r2,r2,r10
    e594:	d9800717 	ldw	r6,28(sp)
    e598:	2085883a 	add	r2,r4,r2
    e59c:	da000617 	ldw	r8,24(sp)
    e5a0:	da400417 	ldw	r9,16(sp)
    e5a4:	1280022e 	bgeu	r2,r10,e5b0 <__muldf3+0x584>
    e5a8:	01000074 	movhi	r4,1
    e5ac:	8923883a 	add	r17,r17,r4
    e5b0:	1008943a 	slli	r4,r2,16
    e5b4:	39ffffcc 	andi	r7,r7,65535
    e5b8:	e4b9883a 	add	fp,fp,r18
    e5bc:	21cf883a 	add	r7,r4,r7
    e5c0:	e4e7803a 	cmpltu	r19,fp,r19
    e5c4:	3d0f883a 	add	r7,r7,r20
    e5c8:	bf39883a 	add	fp,r23,fp
    e5cc:	99c9883a 	add	r4,r19,r7
    e5d0:	e5ef803a 	cmpltu	r23,fp,r23
    e5d4:	490b883a 	add	r5,r9,r4
    e5d8:	1004d43a 	srli	r2,r2,16
    e5dc:	b965883a 	add	r18,r23,r5
    e5e0:	24c9803a 	cmpltu	r4,r4,r19
    e5e4:	3d29803a 	cmpltu	r20,r7,r20
    e5e8:	a128b03a 	or	r20,r20,r4
    e5ec:	95ef803a 	cmpltu	r23,r18,r23
    e5f0:	2a53803a 	cmpltu	r9,r5,r9
    e5f4:	a0a9883a 	add	r20,r20,r2
    e5f8:	4deeb03a 	or	r23,r9,r23
    e5fc:	a5ef883a 	add	r23,r20,r23
    e600:	bc63883a 	add	r17,r23,r17
    e604:	e004927a 	slli	r2,fp,9
    e608:	d9000117 	ldw	r4,4(sp)
    e60c:	882e927a 	slli	r23,r17,9
    e610:	9022d5fa 	srli	r17,r18,23
    e614:	e038d5fa 	srli	fp,fp,23
    e618:	1104b03a 	or	r2,r2,r4
    e61c:	9024927a 	slli	r18,r18,9
    e620:	1004c03a 	cmpne	r2,r2,zero
    e624:	bc62b03a 	or	r17,r23,r17
    e628:	1738b03a 	or	fp,r2,fp
    e62c:	8880402c 	andhi	r2,r17,256
    e630:	e4a4b03a 	or	r18,fp,r18
    e634:	10000726 	beq	r2,zero,e654 <__muldf3+0x628>
    e638:	9006d07a 	srli	r3,r18,1
    e63c:	880497fa 	slli	r2,r17,31
    e640:	9480004c 	andi	r18,r18,1
    e644:	8822d07a 	srli	r17,r17,1
    e648:	1ca4b03a 	or	r18,r3,r18
    e64c:	14a4b03a 	or	r18,r2,r18
    e650:	4007883a 	mov	r3,r8
    e654:	1880ffc4 	addi	r2,r3,1023
    e658:	0080460e 	bge	zero,r2,e774 <__muldf3+0x748>
    e65c:	910001cc 	andi	r4,r18,7
    e660:	20000726 	beq	r4,zero,e680 <__muldf3+0x654>
    e664:	910003cc 	andi	r4,r18,15
    e668:	01400104 	movi	r5,4
    e66c:	21400426 	beq	r4,r5,e680 <__muldf3+0x654>
    e670:	9149883a 	add	r4,r18,r5
    e674:	24a5803a 	cmpltu	r18,r4,r18
    e678:	8ca3883a 	add	r17,r17,r18
    e67c:	2025883a 	mov	r18,r4
    e680:	8900402c 	andhi	r4,r17,256
    e684:	20000426 	beq	r4,zero,e698 <__muldf3+0x66c>
    e688:	18810004 	addi	r2,r3,1024
    e68c:	00ffc034 	movhi	r3,65280
    e690:	18ffffc4 	addi	r3,r3,-1
    e694:	88e2703a 	and	r17,r17,r3
    e698:	00c1ff84 	movi	r3,2046
    e69c:	18bf1316 	blt	r3,r2,e2ec <_gp+0xffff2190>
    e6a0:	882c977a 	slli	r22,r17,29
    e6a4:	9024d0fa 	srli	r18,r18,3
    e6a8:	8822927a 	slli	r17,r17,9
    e6ac:	1081ffcc 	andi	r2,r2,2047
    e6b0:	b4acb03a 	or	r22,r22,r18
    e6b4:	8820d33a 	srli	r16,r17,12
    e6b8:	3027883a 	mov	r19,r6
    e6bc:	003eba06 	br	e1a8 <_gp+0xffff204c>
    e6c0:	8080022c 	andhi	r2,r16,8
    e6c4:	10000926 	beq	r2,zero,e6ec <__muldf3+0x6c0>
    e6c8:	8880022c 	andhi	r2,r17,8
    e6cc:	1000071e 	bne	r2,zero,e6ec <__muldf3+0x6c0>
    e6d0:	00800434 	movhi	r2,16
    e6d4:	8c000234 	orhi	r16,r17,8
    e6d8:	10bfffc4 	addi	r2,r2,-1
    e6dc:	e027883a 	mov	r19,fp
    e6e0:	80a0703a 	and	r16,r16,r2
    e6e4:	902d883a 	mov	r22,r18
    e6e8:	003f1706 	br	e348 <_gp+0xffff21ec>
    e6ec:	00800434 	movhi	r2,16
    e6f0:	84000234 	orhi	r16,r16,8
    e6f4:	10bfffc4 	addi	r2,r2,-1
    e6f8:	80a0703a 	and	r16,r16,r2
    e6fc:	003f1206 	br	e348 <_gp+0xffff21ec>
    e700:	147ff604 	addi	r17,r2,-40
    e704:	3462983a 	sll	r17,r6,r17
    e708:	0025883a 	mov	r18,zero
    e70c:	003ef306 	br	e2dc <_gp+0xffff2180>
    e710:	3009883a 	mov	r4,r6
    e714:	d9400215 	stw	r5,8(sp)
    e718:	d9800715 	stw	r6,28(sp)
    e71c:	da400415 	stw	r9,16(sp)
    e720:	da800315 	stw	r10,12(sp)
    e724:	000f3980 	call	f398 <__clzsi2>
    e728:	10800804 	addi	r2,r2,32
    e72c:	da800317 	ldw	r10,12(sp)
    e730:	da400417 	ldw	r9,16(sp)
    e734:	d9800717 	ldw	r6,28(sp)
    e738:	d9400217 	ldw	r5,8(sp)
    e73c:	003edd06 	br	e2b4 <_gp+0xffff2158>
    e740:	143ff604 	addi	r16,r2,-40
    e744:	ac20983a 	sll	r16,r21,r16
    e748:	002d883a 	mov	r22,zero
    e74c:	003ec106 	br	e254 <_gp+0xffff20f8>
    e750:	d9800715 	stw	r6,28(sp)
    e754:	d9c00215 	stw	r7,8(sp)
    e758:	da400415 	stw	r9,16(sp)
    e75c:	000f3980 	call	f398 <__clzsi2>
    e760:	10800804 	addi	r2,r2,32
    e764:	da400417 	ldw	r9,16(sp)
    e768:	d9c00217 	ldw	r7,8(sp)
    e76c:	d9800717 	ldw	r6,28(sp)
    e770:	003eae06 	br	e22c <_gp+0xffff20d0>
    e774:	00c00044 	movi	r3,1
    e778:	1887c83a 	sub	r3,r3,r2
    e77c:	01000e04 	movi	r4,56
    e780:	20fe8516 	blt	r4,r3,e198 <_gp+0xffff203c>
    e784:	010007c4 	movi	r4,31
    e788:	20c01b16 	blt	r4,r3,e7f8 <__muldf3+0x7cc>
    e78c:	00800804 	movi	r2,32
    e790:	10c5c83a 	sub	r2,r2,r3
    e794:	888a983a 	sll	r5,r17,r2
    e798:	90c8d83a 	srl	r4,r18,r3
    e79c:	9084983a 	sll	r2,r18,r2
    e7a0:	88e2d83a 	srl	r17,r17,r3
    e7a4:	2906b03a 	or	r3,r5,r4
    e7a8:	1004c03a 	cmpne	r2,r2,zero
    e7ac:	1886b03a 	or	r3,r3,r2
    e7b0:	188001cc 	andi	r2,r3,7
    e7b4:	10000726 	beq	r2,zero,e7d4 <__muldf3+0x7a8>
    e7b8:	188003cc 	andi	r2,r3,15
    e7bc:	01000104 	movi	r4,4
    e7c0:	11000426 	beq	r2,r4,e7d4 <__muldf3+0x7a8>
    e7c4:	1805883a 	mov	r2,r3
    e7c8:	10c00104 	addi	r3,r2,4
    e7cc:	1885803a 	cmpltu	r2,r3,r2
    e7d0:	88a3883a 	add	r17,r17,r2
    e7d4:	8880202c 	andhi	r2,r17,128
    e7d8:	10001c26 	beq	r2,zero,e84c <__muldf3+0x820>
    e7dc:	3027883a 	mov	r19,r6
    e7e0:	00800044 	movi	r2,1
    e7e4:	0021883a 	mov	r16,zero
    e7e8:	002d883a 	mov	r22,zero
    e7ec:	003e6e06 	br	e1a8 <_gp+0xffff204c>
    e7f0:	4007883a 	mov	r3,r8
    e7f4:	003f9706 	br	e654 <_gp+0xffff24f8>
    e7f8:	017ff844 	movi	r5,-31
    e7fc:	2885c83a 	sub	r2,r5,r2
    e800:	888ad83a 	srl	r5,r17,r2
    e804:	00800804 	movi	r2,32
    e808:	18801a26 	beq	r3,r2,e874 <__muldf3+0x848>
    e80c:	01001004 	movi	r4,64
    e810:	20c7c83a 	sub	r3,r4,r3
    e814:	88e2983a 	sll	r17,r17,r3
    e818:	8ca4b03a 	or	r18,r17,r18
    e81c:	9004c03a 	cmpne	r2,r18,zero
    e820:	2884b03a 	or	r2,r5,r2
    e824:	144001cc 	andi	r17,r2,7
    e828:	88000d1e 	bne	r17,zero,e860 <__muldf3+0x834>
    e82c:	0021883a 	mov	r16,zero
    e830:	102cd0fa 	srli	r22,r2,3
    e834:	3027883a 	mov	r19,r6
    e838:	0005883a 	mov	r2,zero
    e83c:	b46cb03a 	or	r22,r22,r17
    e840:	003e5906 	br	e1a8 <_gp+0xffff204c>
    e844:	1007883a 	mov	r3,r2
    e848:	0023883a 	mov	r17,zero
    e84c:	8820927a 	slli	r16,r17,9
    e850:	1805883a 	mov	r2,r3
    e854:	8822977a 	slli	r17,r17,29
    e858:	8020d33a 	srli	r16,r16,12
    e85c:	003ff406 	br	e830 <_gp+0xffff26d4>
    e860:	10c003cc 	andi	r3,r2,15
    e864:	01000104 	movi	r4,4
    e868:	193ff626 	beq	r3,r4,e844 <_gp+0xffff26e8>
    e86c:	0023883a 	mov	r17,zero
    e870:	003fd506 	br	e7c8 <_gp+0xffff266c>
    e874:	0023883a 	mov	r17,zero
    e878:	003fe706 	br	e818 <_gp+0xffff26bc>
    e87c:	00800434 	movhi	r2,16
    e880:	8c000234 	orhi	r16,r17,8
    e884:	10bfffc4 	addi	r2,r2,-1
    e888:	3027883a 	mov	r19,r6
    e88c:	80a0703a 	and	r16,r16,r2
    e890:	902d883a 	mov	r22,r18
    e894:	003eac06 	br	e348 <_gp+0xffff21ec>

0000e898 <__subdf3>:
    e898:	02000434 	movhi	r8,16
    e89c:	423fffc4 	addi	r8,r8,-1
    e8a0:	defffb04 	addi	sp,sp,-20
    e8a4:	2a14703a 	and	r10,r5,r8
    e8a8:	3812d53a 	srli	r9,r7,20
    e8ac:	3a10703a 	and	r8,r7,r8
    e8b0:	2006d77a 	srli	r3,r4,29
    e8b4:	3004d77a 	srli	r2,r6,29
    e8b8:	dc000015 	stw	r16,0(sp)
    e8bc:	501490fa 	slli	r10,r10,3
    e8c0:	2820d53a 	srli	r16,r5,20
    e8c4:	401090fa 	slli	r8,r8,3
    e8c8:	dc800215 	stw	r18,8(sp)
    e8cc:	dc400115 	stw	r17,4(sp)
    e8d0:	dfc00415 	stw	ra,16(sp)
    e8d4:	202290fa 	slli	r17,r4,3
    e8d8:	dcc00315 	stw	r19,12(sp)
    e8dc:	4a41ffcc 	andi	r9,r9,2047
    e8e0:	0101ffc4 	movi	r4,2047
    e8e4:	2824d7fa 	srli	r18,r5,31
    e8e8:	8401ffcc 	andi	r16,r16,2047
    e8ec:	50c6b03a 	or	r3,r10,r3
    e8f0:	380ed7fa 	srli	r7,r7,31
    e8f4:	408ab03a 	or	r5,r8,r2
    e8f8:	300c90fa 	slli	r6,r6,3
    e8fc:	49009626 	beq	r9,r4,eb58 <__subdf3+0x2c0>
    e900:	39c0005c 	xori	r7,r7,1
    e904:	8245c83a 	sub	r2,r16,r9
    e908:	3c807426 	beq	r7,r18,eadc <__subdf3+0x244>
    e90c:	0080af0e 	bge	zero,r2,ebcc <__subdf3+0x334>
    e910:	48002a1e 	bne	r9,zero,e9bc <__subdf3+0x124>
    e914:	2988b03a 	or	r4,r5,r6
    e918:	20009a1e 	bne	r4,zero,eb84 <__subdf3+0x2ec>
    e91c:	888001cc 	andi	r2,r17,7
    e920:	10000726 	beq	r2,zero,e940 <__subdf3+0xa8>
    e924:	888003cc 	andi	r2,r17,15
    e928:	01000104 	movi	r4,4
    e92c:	11000426 	beq	r2,r4,e940 <__subdf3+0xa8>
    e930:	890b883a 	add	r5,r17,r4
    e934:	2c63803a 	cmpltu	r17,r5,r17
    e938:	1c47883a 	add	r3,r3,r17
    e93c:	2823883a 	mov	r17,r5
    e940:	1880202c 	andhi	r2,r3,128
    e944:	10005926 	beq	r2,zero,eaac <__subdf3+0x214>
    e948:	84000044 	addi	r16,r16,1
    e94c:	0081ffc4 	movi	r2,2047
    e950:	8080be26 	beq	r16,r2,ec4c <__subdf3+0x3b4>
    e954:	017fe034 	movhi	r5,65408
    e958:	297fffc4 	addi	r5,r5,-1
    e95c:	1946703a 	and	r3,r3,r5
    e960:	1804977a 	slli	r2,r3,29
    e964:	1806927a 	slli	r3,r3,9
    e968:	8822d0fa 	srli	r17,r17,3
    e96c:	8401ffcc 	andi	r16,r16,2047
    e970:	180ad33a 	srli	r5,r3,12
    e974:	9100004c 	andi	r4,r18,1
    e978:	1444b03a 	or	r2,r2,r17
    e97c:	80c1ffcc 	andi	r3,r16,2047
    e980:	1820953a 	slli	r16,r3,20
    e984:	20c03fcc 	andi	r3,r4,255
    e988:	180897fa 	slli	r4,r3,31
    e98c:	00c00434 	movhi	r3,16
    e990:	18ffffc4 	addi	r3,r3,-1
    e994:	28c6703a 	and	r3,r5,r3
    e998:	1c06b03a 	or	r3,r3,r16
    e99c:	1906b03a 	or	r3,r3,r4
    e9a0:	dfc00417 	ldw	ra,16(sp)
    e9a4:	dcc00317 	ldw	r19,12(sp)
    e9a8:	dc800217 	ldw	r18,8(sp)
    e9ac:	dc400117 	ldw	r17,4(sp)
    e9b0:	dc000017 	ldw	r16,0(sp)
    e9b4:	dec00504 	addi	sp,sp,20
    e9b8:	f800283a 	ret
    e9bc:	0101ffc4 	movi	r4,2047
    e9c0:	813fd626 	beq	r16,r4,e91c <_gp+0xffff27c0>
    e9c4:	29402034 	orhi	r5,r5,128
    e9c8:	01000e04 	movi	r4,56
    e9cc:	2080a316 	blt	r4,r2,ec5c <__subdf3+0x3c4>
    e9d0:	010007c4 	movi	r4,31
    e9d4:	2080c616 	blt	r4,r2,ecf0 <__subdf3+0x458>
    e9d8:	01000804 	movi	r4,32
    e9dc:	2089c83a 	sub	r4,r4,r2
    e9e0:	2910983a 	sll	r8,r5,r4
    e9e4:	308ed83a 	srl	r7,r6,r2
    e9e8:	3108983a 	sll	r4,r6,r4
    e9ec:	2884d83a 	srl	r2,r5,r2
    e9f0:	41ccb03a 	or	r6,r8,r7
    e9f4:	2008c03a 	cmpne	r4,r4,zero
    e9f8:	310cb03a 	or	r6,r6,r4
    e9fc:	898dc83a 	sub	r6,r17,r6
    ea00:	89a3803a 	cmpltu	r17,r17,r6
    ea04:	1887c83a 	sub	r3,r3,r2
    ea08:	1c47c83a 	sub	r3,r3,r17
    ea0c:	3023883a 	mov	r17,r6
    ea10:	1880202c 	andhi	r2,r3,128
    ea14:	10002326 	beq	r2,zero,eaa4 <__subdf3+0x20c>
    ea18:	04c02034 	movhi	r19,128
    ea1c:	9cffffc4 	addi	r19,r19,-1
    ea20:	1ce6703a 	and	r19,r3,r19
    ea24:	98007a26 	beq	r19,zero,ec10 <__subdf3+0x378>
    ea28:	9809883a 	mov	r4,r19
    ea2c:	000f3980 	call	f398 <__clzsi2>
    ea30:	113ffe04 	addi	r4,r2,-8
    ea34:	00c007c4 	movi	r3,31
    ea38:	19007b16 	blt	r3,r4,ec28 <__subdf3+0x390>
    ea3c:	00800804 	movi	r2,32
    ea40:	1105c83a 	sub	r2,r2,r4
    ea44:	8884d83a 	srl	r2,r17,r2
    ea48:	9906983a 	sll	r3,r19,r4
    ea4c:	8922983a 	sll	r17,r17,r4
    ea50:	10c4b03a 	or	r2,r2,r3
    ea54:	24007816 	blt	r4,r16,ec38 <__subdf3+0x3a0>
    ea58:	2421c83a 	sub	r16,r4,r16
    ea5c:	80c00044 	addi	r3,r16,1
    ea60:	010007c4 	movi	r4,31
    ea64:	20c09516 	blt	r4,r3,ecbc <__subdf3+0x424>
    ea68:	01400804 	movi	r5,32
    ea6c:	28cbc83a 	sub	r5,r5,r3
    ea70:	88c8d83a 	srl	r4,r17,r3
    ea74:	8962983a 	sll	r17,r17,r5
    ea78:	114a983a 	sll	r5,r2,r5
    ea7c:	10c6d83a 	srl	r3,r2,r3
    ea80:	8804c03a 	cmpne	r2,r17,zero
    ea84:	290ab03a 	or	r5,r5,r4
    ea88:	28a2b03a 	or	r17,r5,r2
    ea8c:	0021883a 	mov	r16,zero
    ea90:	003fa206 	br	e91c <_gp+0xffff27c0>
    ea94:	2090b03a 	or	r8,r4,r2
    ea98:	40018e26 	beq	r8,zero,f0d4 <__subdf3+0x83c>
    ea9c:	1007883a 	mov	r3,r2
    eaa0:	2023883a 	mov	r17,r4
    eaa4:	888001cc 	andi	r2,r17,7
    eaa8:	103f9e1e 	bne	r2,zero,e924 <_gp+0xffff27c8>
    eaac:	1804977a 	slli	r2,r3,29
    eab0:	8822d0fa 	srli	r17,r17,3
    eab4:	1810d0fa 	srli	r8,r3,3
    eab8:	9100004c 	andi	r4,r18,1
    eabc:	1444b03a 	or	r2,r2,r17
    eac0:	00c1ffc4 	movi	r3,2047
    eac4:	80c02826 	beq	r16,r3,eb68 <__subdf3+0x2d0>
    eac8:	01400434 	movhi	r5,16
    eacc:	297fffc4 	addi	r5,r5,-1
    ead0:	80e0703a 	and	r16,r16,r3
    ead4:	414a703a 	and	r5,r8,r5
    ead8:	003fa806 	br	e97c <_gp+0xffff2820>
    eadc:	0080630e 	bge	zero,r2,ec6c <__subdf3+0x3d4>
    eae0:	48003026 	beq	r9,zero,eba4 <__subdf3+0x30c>
    eae4:	0101ffc4 	movi	r4,2047
    eae8:	813f8c26 	beq	r16,r4,e91c <_gp+0xffff27c0>
    eaec:	29402034 	orhi	r5,r5,128
    eaf0:	01000e04 	movi	r4,56
    eaf4:	2080a90e 	bge	r4,r2,ed9c <__subdf3+0x504>
    eaf8:	298cb03a 	or	r6,r5,r6
    eafc:	3012c03a 	cmpne	r9,r6,zero
    eb00:	0005883a 	mov	r2,zero
    eb04:	4c53883a 	add	r9,r9,r17
    eb08:	4c63803a 	cmpltu	r17,r9,r17
    eb0c:	10c7883a 	add	r3,r2,r3
    eb10:	88c7883a 	add	r3,r17,r3
    eb14:	4823883a 	mov	r17,r9
    eb18:	1880202c 	andhi	r2,r3,128
    eb1c:	1000d026 	beq	r2,zero,ee60 <__subdf3+0x5c8>
    eb20:	84000044 	addi	r16,r16,1
    eb24:	0081ffc4 	movi	r2,2047
    eb28:	8080fe26 	beq	r16,r2,ef24 <__subdf3+0x68c>
    eb2c:	00bfe034 	movhi	r2,65408
    eb30:	10bfffc4 	addi	r2,r2,-1
    eb34:	1886703a 	and	r3,r3,r2
    eb38:	880ad07a 	srli	r5,r17,1
    eb3c:	180497fa 	slli	r2,r3,31
    eb40:	8900004c 	andi	r4,r17,1
    eb44:	2922b03a 	or	r17,r5,r4
    eb48:	1806d07a 	srli	r3,r3,1
    eb4c:	1462b03a 	or	r17,r2,r17
    eb50:	3825883a 	mov	r18,r7
    eb54:	003f7106 	br	e91c <_gp+0xffff27c0>
    eb58:	2984b03a 	or	r2,r5,r6
    eb5c:	103f6826 	beq	r2,zero,e900 <_gp+0xffff27a4>
    eb60:	39c03fcc 	andi	r7,r7,255
    eb64:	003f6706 	br	e904 <_gp+0xffff27a8>
    eb68:	4086b03a 	or	r3,r8,r2
    eb6c:	18015226 	beq	r3,zero,f0b8 <__subdf3+0x820>
    eb70:	00c00434 	movhi	r3,16
    eb74:	41400234 	orhi	r5,r8,8
    eb78:	18ffffc4 	addi	r3,r3,-1
    eb7c:	28ca703a 	and	r5,r5,r3
    eb80:	003f7e06 	br	e97c <_gp+0xffff2820>
    eb84:	10bfffc4 	addi	r2,r2,-1
    eb88:	1000491e 	bne	r2,zero,ecb0 <__subdf3+0x418>
    eb8c:	898fc83a 	sub	r7,r17,r6
    eb90:	89e3803a 	cmpltu	r17,r17,r7
    eb94:	1947c83a 	sub	r3,r3,r5
    eb98:	1c47c83a 	sub	r3,r3,r17
    eb9c:	3823883a 	mov	r17,r7
    eba0:	003f9b06 	br	ea10 <_gp+0xffff28b4>
    eba4:	2988b03a 	or	r4,r5,r6
    eba8:	203f5c26 	beq	r4,zero,e91c <_gp+0xffff27c0>
    ebac:	10bfffc4 	addi	r2,r2,-1
    ebb0:	1000931e 	bne	r2,zero,ee00 <__subdf3+0x568>
    ebb4:	898d883a 	add	r6,r17,r6
    ebb8:	3463803a 	cmpltu	r17,r6,r17
    ebbc:	1947883a 	add	r3,r3,r5
    ebc0:	88c7883a 	add	r3,r17,r3
    ebc4:	3023883a 	mov	r17,r6
    ebc8:	003fd306 	br	eb18 <_gp+0xffff29bc>
    ebcc:	1000541e 	bne	r2,zero,ed20 <__subdf3+0x488>
    ebd0:	80800044 	addi	r2,r16,1
    ebd4:	1081ffcc 	andi	r2,r2,2047
    ebd8:	01000044 	movi	r4,1
    ebdc:	2080a20e 	bge	r4,r2,ee68 <__subdf3+0x5d0>
    ebe0:	8989c83a 	sub	r4,r17,r6
    ebe4:	8905803a 	cmpltu	r2,r17,r4
    ebe8:	1967c83a 	sub	r19,r3,r5
    ebec:	98a7c83a 	sub	r19,r19,r2
    ebf0:	9880202c 	andhi	r2,r19,128
    ebf4:	10006326 	beq	r2,zero,ed84 <__subdf3+0x4ec>
    ebf8:	3463c83a 	sub	r17,r6,r17
    ebfc:	28c7c83a 	sub	r3,r5,r3
    ec00:	344d803a 	cmpltu	r6,r6,r17
    ec04:	19a7c83a 	sub	r19,r3,r6
    ec08:	3825883a 	mov	r18,r7
    ec0c:	983f861e 	bne	r19,zero,ea28 <_gp+0xffff28cc>
    ec10:	8809883a 	mov	r4,r17
    ec14:	000f3980 	call	f398 <__clzsi2>
    ec18:	10800804 	addi	r2,r2,32
    ec1c:	113ffe04 	addi	r4,r2,-8
    ec20:	00c007c4 	movi	r3,31
    ec24:	193f850e 	bge	r3,r4,ea3c <_gp+0xffff28e0>
    ec28:	10bff604 	addi	r2,r2,-40
    ec2c:	8884983a 	sll	r2,r17,r2
    ec30:	0023883a 	mov	r17,zero
    ec34:	243f880e 	bge	r4,r16,ea58 <_gp+0xffff28fc>
    ec38:	00ffe034 	movhi	r3,65408
    ec3c:	18ffffc4 	addi	r3,r3,-1
    ec40:	8121c83a 	sub	r16,r16,r4
    ec44:	10c6703a 	and	r3,r2,r3
    ec48:	003f3406 	br	e91c <_gp+0xffff27c0>
    ec4c:	9100004c 	andi	r4,r18,1
    ec50:	000b883a 	mov	r5,zero
    ec54:	0005883a 	mov	r2,zero
    ec58:	003f4806 	br	e97c <_gp+0xffff2820>
    ec5c:	298cb03a 	or	r6,r5,r6
    ec60:	300cc03a 	cmpne	r6,r6,zero
    ec64:	0005883a 	mov	r2,zero
    ec68:	003f6406 	br	e9fc <_gp+0xffff28a0>
    ec6c:	10009a1e 	bne	r2,zero,eed8 <__subdf3+0x640>
    ec70:	82400044 	addi	r9,r16,1
    ec74:	4881ffcc 	andi	r2,r9,2047
    ec78:	02800044 	movi	r10,1
    ec7c:	5080670e 	bge	r10,r2,ee1c <__subdf3+0x584>
    ec80:	0081ffc4 	movi	r2,2047
    ec84:	4880af26 	beq	r9,r2,ef44 <__subdf3+0x6ac>
    ec88:	898d883a 	add	r6,r17,r6
    ec8c:	1945883a 	add	r2,r3,r5
    ec90:	3447803a 	cmpltu	r3,r6,r17
    ec94:	1887883a 	add	r3,r3,r2
    ec98:	182297fa 	slli	r17,r3,31
    ec9c:	300cd07a 	srli	r6,r6,1
    eca0:	1806d07a 	srli	r3,r3,1
    eca4:	4821883a 	mov	r16,r9
    eca8:	89a2b03a 	or	r17,r17,r6
    ecac:	003f1b06 	br	e91c <_gp+0xffff27c0>
    ecb0:	0101ffc4 	movi	r4,2047
    ecb4:	813f441e 	bne	r16,r4,e9c8 <_gp+0xffff286c>
    ecb8:	003f1806 	br	e91c <_gp+0xffff27c0>
    ecbc:	843ff844 	addi	r16,r16,-31
    ecc0:	01400804 	movi	r5,32
    ecc4:	1408d83a 	srl	r4,r2,r16
    ecc8:	19405026 	beq	r3,r5,ee0c <__subdf3+0x574>
    eccc:	01401004 	movi	r5,64
    ecd0:	28c7c83a 	sub	r3,r5,r3
    ecd4:	10c4983a 	sll	r2,r2,r3
    ecd8:	88a2b03a 	or	r17,r17,r2
    ecdc:	8822c03a 	cmpne	r17,r17,zero
    ece0:	2462b03a 	or	r17,r4,r17
    ece4:	0007883a 	mov	r3,zero
    ece8:	0021883a 	mov	r16,zero
    ecec:	003f6d06 	br	eaa4 <_gp+0xffff2948>
    ecf0:	11fff804 	addi	r7,r2,-32
    ecf4:	01000804 	movi	r4,32
    ecf8:	29ced83a 	srl	r7,r5,r7
    ecfc:	11004526 	beq	r2,r4,ee14 <__subdf3+0x57c>
    ed00:	01001004 	movi	r4,64
    ed04:	2089c83a 	sub	r4,r4,r2
    ed08:	2904983a 	sll	r2,r5,r4
    ed0c:	118cb03a 	or	r6,r2,r6
    ed10:	300cc03a 	cmpne	r6,r6,zero
    ed14:	398cb03a 	or	r6,r7,r6
    ed18:	0005883a 	mov	r2,zero
    ed1c:	003f3706 	br	e9fc <_gp+0xffff28a0>
    ed20:	80002a26 	beq	r16,zero,edcc <__subdf3+0x534>
    ed24:	0101ffc4 	movi	r4,2047
    ed28:	49006626 	beq	r9,r4,eec4 <__subdf3+0x62c>
    ed2c:	0085c83a 	sub	r2,zero,r2
    ed30:	18c02034 	orhi	r3,r3,128
    ed34:	01000e04 	movi	r4,56
    ed38:	20807e16 	blt	r4,r2,ef34 <__subdf3+0x69c>
    ed3c:	010007c4 	movi	r4,31
    ed40:	2080e716 	blt	r4,r2,f0e0 <__subdf3+0x848>
    ed44:	01000804 	movi	r4,32
    ed48:	2089c83a 	sub	r4,r4,r2
    ed4c:	1914983a 	sll	r10,r3,r4
    ed50:	8890d83a 	srl	r8,r17,r2
    ed54:	8908983a 	sll	r4,r17,r4
    ed58:	1884d83a 	srl	r2,r3,r2
    ed5c:	5222b03a 	or	r17,r10,r8
    ed60:	2006c03a 	cmpne	r3,r4,zero
    ed64:	88e2b03a 	or	r17,r17,r3
    ed68:	3463c83a 	sub	r17,r6,r17
    ed6c:	2885c83a 	sub	r2,r5,r2
    ed70:	344d803a 	cmpltu	r6,r6,r17
    ed74:	1187c83a 	sub	r3,r2,r6
    ed78:	4821883a 	mov	r16,r9
    ed7c:	3825883a 	mov	r18,r7
    ed80:	003f2306 	br	ea10 <_gp+0xffff28b4>
    ed84:	24d0b03a 	or	r8,r4,r19
    ed88:	40001b1e 	bne	r8,zero,edf8 <__subdf3+0x560>
    ed8c:	0005883a 	mov	r2,zero
    ed90:	0009883a 	mov	r4,zero
    ed94:	0021883a 	mov	r16,zero
    ed98:	003f4906 	br	eac0 <_gp+0xffff2964>
    ed9c:	010007c4 	movi	r4,31
    eda0:	20803a16 	blt	r4,r2,ee8c <__subdf3+0x5f4>
    eda4:	01000804 	movi	r4,32
    eda8:	2089c83a 	sub	r4,r4,r2
    edac:	2912983a 	sll	r9,r5,r4
    edb0:	3090d83a 	srl	r8,r6,r2
    edb4:	3108983a 	sll	r4,r6,r4
    edb8:	2884d83a 	srl	r2,r5,r2
    edbc:	4a12b03a 	or	r9,r9,r8
    edc0:	2008c03a 	cmpne	r4,r4,zero
    edc4:	4912b03a 	or	r9,r9,r4
    edc8:	003f4e06 	br	eb04 <_gp+0xffff29a8>
    edcc:	1c48b03a 	or	r4,r3,r17
    edd0:	20003c26 	beq	r4,zero,eec4 <__subdf3+0x62c>
    edd4:	0084303a 	nor	r2,zero,r2
    edd8:	1000381e 	bne	r2,zero,eebc <__subdf3+0x624>
    eddc:	3463c83a 	sub	r17,r6,r17
    ede0:	28c5c83a 	sub	r2,r5,r3
    ede4:	344d803a 	cmpltu	r6,r6,r17
    ede8:	1187c83a 	sub	r3,r2,r6
    edec:	4821883a 	mov	r16,r9
    edf0:	3825883a 	mov	r18,r7
    edf4:	003f0606 	br	ea10 <_gp+0xffff28b4>
    edf8:	2023883a 	mov	r17,r4
    edfc:	003f0906 	br	ea24 <_gp+0xffff28c8>
    ee00:	0101ffc4 	movi	r4,2047
    ee04:	813f3a1e 	bne	r16,r4,eaf0 <_gp+0xffff2994>
    ee08:	003ec406 	br	e91c <_gp+0xffff27c0>
    ee0c:	0005883a 	mov	r2,zero
    ee10:	003fb106 	br	ecd8 <_gp+0xffff2b7c>
    ee14:	0005883a 	mov	r2,zero
    ee18:	003fbc06 	br	ed0c <_gp+0xffff2bb0>
    ee1c:	1c44b03a 	or	r2,r3,r17
    ee20:	80008e1e 	bne	r16,zero,f05c <__subdf3+0x7c4>
    ee24:	1000c826 	beq	r2,zero,f148 <__subdf3+0x8b0>
    ee28:	2984b03a 	or	r2,r5,r6
    ee2c:	103ebb26 	beq	r2,zero,e91c <_gp+0xffff27c0>
    ee30:	8989883a 	add	r4,r17,r6
    ee34:	1945883a 	add	r2,r3,r5
    ee38:	2447803a 	cmpltu	r3,r4,r17
    ee3c:	1887883a 	add	r3,r3,r2
    ee40:	1880202c 	andhi	r2,r3,128
    ee44:	2023883a 	mov	r17,r4
    ee48:	103f1626 	beq	r2,zero,eaa4 <_gp+0xffff2948>
    ee4c:	00bfe034 	movhi	r2,65408
    ee50:	10bfffc4 	addi	r2,r2,-1
    ee54:	5021883a 	mov	r16,r10
    ee58:	1886703a 	and	r3,r3,r2
    ee5c:	003eaf06 	br	e91c <_gp+0xffff27c0>
    ee60:	3825883a 	mov	r18,r7
    ee64:	003f0f06 	br	eaa4 <_gp+0xffff2948>
    ee68:	1c44b03a 	or	r2,r3,r17
    ee6c:	8000251e 	bne	r16,zero,ef04 <__subdf3+0x66c>
    ee70:	1000661e 	bne	r2,zero,f00c <__subdf3+0x774>
    ee74:	2990b03a 	or	r8,r5,r6
    ee78:	40009626 	beq	r8,zero,f0d4 <__subdf3+0x83c>
    ee7c:	2807883a 	mov	r3,r5
    ee80:	3023883a 	mov	r17,r6
    ee84:	3825883a 	mov	r18,r7
    ee88:	003ea406 	br	e91c <_gp+0xffff27c0>
    ee8c:	127ff804 	addi	r9,r2,-32
    ee90:	01000804 	movi	r4,32
    ee94:	2a52d83a 	srl	r9,r5,r9
    ee98:	11008c26 	beq	r2,r4,f0cc <__subdf3+0x834>
    ee9c:	01001004 	movi	r4,64
    eea0:	2085c83a 	sub	r2,r4,r2
    eea4:	2884983a 	sll	r2,r5,r2
    eea8:	118cb03a 	or	r6,r2,r6
    eeac:	300cc03a 	cmpne	r6,r6,zero
    eeb0:	4992b03a 	or	r9,r9,r6
    eeb4:	0005883a 	mov	r2,zero
    eeb8:	003f1206 	br	eb04 <_gp+0xffff29a8>
    eebc:	0101ffc4 	movi	r4,2047
    eec0:	493f9c1e 	bne	r9,r4,ed34 <_gp+0xffff2bd8>
    eec4:	2807883a 	mov	r3,r5
    eec8:	3023883a 	mov	r17,r6
    eecc:	4821883a 	mov	r16,r9
    eed0:	3825883a 	mov	r18,r7
    eed4:	003e9106 	br	e91c <_gp+0xffff27c0>
    eed8:	80001f1e 	bne	r16,zero,ef58 <__subdf3+0x6c0>
    eedc:	1c48b03a 	or	r4,r3,r17
    eee0:	20005a26 	beq	r4,zero,f04c <__subdf3+0x7b4>
    eee4:	0084303a 	nor	r2,zero,r2
    eee8:	1000561e 	bne	r2,zero,f044 <__subdf3+0x7ac>
    eeec:	89a3883a 	add	r17,r17,r6
    eef0:	1945883a 	add	r2,r3,r5
    eef4:	898d803a 	cmpltu	r6,r17,r6
    eef8:	3087883a 	add	r3,r6,r2
    eefc:	4821883a 	mov	r16,r9
    ef00:	003f0506 	br	eb18 <_gp+0xffff29bc>
    ef04:	10002b1e 	bne	r2,zero,efb4 <__subdf3+0x71c>
    ef08:	2984b03a 	or	r2,r5,r6
    ef0c:	10008026 	beq	r2,zero,f110 <__subdf3+0x878>
    ef10:	2807883a 	mov	r3,r5
    ef14:	3023883a 	mov	r17,r6
    ef18:	3825883a 	mov	r18,r7
    ef1c:	0401ffc4 	movi	r16,2047
    ef20:	003e7e06 	br	e91c <_gp+0xffff27c0>
    ef24:	3809883a 	mov	r4,r7
    ef28:	0011883a 	mov	r8,zero
    ef2c:	0005883a 	mov	r2,zero
    ef30:	003ee306 	br	eac0 <_gp+0xffff2964>
    ef34:	1c62b03a 	or	r17,r3,r17
    ef38:	8822c03a 	cmpne	r17,r17,zero
    ef3c:	0005883a 	mov	r2,zero
    ef40:	003f8906 	br	ed68 <_gp+0xffff2c0c>
    ef44:	3809883a 	mov	r4,r7
    ef48:	4821883a 	mov	r16,r9
    ef4c:	0011883a 	mov	r8,zero
    ef50:	0005883a 	mov	r2,zero
    ef54:	003eda06 	br	eac0 <_gp+0xffff2964>
    ef58:	0101ffc4 	movi	r4,2047
    ef5c:	49003b26 	beq	r9,r4,f04c <__subdf3+0x7b4>
    ef60:	0085c83a 	sub	r2,zero,r2
    ef64:	18c02034 	orhi	r3,r3,128
    ef68:	01000e04 	movi	r4,56
    ef6c:	20806e16 	blt	r4,r2,f128 <__subdf3+0x890>
    ef70:	010007c4 	movi	r4,31
    ef74:	20807716 	blt	r4,r2,f154 <__subdf3+0x8bc>
    ef78:	01000804 	movi	r4,32
    ef7c:	2089c83a 	sub	r4,r4,r2
    ef80:	1914983a 	sll	r10,r3,r4
    ef84:	8890d83a 	srl	r8,r17,r2
    ef88:	8908983a 	sll	r4,r17,r4
    ef8c:	1884d83a 	srl	r2,r3,r2
    ef90:	5222b03a 	or	r17,r10,r8
    ef94:	2006c03a 	cmpne	r3,r4,zero
    ef98:	88e2b03a 	or	r17,r17,r3
    ef9c:	89a3883a 	add	r17,r17,r6
    efa0:	1145883a 	add	r2,r2,r5
    efa4:	898d803a 	cmpltu	r6,r17,r6
    efa8:	3087883a 	add	r3,r6,r2
    efac:	4821883a 	mov	r16,r9
    efb0:	003ed906 	br	eb18 <_gp+0xffff29bc>
    efb4:	2984b03a 	or	r2,r5,r6
    efb8:	10004226 	beq	r2,zero,f0c4 <__subdf3+0x82c>
    efbc:	1808d0fa 	srli	r4,r3,3
    efc0:	8822d0fa 	srli	r17,r17,3
    efc4:	1806977a 	slli	r3,r3,29
    efc8:	2080022c 	andhi	r2,r4,8
    efcc:	1c62b03a 	or	r17,r3,r17
    efd0:	10000826 	beq	r2,zero,eff4 <__subdf3+0x75c>
    efd4:	2812d0fa 	srli	r9,r5,3
    efd8:	4880022c 	andhi	r2,r9,8
    efdc:	1000051e 	bne	r2,zero,eff4 <__subdf3+0x75c>
    efe0:	300cd0fa 	srli	r6,r6,3
    efe4:	2804977a 	slli	r2,r5,29
    efe8:	4809883a 	mov	r4,r9
    efec:	3825883a 	mov	r18,r7
    eff0:	11a2b03a 	or	r17,r2,r6
    eff4:	8806d77a 	srli	r3,r17,29
    eff8:	200890fa 	slli	r4,r4,3
    effc:	882290fa 	slli	r17,r17,3
    f000:	0401ffc4 	movi	r16,2047
    f004:	1906b03a 	or	r3,r3,r4
    f008:	003e4406 	br	e91c <_gp+0xffff27c0>
    f00c:	2984b03a 	or	r2,r5,r6
    f010:	103e4226 	beq	r2,zero,e91c <_gp+0xffff27c0>
    f014:	8989c83a 	sub	r4,r17,r6
    f018:	8911803a 	cmpltu	r8,r17,r4
    f01c:	1945c83a 	sub	r2,r3,r5
    f020:	1205c83a 	sub	r2,r2,r8
    f024:	1200202c 	andhi	r8,r2,128
    f028:	403e9a26 	beq	r8,zero,ea94 <_gp+0xffff2938>
    f02c:	3463c83a 	sub	r17,r6,r17
    f030:	28c5c83a 	sub	r2,r5,r3
    f034:	344d803a 	cmpltu	r6,r6,r17
    f038:	1187c83a 	sub	r3,r2,r6
    f03c:	3825883a 	mov	r18,r7
    f040:	003e3606 	br	e91c <_gp+0xffff27c0>
    f044:	0101ffc4 	movi	r4,2047
    f048:	493fc71e 	bne	r9,r4,ef68 <_gp+0xffff2e0c>
    f04c:	2807883a 	mov	r3,r5
    f050:	3023883a 	mov	r17,r6
    f054:	4821883a 	mov	r16,r9
    f058:	003e3006 	br	e91c <_gp+0xffff27c0>
    f05c:	10003626 	beq	r2,zero,f138 <__subdf3+0x8a0>
    f060:	2984b03a 	or	r2,r5,r6
    f064:	10001726 	beq	r2,zero,f0c4 <__subdf3+0x82c>
    f068:	1808d0fa 	srli	r4,r3,3
    f06c:	8822d0fa 	srli	r17,r17,3
    f070:	1806977a 	slli	r3,r3,29
    f074:	2080022c 	andhi	r2,r4,8
    f078:	1c62b03a 	or	r17,r3,r17
    f07c:	10000726 	beq	r2,zero,f09c <__subdf3+0x804>
    f080:	2812d0fa 	srli	r9,r5,3
    f084:	4880022c 	andhi	r2,r9,8
    f088:	1000041e 	bne	r2,zero,f09c <__subdf3+0x804>
    f08c:	300cd0fa 	srli	r6,r6,3
    f090:	2804977a 	slli	r2,r5,29
    f094:	4809883a 	mov	r4,r9
    f098:	11a2b03a 	or	r17,r2,r6
    f09c:	8806d77a 	srli	r3,r17,29
    f0a0:	200890fa 	slli	r4,r4,3
    f0a4:	882290fa 	slli	r17,r17,3
    f0a8:	3825883a 	mov	r18,r7
    f0ac:	1906b03a 	or	r3,r3,r4
    f0b0:	0401ffc4 	movi	r16,2047
    f0b4:	003e1906 	br	e91c <_gp+0xffff27c0>
    f0b8:	000b883a 	mov	r5,zero
    f0bc:	0005883a 	mov	r2,zero
    f0c0:	003e2e06 	br	e97c <_gp+0xffff2820>
    f0c4:	0401ffc4 	movi	r16,2047
    f0c8:	003e1406 	br	e91c <_gp+0xffff27c0>
    f0cc:	0005883a 	mov	r2,zero
    f0d0:	003f7506 	br	eea8 <_gp+0xffff2d4c>
    f0d4:	0005883a 	mov	r2,zero
    f0d8:	0009883a 	mov	r4,zero
    f0dc:	003e7806 	br	eac0 <_gp+0xffff2964>
    f0e0:	123ff804 	addi	r8,r2,-32
    f0e4:	01000804 	movi	r4,32
    f0e8:	1a10d83a 	srl	r8,r3,r8
    f0ec:	11002526 	beq	r2,r4,f184 <__subdf3+0x8ec>
    f0f0:	01001004 	movi	r4,64
    f0f4:	2085c83a 	sub	r2,r4,r2
    f0f8:	1884983a 	sll	r2,r3,r2
    f0fc:	1444b03a 	or	r2,r2,r17
    f100:	1004c03a 	cmpne	r2,r2,zero
    f104:	40a2b03a 	or	r17,r8,r2
    f108:	0005883a 	mov	r2,zero
    f10c:	003f1606 	br	ed68 <_gp+0xffff2c0c>
    f110:	02000434 	movhi	r8,16
    f114:	0009883a 	mov	r4,zero
    f118:	423fffc4 	addi	r8,r8,-1
    f11c:	00bfffc4 	movi	r2,-1
    f120:	0401ffc4 	movi	r16,2047
    f124:	003e6606 	br	eac0 <_gp+0xffff2964>
    f128:	1c62b03a 	or	r17,r3,r17
    f12c:	8822c03a 	cmpne	r17,r17,zero
    f130:	0005883a 	mov	r2,zero
    f134:	003f9906 	br	ef9c <_gp+0xffff2e40>
    f138:	2807883a 	mov	r3,r5
    f13c:	3023883a 	mov	r17,r6
    f140:	0401ffc4 	movi	r16,2047
    f144:	003df506 	br	e91c <_gp+0xffff27c0>
    f148:	2807883a 	mov	r3,r5
    f14c:	3023883a 	mov	r17,r6
    f150:	003df206 	br	e91c <_gp+0xffff27c0>
    f154:	123ff804 	addi	r8,r2,-32
    f158:	01000804 	movi	r4,32
    f15c:	1a10d83a 	srl	r8,r3,r8
    f160:	11000a26 	beq	r2,r4,f18c <__subdf3+0x8f4>
    f164:	01001004 	movi	r4,64
    f168:	2085c83a 	sub	r2,r4,r2
    f16c:	1884983a 	sll	r2,r3,r2
    f170:	1444b03a 	or	r2,r2,r17
    f174:	1004c03a 	cmpne	r2,r2,zero
    f178:	40a2b03a 	or	r17,r8,r2
    f17c:	0005883a 	mov	r2,zero
    f180:	003f8606 	br	ef9c <_gp+0xffff2e40>
    f184:	0005883a 	mov	r2,zero
    f188:	003fdc06 	br	f0fc <_gp+0xffff2fa0>
    f18c:	0005883a 	mov	r2,zero
    f190:	003ff706 	br	f170 <_gp+0xffff3014>

0000f194 <__fixdfsi>:
    f194:	280cd53a 	srli	r6,r5,20
    f198:	00c00434 	movhi	r3,16
    f19c:	18ffffc4 	addi	r3,r3,-1
    f1a0:	3181ffcc 	andi	r6,r6,2047
    f1a4:	01c0ff84 	movi	r7,1022
    f1a8:	28c6703a 	and	r3,r5,r3
    f1ac:	280ad7fa 	srli	r5,r5,31
    f1b0:	3980120e 	bge	r7,r6,f1fc <__fixdfsi+0x68>
    f1b4:	00810744 	movi	r2,1053
    f1b8:	11800c16 	blt	r2,r6,f1ec <__fixdfsi+0x58>
    f1bc:	00810cc4 	movi	r2,1075
    f1c0:	1185c83a 	sub	r2,r2,r6
    f1c4:	01c007c4 	movi	r7,31
    f1c8:	18c00434 	orhi	r3,r3,16
    f1cc:	38800d16 	blt	r7,r2,f204 <__fixdfsi+0x70>
    f1d0:	31befb44 	addi	r6,r6,-1043
    f1d4:	2084d83a 	srl	r2,r4,r2
    f1d8:	1986983a 	sll	r3,r3,r6
    f1dc:	1884b03a 	or	r2,r3,r2
    f1e0:	28000726 	beq	r5,zero,f200 <__fixdfsi+0x6c>
    f1e4:	0085c83a 	sub	r2,zero,r2
    f1e8:	f800283a 	ret
    f1ec:	00a00034 	movhi	r2,32768
    f1f0:	10bfffc4 	addi	r2,r2,-1
    f1f4:	2885883a 	add	r2,r5,r2
    f1f8:	f800283a 	ret
    f1fc:	0005883a 	mov	r2,zero
    f200:	f800283a 	ret
    f204:	008104c4 	movi	r2,1043
    f208:	1185c83a 	sub	r2,r2,r6
    f20c:	1884d83a 	srl	r2,r3,r2
    f210:	003ff306 	br	f1e0 <_gp+0xffff3084>

0000f214 <__floatsidf>:
    f214:	defffd04 	addi	sp,sp,-12
    f218:	dfc00215 	stw	ra,8(sp)
    f21c:	dc400115 	stw	r17,4(sp)
    f220:	dc000015 	stw	r16,0(sp)
    f224:	20002b26 	beq	r4,zero,f2d4 <__floatsidf+0xc0>
    f228:	2023883a 	mov	r17,r4
    f22c:	2020d7fa 	srli	r16,r4,31
    f230:	20002d16 	blt	r4,zero,f2e8 <__floatsidf+0xd4>
    f234:	8809883a 	mov	r4,r17
    f238:	000f3980 	call	f398 <__clzsi2>
    f23c:	01410784 	movi	r5,1054
    f240:	288bc83a 	sub	r5,r5,r2
    f244:	01010cc4 	movi	r4,1075
    f248:	2149c83a 	sub	r4,r4,r5
    f24c:	00c007c4 	movi	r3,31
    f250:	1900160e 	bge	r3,r4,f2ac <__floatsidf+0x98>
    f254:	00c104c4 	movi	r3,1043
    f258:	1947c83a 	sub	r3,r3,r5
    f25c:	88c6983a 	sll	r3,r17,r3
    f260:	00800434 	movhi	r2,16
    f264:	10bfffc4 	addi	r2,r2,-1
    f268:	1886703a 	and	r3,r3,r2
    f26c:	2941ffcc 	andi	r5,r5,2047
    f270:	800d883a 	mov	r6,r16
    f274:	0005883a 	mov	r2,zero
    f278:	280a953a 	slli	r5,r5,20
    f27c:	31803fcc 	andi	r6,r6,255
    f280:	01000434 	movhi	r4,16
    f284:	300c97fa 	slli	r6,r6,31
    f288:	213fffc4 	addi	r4,r4,-1
    f28c:	1906703a 	and	r3,r3,r4
    f290:	1946b03a 	or	r3,r3,r5
    f294:	1986b03a 	or	r3,r3,r6
    f298:	dfc00217 	ldw	ra,8(sp)
    f29c:	dc400117 	ldw	r17,4(sp)
    f2a0:	dc000017 	ldw	r16,0(sp)
    f2a4:	dec00304 	addi	sp,sp,12
    f2a8:	f800283a 	ret
    f2ac:	00c002c4 	movi	r3,11
    f2b0:	1887c83a 	sub	r3,r3,r2
    f2b4:	88c6d83a 	srl	r3,r17,r3
    f2b8:	8904983a 	sll	r2,r17,r4
    f2bc:	01000434 	movhi	r4,16
    f2c0:	213fffc4 	addi	r4,r4,-1
    f2c4:	2941ffcc 	andi	r5,r5,2047
    f2c8:	1906703a 	and	r3,r3,r4
    f2cc:	800d883a 	mov	r6,r16
    f2d0:	003fe906 	br	f278 <_gp+0xffff311c>
    f2d4:	000d883a 	mov	r6,zero
    f2d8:	000b883a 	mov	r5,zero
    f2dc:	0007883a 	mov	r3,zero
    f2e0:	0005883a 	mov	r2,zero
    f2e4:	003fe406 	br	f278 <_gp+0xffff311c>
    f2e8:	0123c83a 	sub	r17,zero,r4
    f2ec:	003fd106 	br	f234 <_gp+0xffff30d8>

0000f2f0 <__floatunsidf>:
    f2f0:	defffe04 	addi	sp,sp,-8
    f2f4:	dc000015 	stw	r16,0(sp)
    f2f8:	dfc00115 	stw	ra,4(sp)
    f2fc:	2021883a 	mov	r16,r4
    f300:	20002226 	beq	r4,zero,f38c <__floatunsidf+0x9c>
    f304:	000f3980 	call	f398 <__clzsi2>
    f308:	01010784 	movi	r4,1054
    f30c:	2089c83a 	sub	r4,r4,r2
    f310:	01810cc4 	movi	r6,1075
    f314:	310dc83a 	sub	r6,r6,r4
    f318:	00c007c4 	movi	r3,31
    f31c:	1980120e 	bge	r3,r6,f368 <__floatunsidf+0x78>
    f320:	00c104c4 	movi	r3,1043
    f324:	1907c83a 	sub	r3,r3,r4
    f328:	80ca983a 	sll	r5,r16,r3
    f32c:	00800434 	movhi	r2,16
    f330:	10bfffc4 	addi	r2,r2,-1
    f334:	2101ffcc 	andi	r4,r4,2047
    f338:	0021883a 	mov	r16,zero
    f33c:	288a703a 	and	r5,r5,r2
    f340:	2008953a 	slli	r4,r4,20
    f344:	00c00434 	movhi	r3,16
    f348:	18ffffc4 	addi	r3,r3,-1
    f34c:	28c6703a 	and	r3,r5,r3
    f350:	8005883a 	mov	r2,r16
    f354:	1906b03a 	or	r3,r3,r4
    f358:	dfc00117 	ldw	ra,4(sp)
    f35c:	dc000017 	ldw	r16,0(sp)
    f360:	dec00204 	addi	sp,sp,8
    f364:	f800283a 	ret
    f368:	00c002c4 	movi	r3,11
    f36c:	188bc83a 	sub	r5,r3,r2
    f370:	814ad83a 	srl	r5,r16,r5
    f374:	00c00434 	movhi	r3,16
    f378:	18ffffc4 	addi	r3,r3,-1
    f37c:	81a0983a 	sll	r16,r16,r6
    f380:	2101ffcc 	andi	r4,r4,2047
    f384:	28ca703a 	and	r5,r5,r3
    f388:	003fed06 	br	f340 <_gp+0xffff31e4>
    f38c:	0009883a 	mov	r4,zero
    f390:	000b883a 	mov	r5,zero
    f394:	003fea06 	br	f340 <_gp+0xffff31e4>

0000f398 <__clzsi2>:
    f398:	00bfffd4 	movui	r2,65535
    f39c:	11000536 	bltu	r2,r4,f3b4 <__clzsi2+0x1c>
    f3a0:	00803fc4 	movi	r2,255
    f3a4:	11000f36 	bltu	r2,r4,f3e4 <__clzsi2+0x4c>
    f3a8:	00800804 	movi	r2,32
    f3ac:	0007883a 	mov	r3,zero
    f3b0:	00000506 	br	f3c8 <__clzsi2+0x30>
    f3b4:	00804034 	movhi	r2,256
    f3b8:	10bfffc4 	addi	r2,r2,-1
    f3bc:	11000c2e 	bgeu	r2,r4,f3f0 <__clzsi2+0x58>
    f3c0:	00800204 	movi	r2,8
    f3c4:	00c00604 	movi	r3,24
    f3c8:	20c8d83a 	srl	r4,r4,r3
    f3cc:	00c00074 	movhi	r3,1
    f3d0:	18c95f04 	addi	r3,r3,9596
    f3d4:	1909883a 	add	r4,r3,r4
    f3d8:	20c00003 	ldbu	r3,0(r4)
    f3dc:	10c5c83a 	sub	r2,r2,r3
    f3e0:	f800283a 	ret
    f3e4:	00800604 	movi	r2,24
    f3e8:	00c00204 	movi	r3,8
    f3ec:	003ff606 	br	f3c8 <_gp+0xffff326c>
    f3f0:	00800404 	movi	r2,16
    f3f4:	1007883a 	mov	r3,r2
    f3f8:	003ff306 	br	f3c8 <_gp+0xffff326c>

0000f3fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f3fc:	defffe04 	addi	sp,sp,-8
    f400:	dfc00115 	stw	ra,4(sp)
    f404:	df000015 	stw	fp,0(sp)
    f408:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f40c:	d0a00b17 	ldw	r2,-32724(gp)
    f410:	10000326 	beq	r2,zero,f420 <alt_get_errno+0x24>
    f414:	d0a00b17 	ldw	r2,-32724(gp)
    f418:	103ee83a 	callr	r2
    f41c:	00000106 	br	f424 <alt_get_errno+0x28>
    f420:	d0a6d204 	addi	r2,gp,-25784
}
    f424:	e037883a 	mov	sp,fp
    f428:	dfc00117 	ldw	ra,4(sp)
    f42c:	df000017 	ldw	fp,0(sp)
    f430:	dec00204 	addi	sp,sp,8
    f434:	f800283a 	ret

0000f438 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f438:	defffb04 	addi	sp,sp,-20
    f43c:	dfc00415 	stw	ra,16(sp)
    f440:	df000315 	stw	fp,12(sp)
    f444:	df000304 	addi	fp,sp,12
    f448:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f44c:	e0bfff17 	ldw	r2,-4(fp)
    f450:	10000816 	blt	r2,zero,f474 <close+0x3c>
    f454:	01400304 	movi	r5,12
    f458:	e13fff17 	ldw	r4,-4(fp)
    f45c:	000cb300 	call	cb30 <__mulsi3>
    f460:	1007883a 	mov	r3,r2
    f464:	00800074 	movhi	r2,1
    f468:	108bdf04 	addi	r2,r2,12156
    f46c:	1885883a 	add	r2,r3,r2
    f470:	00000106 	br	f478 <close+0x40>
    f474:	0005883a 	mov	r2,zero
    f478:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f47c:	e0bffd17 	ldw	r2,-12(fp)
    f480:	10001926 	beq	r2,zero,f4e8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f484:	e0bffd17 	ldw	r2,-12(fp)
    f488:	10800017 	ldw	r2,0(r2)
    f48c:	10800417 	ldw	r2,16(r2)
    f490:	10000626 	beq	r2,zero,f4ac <close+0x74>
    f494:	e0bffd17 	ldw	r2,-12(fp)
    f498:	10800017 	ldw	r2,0(r2)
    f49c:	10800417 	ldw	r2,16(r2)
    f4a0:	e13ffd17 	ldw	r4,-12(fp)
    f4a4:	103ee83a 	callr	r2
    f4a8:	00000106 	br	f4b0 <close+0x78>
    f4ac:	0005883a 	mov	r2,zero
    f4b0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f4b4:	e13fff17 	ldw	r4,-4(fp)
    f4b8:	000fb200 	call	fb20 <alt_release_fd>
    if (rval < 0)
    f4bc:	e0bffe17 	ldw	r2,-8(fp)
    f4c0:	1000070e 	bge	r2,zero,f4e0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    f4c4:	000f3fc0 	call	f3fc <alt_get_errno>
    f4c8:	1007883a 	mov	r3,r2
    f4cc:	e0bffe17 	ldw	r2,-8(fp)
    f4d0:	0085c83a 	sub	r2,zero,r2
    f4d4:	18800015 	stw	r2,0(r3)
      return -1;
    f4d8:	00bfffc4 	movi	r2,-1
    f4dc:	00000706 	br	f4fc <close+0xc4>
    }
    return 0;
    f4e0:	0005883a 	mov	r2,zero
    f4e4:	00000506 	br	f4fc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f4e8:	000f3fc0 	call	f3fc <alt_get_errno>
    f4ec:	1007883a 	mov	r3,r2
    f4f0:	00801444 	movi	r2,81
    f4f4:	18800015 	stw	r2,0(r3)
    return -1;
    f4f8:	00bfffc4 	movi	r2,-1
  }
}
    f4fc:	e037883a 	mov	sp,fp
    f500:	dfc00117 	ldw	ra,4(sp)
    f504:	df000017 	ldw	fp,0(sp)
    f508:	dec00204 	addi	sp,sp,8
    f50c:	f800283a 	ret

0000f510 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f510:	defffc04 	addi	sp,sp,-16
    f514:	df000315 	stw	fp,12(sp)
    f518:	df000304 	addi	fp,sp,12
    f51c:	e13ffd15 	stw	r4,-12(fp)
    f520:	e17ffe15 	stw	r5,-8(fp)
    f524:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f528:	e0bfff17 	ldw	r2,-4(fp)
}
    f52c:	e037883a 	mov	sp,fp
    f530:	df000017 	ldw	fp,0(sp)
    f534:	dec00104 	addi	sp,sp,4
    f538:	f800283a 	ret

0000f53c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f53c:	defffe04 	addi	sp,sp,-8
    f540:	dfc00115 	stw	ra,4(sp)
    f544:	df000015 	stw	fp,0(sp)
    f548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f54c:	d0a00b17 	ldw	r2,-32724(gp)
    f550:	10000326 	beq	r2,zero,f560 <alt_get_errno+0x24>
    f554:	d0a00b17 	ldw	r2,-32724(gp)
    f558:	103ee83a 	callr	r2
    f55c:	00000106 	br	f564 <alt_get_errno+0x28>
    f560:	d0a6d204 	addi	r2,gp,-25784
}
    f564:	e037883a 	mov	sp,fp
    f568:	dfc00117 	ldw	ra,4(sp)
    f56c:	df000017 	ldw	fp,0(sp)
    f570:	dec00204 	addi	sp,sp,8
    f574:	f800283a 	ret

0000f578 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f578:	defffb04 	addi	sp,sp,-20
    f57c:	dfc00415 	stw	ra,16(sp)
    f580:	df000315 	stw	fp,12(sp)
    f584:	df000304 	addi	fp,sp,12
    f588:	e13ffe15 	stw	r4,-8(fp)
    f58c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f590:	e0bffe17 	ldw	r2,-8(fp)
    f594:	10000816 	blt	r2,zero,f5b8 <fstat+0x40>
    f598:	01400304 	movi	r5,12
    f59c:	e13ffe17 	ldw	r4,-8(fp)
    f5a0:	000cb300 	call	cb30 <__mulsi3>
    f5a4:	1007883a 	mov	r3,r2
    f5a8:	00800074 	movhi	r2,1
    f5ac:	108bdf04 	addi	r2,r2,12156
    f5b0:	1885883a 	add	r2,r3,r2
    f5b4:	00000106 	br	f5bc <fstat+0x44>
    f5b8:	0005883a 	mov	r2,zero
    f5bc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f5c0:	e0bffd17 	ldw	r2,-12(fp)
    f5c4:	10001026 	beq	r2,zero,f608 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f5c8:	e0bffd17 	ldw	r2,-12(fp)
    f5cc:	10800017 	ldw	r2,0(r2)
    f5d0:	10800817 	ldw	r2,32(r2)
    f5d4:	10000726 	beq	r2,zero,f5f4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    f5d8:	e0bffd17 	ldw	r2,-12(fp)
    f5dc:	10800017 	ldw	r2,0(r2)
    f5e0:	10800817 	ldw	r2,32(r2)
    f5e4:	e17fff17 	ldw	r5,-4(fp)
    f5e8:	e13ffd17 	ldw	r4,-12(fp)
    f5ec:	103ee83a 	callr	r2
    f5f0:	00000a06 	br	f61c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f5f4:	e0bfff17 	ldw	r2,-4(fp)
    f5f8:	00c80004 	movi	r3,8192
    f5fc:	10c00115 	stw	r3,4(r2)
      return 0;
    f600:	0005883a 	mov	r2,zero
    f604:	00000506 	br	f61c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f608:	000f53c0 	call	f53c <alt_get_errno>
    f60c:	1007883a 	mov	r3,r2
    f610:	00801444 	movi	r2,81
    f614:	18800015 	stw	r2,0(r3)
    return -1;
    f618:	00bfffc4 	movi	r2,-1
  }
}
    f61c:	e037883a 	mov	sp,fp
    f620:	dfc00117 	ldw	ra,4(sp)
    f624:	df000017 	ldw	fp,0(sp)
    f628:	dec00204 	addi	sp,sp,8
    f62c:	f800283a 	ret

0000f630 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f630:	defffe04 	addi	sp,sp,-8
    f634:	dfc00115 	stw	ra,4(sp)
    f638:	df000015 	stw	fp,0(sp)
    f63c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f640:	d0a00b17 	ldw	r2,-32724(gp)
    f644:	10000326 	beq	r2,zero,f654 <alt_get_errno+0x24>
    f648:	d0a00b17 	ldw	r2,-32724(gp)
    f64c:	103ee83a 	callr	r2
    f650:	00000106 	br	f658 <alt_get_errno+0x28>
    f654:	d0a6d204 	addi	r2,gp,-25784
}
    f658:	e037883a 	mov	sp,fp
    f65c:	dfc00117 	ldw	ra,4(sp)
    f660:	df000017 	ldw	fp,0(sp)
    f664:	dec00204 	addi	sp,sp,8
    f668:	f800283a 	ret

0000f66c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f66c:	deffed04 	addi	sp,sp,-76
    f670:	dfc01215 	stw	ra,72(sp)
    f674:	df001115 	stw	fp,68(sp)
    f678:	df001104 	addi	fp,sp,68
    f67c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f680:	e0bfff17 	ldw	r2,-4(fp)
    f684:	10000816 	blt	r2,zero,f6a8 <isatty+0x3c>
    f688:	01400304 	movi	r5,12
    f68c:	e13fff17 	ldw	r4,-4(fp)
    f690:	000cb300 	call	cb30 <__mulsi3>
    f694:	1007883a 	mov	r3,r2
    f698:	00800074 	movhi	r2,1
    f69c:	108bdf04 	addi	r2,r2,12156
    f6a0:	1885883a 	add	r2,r3,r2
    f6a4:	00000106 	br	f6ac <isatty+0x40>
    f6a8:	0005883a 	mov	r2,zero
    f6ac:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f6b0:	e0bfef17 	ldw	r2,-68(fp)
    f6b4:	10000e26 	beq	r2,zero,f6f0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f6b8:	e0bfef17 	ldw	r2,-68(fp)
    f6bc:	10800017 	ldw	r2,0(r2)
    f6c0:	10800817 	ldw	r2,32(r2)
    f6c4:	1000021e 	bne	r2,zero,f6d0 <isatty+0x64>
    {
      return 1;
    f6c8:	00800044 	movi	r2,1
    f6cc:	00000d06 	br	f704 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f6d0:	e0bff004 	addi	r2,fp,-64
    f6d4:	100b883a 	mov	r5,r2
    f6d8:	e13fff17 	ldw	r4,-4(fp)
    f6dc:	000f5780 	call	f578 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f6e0:	e0bff117 	ldw	r2,-60(fp)
    f6e4:	10880020 	cmpeqi	r2,r2,8192
    f6e8:	10803fcc 	andi	r2,r2,255
    f6ec:	00000506 	br	f704 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f6f0:	000f6300 	call	f630 <alt_get_errno>
    f6f4:	1007883a 	mov	r3,r2
    f6f8:	00801444 	movi	r2,81
    f6fc:	18800015 	stw	r2,0(r3)
    return 0;
    f700:	0005883a 	mov	r2,zero
  }
}
    f704:	e037883a 	mov	sp,fp
    f708:	dfc00117 	ldw	ra,4(sp)
    f70c:	df000017 	ldw	fp,0(sp)
    f710:	dec00204 	addi	sp,sp,8
    f714:	f800283a 	ret

0000f718 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f718:	defffc04 	addi	sp,sp,-16
    f71c:	df000315 	stw	fp,12(sp)
    f720:	df000304 	addi	fp,sp,12
    f724:	e13ffd15 	stw	r4,-12(fp)
    f728:	e17ffe15 	stw	r5,-8(fp)
    f72c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f730:	e0fffe17 	ldw	r3,-8(fp)
    f734:	e0bffd17 	ldw	r2,-12(fp)
    f738:	18800c26 	beq	r3,r2,f76c <alt_load_section+0x54>
  {
    while( to != end )
    f73c:	00000806 	br	f760 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f740:	e0bffe17 	ldw	r2,-8(fp)
    f744:	10c00104 	addi	r3,r2,4
    f748:	e0fffe15 	stw	r3,-8(fp)
    f74c:	e0fffd17 	ldw	r3,-12(fp)
    f750:	19000104 	addi	r4,r3,4
    f754:	e13ffd15 	stw	r4,-12(fp)
    f758:	18c00017 	ldw	r3,0(r3)
    f75c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f760:	e0fffe17 	ldw	r3,-8(fp)
    f764:	e0bfff17 	ldw	r2,-4(fp)
    f768:	18bff51e 	bne	r3,r2,f740 <_gp+0xffff35e4>
    {
      *to++ = *from++;
    }
  }
}
    f76c:	0001883a 	nop
    f770:	e037883a 	mov	sp,fp
    f774:	df000017 	ldw	fp,0(sp)
    f778:	dec00104 	addi	sp,sp,4
    f77c:	f800283a 	ret

0000f780 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f780:	defffe04 	addi	sp,sp,-8
    f784:	dfc00115 	stw	ra,4(sp)
    f788:	df000015 	stw	fp,0(sp)
    f78c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f790:	01800074 	movhi	r6,1
    f794:	31906704 	addi	r6,r6,16796
    f798:	01400074 	movhi	r5,1
    f79c:	2949ac04 	addi	r5,r5,9904
    f7a0:	01000074 	movhi	r4,1
    f7a4:	21106704 	addi	r4,r4,16796
    f7a8:	000f7180 	call	f718 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f7ac:	01800034 	movhi	r6,0
    f7b0:	31808c04 	addi	r6,r6,560
    f7b4:	01400034 	movhi	r5,0
    f7b8:	29400804 	addi	r5,r5,32
    f7bc:	01000034 	movhi	r4,0
    f7c0:	21000804 	addi	r4,r4,32
    f7c4:	000f7180 	call	f718 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f7c8:	01800074 	movhi	r6,1
    f7cc:	3189ac04 	addi	r6,r6,9904
    f7d0:	01400074 	movhi	r5,1
    f7d4:	29470704 	addi	r5,r5,7196
    f7d8:	01000074 	movhi	r4,1
    f7dc:	21070704 	addi	r4,r4,7196
    f7e0:	000f7180 	call	f718 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f7e4:	0010b640 	call	10b64 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f7e8:	0010d240 	call	10d24 <alt_icache_flush_all>
}
    f7ec:	0001883a 	nop
    f7f0:	e037883a 	mov	sp,fp
    f7f4:	dfc00117 	ldw	ra,4(sp)
    f7f8:	df000017 	ldw	fp,0(sp)
    f7fc:	dec00204 	addi	sp,sp,8
    f800:	f800283a 	ret

0000f804 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f804:	defffe04 	addi	sp,sp,-8
    f808:	dfc00115 	stw	ra,4(sp)
    f80c:	df000015 	stw	fp,0(sp)
    f810:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f814:	d0a00b17 	ldw	r2,-32724(gp)
    f818:	10000326 	beq	r2,zero,f828 <alt_get_errno+0x24>
    f81c:	d0a00b17 	ldw	r2,-32724(gp)
    f820:	103ee83a 	callr	r2
    f824:	00000106 	br	f82c <alt_get_errno+0x28>
    f828:	d0a6d204 	addi	r2,gp,-25784
}
    f82c:	e037883a 	mov	sp,fp
    f830:	dfc00117 	ldw	ra,4(sp)
    f834:	df000017 	ldw	fp,0(sp)
    f838:	dec00204 	addi	sp,sp,8
    f83c:	f800283a 	ret

0000f840 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f840:	defff904 	addi	sp,sp,-28
    f844:	dfc00615 	stw	ra,24(sp)
    f848:	df000515 	stw	fp,20(sp)
    f84c:	df000504 	addi	fp,sp,20
    f850:	e13ffd15 	stw	r4,-12(fp)
    f854:	e17ffe15 	stw	r5,-8(fp)
    f858:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f85c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f860:	e0bffd17 	ldw	r2,-12(fp)
    f864:	10000816 	blt	r2,zero,f888 <lseek+0x48>
    f868:	01400304 	movi	r5,12
    f86c:	e13ffd17 	ldw	r4,-12(fp)
    f870:	000cb300 	call	cb30 <__mulsi3>
    f874:	1007883a 	mov	r3,r2
    f878:	00800074 	movhi	r2,1
    f87c:	108bdf04 	addi	r2,r2,12156
    f880:	1885883a 	add	r2,r3,r2
    f884:	00000106 	br	f88c <lseek+0x4c>
    f888:	0005883a 	mov	r2,zero
    f88c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f890:	e0bffc17 	ldw	r2,-16(fp)
    f894:	10001026 	beq	r2,zero,f8d8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f898:	e0bffc17 	ldw	r2,-16(fp)
    f89c:	10800017 	ldw	r2,0(r2)
    f8a0:	10800717 	ldw	r2,28(r2)
    f8a4:	10000926 	beq	r2,zero,f8cc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f8a8:	e0bffc17 	ldw	r2,-16(fp)
    f8ac:	10800017 	ldw	r2,0(r2)
    f8b0:	10800717 	ldw	r2,28(r2)
    f8b4:	e1bfff17 	ldw	r6,-4(fp)
    f8b8:	e17ffe17 	ldw	r5,-8(fp)
    f8bc:	e13ffc17 	ldw	r4,-16(fp)
    f8c0:	103ee83a 	callr	r2
    f8c4:	e0bffb15 	stw	r2,-20(fp)
    f8c8:	00000506 	br	f8e0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f8cc:	00bfde84 	movi	r2,-134
    f8d0:	e0bffb15 	stw	r2,-20(fp)
    f8d4:	00000206 	br	f8e0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    f8d8:	00bfebc4 	movi	r2,-81
    f8dc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f8e0:	e0bffb17 	ldw	r2,-20(fp)
    f8e4:	1000070e 	bge	r2,zero,f904 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    f8e8:	000f8040 	call	f804 <alt_get_errno>
    f8ec:	1007883a 	mov	r3,r2
    f8f0:	e0bffb17 	ldw	r2,-20(fp)
    f8f4:	0085c83a 	sub	r2,zero,r2
    f8f8:	18800015 	stw	r2,0(r3)
    rc = -1;
    f8fc:	00bfffc4 	movi	r2,-1
    f900:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f904:	e0bffb17 	ldw	r2,-20(fp)
}
    f908:	e037883a 	mov	sp,fp
    f90c:	dfc00117 	ldw	ra,4(sp)
    f910:	df000017 	ldw	fp,0(sp)
    f914:	dec00204 	addi	sp,sp,8
    f918:	f800283a 	ret

0000f91c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f91c:	defffd04 	addi	sp,sp,-12
    f920:	dfc00215 	stw	ra,8(sp)
    f924:	df000115 	stw	fp,4(sp)
    f928:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f92c:	0009883a 	mov	r4,zero
    f930:	000fdf40 	call	fdf4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f934:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f938:	000fe2c0 	call	fe2c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f93c:	01800074 	movhi	r6,1
    f940:	3189a204 	addi	r6,r6,9864
    f944:	01400074 	movhi	r5,1
    f948:	2949a204 	addi	r5,r5,9864
    f94c:	01000074 	movhi	r4,1
    f950:	2109a204 	addi	r4,r4,9864
    f954:	00110c80 	call	110c8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f958:	0010c640 	call	10c64 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f95c:	01000074 	movhi	r4,1
    f960:	21033104 	addi	r4,r4,3268
    f964:	00118880 	call	11888 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f968:	d0a6d317 	ldw	r2,-25780(gp)
    f96c:	d0e6d417 	ldw	r3,-25776(gp)
    f970:	d126d517 	ldw	r4,-25772(gp)
    f974:	200d883a 	mov	r6,r4
    f978:	180b883a 	mov	r5,r3
    f97c:	1009883a 	mov	r4,r2
    f980:	00004540 	call	454 <main>
    f984:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f988:	01000044 	movi	r4,1
    f98c:	000f4380 	call	f438 <close>
  exit (result);
    f990:	e13fff17 	ldw	r4,-4(fp)
    f994:	001189c0 	call	1189c <exit>

0000f998 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f998:	defffe04 	addi	sp,sp,-8
    f99c:	df000115 	stw	fp,4(sp)
    f9a0:	df000104 	addi	fp,sp,4
    f9a4:	e13fff15 	stw	r4,-4(fp)
}
    f9a8:	0001883a 	nop
    f9ac:	e037883a 	mov	sp,fp
    f9b0:	df000017 	ldw	fp,0(sp)
    f9b4:	dec00104 	addi	sp,sp,4
    f9b8:	f800283a 	ret

0000f9bc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f9bc:	defffe04 	addi	sp,sp,-8
    f9c0:	df000115 	stw	fp,4(sp)
    f9c4:	df000104 	addi	fp,sp,4
    f9c8:	e13fff15 	stw	r4,-4(fp)
}
    f9cc:	0001883a 	nop
    f9d0:	e037883a 	mov	sp,fp
    f9d4:	df000017 	ldw	fp,0(sp)
    f9d8:	dec00104 	addi	sp,sp,4
    f9dc:	f800283a 	ret

0000f9e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f9e0:	defffe04 	addi	sp,sp,-8
    f9e4:	dfc00115 	stw	ra,4(sp)
    f9e8:	df000015 	stw	fp,0(sp)
    f9ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f9f0:	d0a00b17 	ldw	r2,-32724(gp)
    f9f4:	10000326 	beq	r2,zero,fa04 <alt_get_errno+0x24>
    f9f8:	d0a00b17 	ldw	r2,-32724(gp)
    f9fc:	103ee83a 	callr	r2
    fa00:	00000106 	br	fa08 <alt_get_errno+0x28>
    fa04:	d0a6d204 	addi	r2,gp,-25784
}
    fa08:	e037883a 	mov	sp,fp
    fa0c:	dfc00117 	ldw	ra,4(sp)
    fa10:	df000017 	ldw	fp,0(sp)
    fa14:	dec00204 	addi	sp,sp,8
    fa18:	f800283a 	ret

0000fa1c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    fa1c:	defff904 	addi	sp,sp,-28
    fa20:	dfc00615 	stw	ra,24(sp)
    fa24:	df000515 	stw	fp,20(sp)
    fa28:	df000504 	addi	fp,sp,20
    fa2c:	e13ffd15 	stw	r4,-12(fp)
    fa30:	e17ffe15 	stw	r5,-8(fp)
    fa34:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fa38:	e0bffd17 	ldw	r2,-12(fp)
    fa3c:	10000816 	blt	r2,zero,fa60 <read+0x44>
    fa40:	01400304 	movi	r5,12
    fa44:	e13ffd17 	ldw	r4,-12(fp)
    fa48:	000cb300 	call	cb30 <__mulsi3>
    fa4c:	1007883a 	mov	r3,r2
    fa50:	00800074 	movhi	r2,1
    fa54:	108bdf04 	addi	r2,r2,12156
    fa58:	1885883a 	add	r2,r3,r2
    fa5c:	00000106 	br	fa64 <read+0x48>
    fa60:	0005883a 	mov	r2,zero
    fa64:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fa68:	e0bffb17 	ldw	r2,-20(fp)
    fa6c:	10002226 	beq	r2,zero,faf8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fa70:	e0bffb17 	ldw	r2,-20(fp)
    fa74:	10800217 	ldw	r2,8(r2)
    fa78:	108000cc 	andi	r2,r2,3
    fa7c:	10800060 	cmpeqi	r2,r2,1
    fa80:	1000181e 	bne	r2,zero,fae4 <read+0xc8>
        (fd->dev->read))
    fa84:	e0bffb17 	ldw	r2,-20(fp)
    fa88:	10800017 	ldw	r2,0(r2)
    fa8c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fa90:	10001426 	beq	r2,zero,fae4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    fa94:	e0bffb17 	ldw	r2,-20(fp)
    fa98:	10800017 	ldw	r2,0(r2)
    fa9c:	10800517 	ldw	r2,20(r2)
    faa0:	e0ffff17 	ldw	r3,-4(fp)
    faa4:	180d883a 	mov	r6,r3
    faa8:	e17ffe17 	ldw	r5,-8(fp)
    faac:	e13ffb17 	ldw	r4,-20(fp)
    fab0:	103ee83a 	callr	r2
    fab4:	e0bffc15 	stw	r2,-16(fp)
    fab8:	e0bffc17 	ldw	r2,-16(fp)
    fabc:	1000070e 	bge	r2,zero,fadc <read+0xc0>
        {
          ALT_ERRNO = -rval;
    fac0:	000f9e00 	call	f9e0 <alt_get_errno>
    fac4:	1007883a 	mov	r3,r2
    fac8:	e0bffc17 	ldw	r2,-16(fp)
    facc:	0085c83a 	sub	r2,zero,r2
    fad0:	18800015 	stw	r2,0(r3)
          return -1;
    fad4:	00bfffc4 	movi	r2,-1
    fad8:	00000c06 	br	fb0c <read+0xf0>
        }
        return rval;
    fadc:	e0bffc17 	ldw	r2,-16(fp)
    fae0:	00000a06 	br	fb0c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    fae4:	000f9e00 	call	f9e0 <alt_get_errno>
    fae8:	1007883a 	mov	r3,r2
    faec:	00800344 	movi	r2,13
    faf0:	18800015 	stw	r2,0(r3)
    faf4:	00000406 	br	fb08 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    faf8:	000f9e00 	call	f9e0 <alt_get_errno>
    fafc:	1007883a 	mov	r3,r2
    fb00:	00801444 	movi	r2,81
    fb04:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fb08:	00bfffc4 	movi	r2,-1
}
    fb0c:	e037883a 	mov	sp,fp
    fb10:	dfc00117 	ldw	ra,4(sp)
    fb14:	df000017 	ldw	fp,0(sp)
    fb18:	dec00204 	addi	sp,sp,8
    fb1c:	f800283a 	ret

0000fb20 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    fb20:	defffc04 	addi	sp,sp,-16
    fb24:	dfc00315 	stw	ra,12(sp)
    fb28:	df000215 	stw	fp,8(sp)
    fb2c:	dc000115 	stw	r16,4(sp)
    fb30:	df000204 	addi	fp,sp,8
    fb34:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    fb38:	e0bffe17 	ldw	r2,-8(fp)
    fb3c:	108000d0 	cmplti	r2,r2,3
    fb40:	1000111e 	bne	r2,zero,fb88 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    fb44:	04000074 	movhi	r16,1
    fb48:	840bdf04 	addi	r16,r16,12156
    fb4c:	e0bffe17 	ldw	r2,-8(fp)
    fb50:	01400304 	movi	r5,12
    fb54:	1009883a 	mov	r4,r2
    fb58:	000cb300 	call	cb30 <__mulsi3>
    fb5c:	8085883a 	add	r2,r16,r2
    fb60:	10800204 	addi	r2,r2,8
    fb64:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    fb68:	04000074 	movhi	r16,1
    fb6c:	840bdf04 	addi	r16,r16,12156
    fb70:	e0bffe17 	ldw	r2,-8(fp)
    fb74:	01400304 	movi	r5,12
    fb78:	1009883a 	mov	r4,r2
    fb7c:	000cb300 	call	cb30 <__mulsi3>
    fb80:	8085883a 	add	r2,r16,r2
    fb84:	10000015 	stw	zero,0(r2)
  }
}
    fb88:	0001883a 	nop
    fb8c:	e6ffff04 	addi	sp,fp,-4
    fb90:	dfc00217 	ldw	ra,8(sp)
    fb94:	df000117 	ldw	fp,4(sp)
    fb98:	dc000017 	ldw	r16,0(sp)
    fb9c:	dec00304 	addi	sp,sp,12
    fba0:	f800283a 	ret

0000fba4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    fba4:	defff904 	addi	sp,sp,-28
    fba8:	df000615 	stw	fp,24(sp)
    fbac:	df000604 	addi	fp,sp,24
    fbb0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fbb4:	0005303a 	rdctl	r2,status
    fbb8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fbbc:	e0fffe17 	ldw	r3,-8(fp)
    fbc0:	00bfff84 	movi	r2,-2
    fbc4:	1884703a 	and	r2,r3,r2
    fbc8:	1001703a 	wrctl	status,r2
  
  return context;
    fbcc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    fbd0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    fbd4:	d0a00c17 	ldw	r2,-32720(gp)
    fbd8:	10c000c4 	addi	r3,r2,3
    fbdc:	00bfff04 	movi	r2,-4
    fbe0:	1884703a 	and	r2,r3,r2
    fbe4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fbe8:	d0e00c17 	ldw	r3,-32720(gp)
    fbec:	e0bfff17 	ldw	r2,-4(fp)
    fbf0:	1887883a 	add	r3,r3,r2
    fbf4:	008000b4 	movhi	r2,2
    fbf8:	10a40004 	addi	r2,r2,-28672
    fbfc:	10c0062e 	bgeu	r2,r3,fc18 <sbrk+0x74>
    fc00:	e0bffb17 	ldw	r2,-20(fp)
    fc04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc08:	e0bffa17 	ldw	r2,-24(fp)
    fc0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    fc10:	00bfffc4 	movi	r2,-1
    fc14:	00000b06 	br	fc44 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    fc18:	d0a00c17 	ldw	r2,-32720(gp)
    fc1c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    fc20:	d0e00c17 	ldw	r3,-32720(gp)
    fc24:	e0bfff17 	ldw	r2,-4(fp)
    fc28:	1885883a 	add	r2,r3,r2
    fc2c:	d0a00c15 	stw	r2,-32720(gp)
    fc30:	e0bffb17 	ldw	r2,-20(fp)
    fc34:	e0bffc15 	stw	r2,-16(fp)
    fc38:	e0bffc17 	ldw	r2,-16(fp)
    fc3c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    fc40:	e0bffd17 	ldw	r2,-12(fp)
} 
    fc44:	e037883a 	mov	sp,fp
    fc48:	df000017 	ldw	fp,0(sp)
    fc4c:	dec00104 	addi	sp,sp,4
    fc50:	f800283a 	ret

0000fc54 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    fc54:	defffd04 	addi	sp,sp,-12
    fc58:	dfc00215 	stw	ra,8(sp)
    fc5c:	df000115 	stw	fp,4(sp)
    fc60:	df000104 	addi	fp,sp,4
    fc64:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    fc68:	e13fff17 	ldw	r4,-4(fp)
    fc6c:	0010a0c0 	call	10a0c <alt_busy_sleep>
}
    fc70:	e037883a 	mov	sp,fp
    fc74:	dfc00117 	ldw	ra,4(sp)
    fc78:	df000017 	ldw	fp,0(sp)
    fc7c:	dec00204 	addi	sp,sp,8
    fc80:	f800283a 	ret

0000fc84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fc84:	defffe04 	addi	sp,sp,-8
    fc88:	dfc00115 	stw	ra,4(sp)
    fc8c:	df000015 	stw	fp,0(sp)
    fc90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fc94:	d0a00b17 	ldw	r2,-32724(gp)
    fc98:	10000326 	beq	r2,zero,fca8 <alt_get_errno+0x24>
    fc9c:	d0a00b17 	ldw	r2,-32724(gp)
    fca0:	103ee83a 	callr	r2
    fca4:	00000106 	br	fcac <alt_get_errno+0x28>
    fca8:	d0a6d204 	addi	r2,gp,-25784
}
    fcac:	e037883a 	mov	sp,fp
    fcb0:	dfc00117 	ldw	ra,4(sp)
    fcb4:	df000017 	ldw	fp,0(sp)
    fcb8:	dec00204 	addi	sp,sp,8
    fcbc:	f800283a 	ret

0000fcc0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fcc0:	defff904 	addi	sp,sp,-28
    fcc4:	dfc00615 	stw	ra,24(sp)
    fcc8:	df000515 	stw	fp,20(sp)
    fccc:	df000504 	addi	fp,sp,20
    fcd0:	e13ffd15 	stw	r4,-12(fp)
    fcd4:	e17ffe15 	stw	r5,-8(fp)
    fcd8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fcdc:	e0bffd17 	ldw	r2,-12(fp)
    fce0:	10000816 	blt	r2,zero,fd04 <write+0x44>
    fce4:	01400304 	movi	r5,12
    fce8:	e13ffd17 	ldw	r4,-12(fp)
    fcec:	000cb300 	call	cb30 <__mulsi3>
    fcf0:	1007883a 	mov	r3,r2
    fcf4:	00800074 	movhi	r2,1
    fcf8:	108bdf04 	addi	r2,r2,12156
    fcfc:	1885883a 	add	r2,r3,r2
    fd00:	00000106 	br	fd08 <write+0x48>
    fd04:	0005883a 	mov	r2,zero
    fd08:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fd0c:	e0bffb17 	ldw	r2,-20(fp)
    fd10:	10002126 	beq	r2,zero,fd98 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fd14:	e0bffb17 	ldw	r2,-20(fp)
    fd18:	10800217 	ldw	r2,8(r2)
    fd1c:	108000cc 	andi	r2,r2,3
    fd20:	10001826 	beq	r2,zero,fd84 <write+0xc4>
    fd24:	e0bffb17 	ldw	r2,-20(fp)
    fd28:	10800017 	ldw	r2,0(r2)
    fd2c:	10800617 	ldw	r2,24(r2)
    fd30:	10001426 	beq	r2,zero,fd84 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fd34:	e0bffb17 	ldw	r2,-20(fp)
    fd38:	10800017 	ldw	r2,0(r2)
    fd3c:	10800617 	ldw	r2,24(r2)
    fd40:	e0ffff17 	ldw	r3,-4(fp)
    fd44:	180d883a 	mov	r6,r3
    fd48:	e17ffe17 	ldw	r5,-8(fp)
    fd4c:	e13ffb17 	ldw	r4,-20(fp)
    fd50:	103ee83a 	callr	r2
    fd54:	e0bffc15 	stw	r2,-16(fp)
    fd58:	e0bffc17 	ldw	r2,-16(fp)
    fd5c:	1000070e 	bge	r2,zero,fd7c <write+0xbc>
      {
        ALT_ERRNO = -rval;
    fd60:	000fc840 	call	fc84 <alt_get_errno>
    fd64:	1007883a 	mov	r3,r2
    fd68:	e0bffc17 	ldw	r2,-16(fp)
    fd6c:	0085c83a 	sub	r2,zero,r2
    fd70:	18800015 	stw	r2,0(r3)
        return -1;
    fd74:	00bfffc4 	movi	r2,-1
    fd78:	00000c06 	br	fdac <write+0xec>
      }
      return rval;
    fd7c:	e0bffc17 	ldw	r2,-16(fp)
    fd80:	00000a06 	br	fdac <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    fd84:	000fc840 	call	fc84 <alt_get_errno>
    fd88:	1007883a 	mov	r3,r2
    fd8c:	00800344 	movi	r2,13
    fd90:	18800015 	stw	r2,0(r3)
    fd94:	00000406 	br	fda8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fd98:	000fc840 	call	fc84 <alt_get_errno>
    fd9c:	1007883a 	mov	r3,r2
    fda0:	00801444 	movi	r2,81
    fda4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fda8:	00bfffc4 	movi	r2,-1
}
    fdac:	e037883a 	mov	sp,fp
    fdb0:	dfc00117 	ldw	ra,4(sp)
    fdb4:	df000017 	ldw	fp,0(sp)
    fdb8:	dec00204 	addi	sp,sp,8
    fdbc:	f800283a 	ret

0000fdc0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    fdc0:	defffd04 	addi	sp,sp,-12
    fdc4:	dfc00215 	stw	ra,8(sp)
    fdc8:	df000115 	stw	fp,4(sp)
    fdcc:	df000104 	addi	fp,sp,4
    fdd0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    fdd4:	d1600804 	addi	r5,gp,-32736
    fdd8:	e13fff17 	ldw	r4,-4(fp)
    fddc:	0010bc00 	call	10bc0 <alt_dev_llist_insert>
}
    fde0:	e037883a 	mov	sp,fp
    fde4:	dfc00117 	ldw	ra,4(sp)
    fde8:	df000017 	ldw	fp,0(sp)
    fdec:	dec00204 	addi	sp,sp,8
    fdf0:	f800283a 	ret

0000fdf4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    fdf4:	defffd04 	addi	sp,sp,-12
    fdf8:	dfc00215 	stw	ra,8(sp)
    fdfc:	df000115 	stw	fp,4(sp)
    fe00:	df000104 	addi	fp,sp,4
    fe04:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    fe08:	001156c0 	call	1156c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    fe0c:	00800044 	movi	r2,1
    fe10:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    fe14:	0001883a 	nop
    fe18:	e037883a 	mov	sp,fp
    fe1c:	dfc00117 	ldw	ra,4(sp)
    fe20:	df000017 	ldw	fp,0(sp)
    fe24:	dec00204 	addi	sp,sp,8
    fe28:	f800283a 	ret

0000fe2c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    fe2c:	defffe04 	addi	sp,sp,-8
    fe30:	dfc00115 	stw	ra,4(sp)
    fe34:	df000015 	stw	fp,0(sp)
    fe38:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    fe3c:	01800144 	movi	r6,5
    fe40:	000b883a 	mov	r5,zero
    fe44:	01000074 	movhi	r4,1
    fe48:	210c4904 	addi	r4,r4,12580
    fe4c:	000ffdc0 	call	ffdc <altera_avalon_jtag_uart_init>
    fe50:	01000074 	movhi	r4,1
    fe54:	210c3f04 	addi	r4,r4,12540
    fe58:	000fdc00 	call	fdc0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    fe5c:	0001883a 	nop
}
    fe60:	0001883a 	nop
    fe64:	e037883a 	mov	sp,fp
    fe68:	dfc00117 	ldw	ra,4(sp)
    fe6c:	df000017 	ldw	fp,0(sp)
    fe70:	dec00204 	addi	sp,sp,8
    fe74:	f800283a 	ret

0000fe78 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    fe78:	defffa04 	addi	sp,sp,-24
    fe7c:	dfc00515 	stw	ra,20(sp)
    fe80:	df000415 	stw	fp,16(sp)
    fe84:	df000404 	addi	fp,sp,16
    fe88:	e13ffd15 	stw	r4,-12(fp)
    fe8c:	e17ffe15 	stw	r5,-8(fp)
    fe90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fe94:	e0bffd17 	ldw	r2,-12(fp)
    fe98:	10800017 	ldw	r2,0(r2)
    fe9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    fea0:	e0bffc17 	ldw	r2,-16(fp)
    fea4:	10c00a04 	addi	r3,r2,40
    fea8:	e0bffd17 	ldw	r2,-12(fp)
    feac:	10800217 	ldw	r2,8(r2)
    feb0:	100f883a 	mov	r7,r2
    feb4:	e1bfff17 	ldw	r6,-4(fp)
    feb8:	e17ffe17 	ldw	r5,-8(fp)
    febc:	1809883a 	mov	r4,r3
    fec0:	00104a00 	call	104a0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    fec4:	e037883a 	mov	sp,fp
    fec8:	dfc00117 	ldw	ra,4(sp)
    fecc:	df000017 	ldw	fp,0(sp)
    fed0:	dec00204 	addi	sp,sp,8
    fed4:	f800283a 	ret

0000fed8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    fed8:	defffa04 	addi	sp,sp,-24
    fedc:	dfc00515 	stw	ra,20(sp)
    fee0:	df000415 	stw	fp,16(sp)
    fee4:	df000404 	addi	fp,sp,16
    fee8:	e13ffd15 	stw	r4,-12(fp)
    feec:	e17ffe15 	stw	r5,-8(fp)
    fef0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fef4:	e0bffd17 	ldw	r2,-12(fp)
    fef8:	10800017 	ldw	r2,0(r2)
    fefc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ff00:	e0bffc17 	ldw	r2,-16(fp)
    ff04:	10c00a04 	addi	r3,r2,40
    ff08:	e0bffd17 	ldw	r2,-12(fp)
    ff0c:	10800217 	ldw	r2,8(r2)
    ff10:	100f883a 	mov	r7,r2
    ff14:	e1bfff17 	ldw	r6,-4(fp)
    ff18:	e17ffe17 	ldw	r5,-8(fp)
    ff1c:	1809883a 	mov	r4,r3
    ff20:	00106bc0 	call	106bc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    ff24:	e037883a 	mov	sp,fp
    ff28:	dfc00117 	ldw	ra,4(sp)
    ff2c:	df000017 	ldw	fp,0(sp)
    ff30:	dec00204 	addi	sp,sp,8
    ff34:	f800283a 	ret

0000ff38 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    ff38:	defffc04 	addi	sp,sp,-16
    ff3c:	dfc00315 	stw	ra,12(sp)
    ff40:	df000215 	stw	fp,8(sp)
    ff44:	df000204 	addi	fp,sp,8
    ff48:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ff4c:	e0bfff17 	ldw	r2,-4(fp)
    ff50:	10800017 	ldw	r2,0(r2)
    ff54:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    ff58:	e0bffe17 	ldw	r2,-8(fp)
    ff5c:	10c00a04 	addi	r3,r2,40
    ff60:	e0bfff17 	ldw	r2,-4(fp)
    ff64:	10800217 	ldw	r2,8(r2)
    ff68:	100b883a 	mov	r5,r2
    ff6c:	1809883a 	mov	r4,r3
    ff70:	00103480 	call	10348 <altera_avalon_jtag_uart_close>
}
    ff74:	e037883a 	mov	sp,fp
    ff78:	dfc00117 	ldw	ra,4(sp)
    ff7c:	df000017 	ldw	fp,0(sp)
    ff80:	dec00204 	addi	sp,sp,8
    ff84:	f800283a 	ret

0000ff88 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    ff88:	defffa04 	addi	sp,sp,-24
    ff8c:	dfc00515 	stw	ra,20(sp)
    ff90:	df000415 	stw	fp,16(sp)
    ff94:	df000404 	addi	fp,sp,16
    ff98:	e13ffd15 	stw	r4,-12(fp)
    ff9c:	e17ffe15 	stw	r5,-8(fp)
    ffa0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    ffa4:	e0bffd17 	ldw	r2,-12(fp)
    ffa8:	10800017 	ldw	r2,0(r2)
    ffac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ffb0:	e0bffc17 	ldw	r2,-16(fp)
    ffb4:	10800a04 	addi	r2,r2,40
    ffb8:	e1bfff17 	ldw	r6,-4(fp)
    ffbc:	e17ffe17 	ldw	r5,-8(fp)
    ffc0:	1009883a 	mov	r4,r2
    ffc4:	00103b00 	call	103b0 <altera_avalon_jtag_uart_ioctl>
}
    ffc8:	e037883a 	mov	sp,fp
    ffcc:	dfc00117 	ldw	ra,4(sp)
    ffd0:	df000017 	ldw	fp,0(sp)
    ffd4:	dec00204 	addi	sp,sp,8
    ffd8:	f800283a 	ret

0000ffdc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ffdc:	defffa04 	addi	sp,sp,-24
    ffe0:	dfc00515 	stw	ra,20(sp)
    ffe4:	df000415 	stw	fp,16(sp)
    ffe8:	df000404 	addi	fp,sp,16
    ffec:	e13ffd15 	stw	r4,-12(fp)
    fff0:	e17ffe15 	stw	r5,-8(fp)
    fff4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fff8:	e0bffd17 	ldw	r2,-12(fp)
    fffc:	00c00044 	movi	r3,1
   10000:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10004:	e0bffd17 	ldw	r2,-12(fp)
   10008:	10800017 	ldw	r2,0(r2)
   1000c:	10800104 	addi	r2,r2,4
   10010:	1007883a 	mov	r3,r2
   10014:	e0bffd17 	ldw	r2,-12(fp)
   10018:	10800817 	ldw	r2,32(r2)
   1001c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   10020:	e0bffe17 	ldw	r2,-8(fp)
   10024:	e0ffff17 	ldw	r3,-4(fp)
   10028:	d8000015 	stw	zero,0(sp)
   1002c:	e1fffd17 	ldw	r7,-12(fp)
   10030:	01800074 	movhi	r6,1
   10034:	31802704 	addi	r6,r6,156
   10038:	180b883a 	mov	r5,r3
   1003c:	1009883a 	mov	r4,r2
   10040:	0010d440 	call	10d44 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10044:	e0bffd17 	ldw	r2,-12(fp)
   10048:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1004c:	e0bffd17 	ldw	r2,-12(fp)
   10050:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10054:	d0e6d717 	ldw	r3,-25764(gp)
   10058:	e1fffd17 	ldw	r7,-12(fp)
   1005c:	01800074 	movhi	r6,1
   10060:	3180aa04 	addi	r6,r6,680
   10064:	180b883a 	mov	r5,r3
   10068:	1009883a 	mov	r4,r2
   1006c:	00108e00 	call	108e0 <alt_alarm_start>
   10070:	1000040e 	bge	r2,zero,10084 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10074:	e0fffd17 	ldw	r3,-12(fp)
   10078:	00a00034 	movhi	r2,32768
   1007c:	10bfffc4 	addi	r2,r2,-1
   10080:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10084:	0001883a 	nop
   10088:	e037883a 	mov	sp,fp
   1008c:	dfc00117 	ldw	ra,4(sp)
   10090:	df000017 	ldw	fp,0(sp)
   10094:	dec00204 	addi	sp,sp,8
   10098:	f800283a 	ret

0001009c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1009c:	defff804 	addi	sp,sp,-32
   100a0:	df000715 	stw	fp,28(sp)
   100a4:	df000704 	addi	fp,sp,28
   100a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   100ac:	e0bfff17 	ldw	r2,-4(fp)
   100b0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   100b4:	e0bffb17 	ldw	r2,-20(fp)
   100b8:	10800017 	ldw	r2,0(r2)
   100bc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   100c0:	e0bffc17 	ldw	r2,-16(fp)
   100c4:	10800104 	addi	r2,r2,4
   100c8:	10800037 	ldwio	r2,0(r2)
   100cc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   100d0:	e0bffd17 	ldw	r2,-12(fp)
   100d4:	1080c00c 	andi	r2,r2,768
   100d8:	10006d26 	beq	r2,zero,10290 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   100dc:	e0bffd17 	ldw	r2,-12(fp)
   100e0:	1080400c 	andi	r2,r2,256
   100e4:	10003526 	beq	r2,zero,101bc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   100e8:	00800074 	movhi	r2,1
   100ec:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   100f0:	e0bffb17 	ldw	r2,-20(fp)
   100f4:	10800a17 	ldw	r2,40(r2)
   100f8:	10800044 	addi	r2,r2,1
   100fc:	1081ffcc 	andi	r2,r2,2047
   10100:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   10104:	e0bffb17 	ldw	r2,-20(fp)
   10108:	10c00b17 	ldw	r3,44(r2)
   1010c:	e0bffe17 	ldw	r2,-8(fp)
   10110:	18801526 	beq	r3,r2,10168 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10114:	e0bffc17 	ldw	r2,-16(fp)
   10118:	10800037 	ldwio	r2,0(r2)
   1011c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10120:	e0bff917 	ldw	r2,-28(fp)
   10124:	10a0000c 	andi	r2,r2,32768
   10128:	10001126 	beq	r2,zero,10170 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1012c:	e0bffb17 	ldw	r2,-20(fp)
   10130:	10800a17 	ldw	r2,40(r2)
   10134:	e0fff917 	ldw	r3,-28(fp)
   10138:	1809883a 	mov	r4,r3
   1013c:	e0fffb17 	ldw	r3,-20(fp)
   10140:	1885883a 	add	r2,r3,r2
   10144:	10800e04 	addi	r2,r2,56
   10148:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1014c:	e0bffb17 	ldw	r2,-20(fp)
   10150:	10800a17 	ldw	r2,40(r2)
   10154:	10800044 	addi	r2,r2,1
   10158:	10c1ffcc 	andi	r3,r2,2047
   1015c:	e0bffb17 	ldw	r2,-20(fp)
   10160:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10164:	003fe206 	br	100f0 <_gp+0xffff3f94>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   10168:	0001883a 	nop
   1016c:	00000106 	br	10174 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   10170:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10174:	e0bff917 	ldw	r2,-28(fp)
   10178:	10bfffec 	andhi	r2,r2,65535
   1017c:	10000f26 	beq	r2,zero,101bc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10180:	e0bffb17 	ldw	r2,-20(fp)
   10184:	10c00817 	ldw	r3,32(r2)
   10188:	00bfff84 	movi	r2,-2
   1018c:	1886703a 	and	r3,r3,r2
   10190:	e0bffb17 	ldw	r2,-20(fp)
   10194:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10198:	e0bffc17 	ldw	r2,-16(fp)
   1019c:	10800104 	addi	r2,r2,4
   101a0:	1007883a 	mov	r3,r2
   101a4:	e0bffb17 	ldw	r2,-20(fp)
   101a8:	10800817 	ldw	r2,32(r2)
   101ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   101b0:	e0bffc17 	ldw	r2,-16(fp)
   101b4:	10800104 	addi	r2,r2,4
   101b8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   101bc:	e0bffd17 	ldw	r2,-12(fp)
   101c0:	1080800c 	andi	r2,r2,512
   101c4:	103fbe26 	beq	r2,zero,100c0 <_gp+0xffff3f64>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   101c8:	e0bffd17 	ldw	r2,-12(fp)
   101cc:	1004d43a 	srli	r2,r2,16
   101d0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   101d4:	00001406 	br	10228 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   101d8:	e0bffc17 	ldw	r2,-16(fp)
   101dc:	e0fffb17 	ldw	r3,-20(fp)
   101e0:	18c00d17 	ldw	r3,52(r3)
   101e4:	e13ffb17 	ldw	r4,-20(fp)
   101e8:	20c7883a 	add	r3,r4,r3
   101ec:	18c20e04 	addi	r3,r3,2104
   101f0:	18c00003 	ldbu	r3,0(r3)
   101f4:	18c03fcc 	andi	r3,r3,255
   101f8:	18c0201c 	xori	r3,r3,128
   101fc:	18ffe004 	addi	r3,r3,-128
   10200:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10204:	e0bffb17 	ldw	r2,-20(fp)
   10208:	10800d17 	ldw	r2,52(r2)
   1020c:	10800044 	addi	r2,r2,1
   10210:	10c1ffcc 	andi	r3,r2,2047
   10214:	e0bffb17 	ldw	r2,-20(fp)
   10218:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1021c:	e0bffa17 	ldw	r2,-24(fp)
   10220:	10bfffc4 	addi	r2,r2,-1
   10224:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10228:	e0bffa17 	ldw	r2,-24(fp)
   1022c:	10000526 	beq	r2,zero,10244 <altera_avalon_jtag_uart_irq+0x1a8>
   10230:	e0bffb17 	ldw	r2,-20(fp)
   10234:	10c00d17 	ldw	r3,52(r2)
   10238:	e0bffb17 	ldw	r2,-20(fp)
   1023c:	10800c17 	ldw	r2,48(r2)
   10240:	18bfe51e 	bne	r3,r2,101d8 <_gp+0xffff407c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   10244:	e0bffa17 	ldw	r2,-24(fp)
   10248:	103f9d26 	beq	r2,zero,100c0 <_gp+0xffff3f64>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1024c:	e0bffb17 	ldw	r2,-20(fp)
   10250:	10c00817 	ldw	r3,32(r2)
   10254:	00bfff44 	movi	r2,-3
   10258:	1886703a 	and	r3,r3,r2
   1025c:	e0bffb17 	ldw	r2,-20(fp)
   10260:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10264:	e0bffb17 	ldw	r2,-20(fp)
   10268:	10800017 	ldw	r2,0(r2)
   1026c:	10800104 	addi	r2,r2,4
   10270:	1007883a 	mov	r3,r2
   10274:	e0bffb17 	ldw	r2,-20(fp)
   10278:	10800817 	ldw	r2,32(r2)
   1027c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10280:	e0bffc17 	ldw	r2,-16(fp)
   10284:	10800104 	addi	r2,r2,4
   10288:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1028c:	003f8c06 	br	100c0 <_gp+0xffff3f64>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   10290:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   10294:	0001883a 	nop
   10298:	e037883a 	mov	sp,fp
   1029c:	df000017 	ldw	fp,0(sp)
   102a0:	dec00104 	addi	sp,sp,4
   102a4:	f800283a 	ret

000102a8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   102a8:	defff804 	addi	sp,sp,-32
   102ac:	df000715 	stw	fp,28(sp)
   102b0:	df000704 	addi	fp,sp,28
   102b4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   102b8:	e0bffb17 	ldw	r2,-20(fp)
   102bc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   102c0:	e0bff917 	ldw	r2,-28(fp)
   102c4:	10800017 	ldw	r2,0(r2)
   102c8:	10800104 	addi	r2,r2,4
   102cc:	10800037 	ldwio	r2,0(r2)
   102d0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   102d4:	e0bffa17 	ldw	r2,-24(fp)
   102d8:	1081000c 	andi	r2,r2,1024
   102dc:	10000b26 	beq	r2,zero,1030c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   102e0:	e0bff917 	ldw	r2,-28(fp)
   102e4:	10800017 	ldw	r2,0(r2)
   102e8:	10800104 	addi	r2,r2,4
   102ec:	1007883a 	mov	r3,r2
   102f0:	e0bff917 	ldw	r2,-28(fp)
   102f4:	10800817 	ldw	r2,32(r2)
   102f8:	10810014 	ori	r2,r2,1024
   102fc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10300:	e0bff917 	ldw	r2,-28(fp)
   10304:	10000915 	stw	zero,36(r2)
   10308:	00000a06 	br	10334 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1030c:	e0bff917 	ldw	r2,-28(fp)
   10310:	10c00917 	ldw	r3,36(r2)
   10314:	00a00034 	movhi	r2,32768
   10318:	10bfff04 	addi	r2,r2,-4
   1031c:	10c00536 	bltu	r2,r3,10334 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10320:	e0bff917 	ldw	r2,-28(fp)
   10324:	10800917 	ldw	r2,36(r2)
   10328:	10c00044 	addi	r3,r2,1
   1032c:	e0bff917 	ldw	r2,-28(fp)
   10330:	10c00915 	stw	r3,36(r2)
   10334:	d0a6d717 	ldw	r2,-25764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10338:	e037883a 	mov	sp,fp
   1033c:	df000017 	ldw	fp,0(sp)
   10340:	dec00104 	addi	sp,sp,4
   10344:	f800283a 	ret

00010348 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10348:	defffd04 	addi	sp,sp,-12
   1034c:	df000215 	stw	fp,8(sp)
   10350:	df000204 	addi	fp,sp,8
   10354:	e13ffe15 	stw	r4,-8(fp)
   10358:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1035c:	00000506 	br	10374 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10360:	e0bfff17 	ldw	r2,-4(fp)
   10364:	1090000c 	andi	r2,r2,16384
   10368:	10000226 	beq	r2,zero,10374 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1036c:	00bffd44 	movi	r2,-11
   10370:	00000b06 	br	103a0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10374:	e0bffe17 	ldw	r2,-8(fp)
   10378:	10c00d17 	ldw	r3,52(r2)
   1037c:	e0bffe17 	ldw	r2,-8(fp)
   10380:	10800c17 	ldw	r2,48(r2)
   10384:	18800526 	beq	r3,r2,1039c <altera_avalon_jtag_uart_close+0x54>
   10388:	e0bffe17 	ldw	r2,-8(fp)
   1038c:	10c00917 	ldw	r3,36(r2)
   10390:	e0bffe17 	ldw	r2,-8(fp)
   10394:	10800117 	ldw	r2,4(r2)
   10398:	18bff136 	bltu	r3,r2,10360 <_gp+0xffff4204>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1039c:	0005883a 	mov	r2,zero
}
   103a0:	e037883a 	mov	sp,fp
   103a4:	df000017 	ldw	fp,0(sp)
   103a8:	dec00104 	addi	sp,sp,4
   103ac:	f800283a 	ret

000103b0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   103b0:	defffa04 	addi	sp,sp,-24
   103b4:	df000515 	stw	fp,20(sp)
   103b8:	df000504 	addi	fp,sp,20
   103bc:	e13ffd15 	stw	r4,-12(fp)
   103c0:	e17ffe15 	stw	r5,-8(fp)
   103c4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   103c8:	00bff9c4 	movi	r2,-25
   103cc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   103d0:	e0bffe17 	ldw	r2,-8(fp)
   103d4:	10da8060 	cmpeqi	r3,r2,27137
   103d8:	1800031e 	bne	r3,zero,103e8 <altera_avalon_jtag_uart_ioctl+0x38>
   103dc:	109a80a0 	cmpeqi	r2,r2,27138
   103e0:	1000181e 	bne	r2,zero,10444 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   103e4:	00002906 	br	1048c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   103e8:	e0bffd17 	ldw	r2,-12(fp)
   103ec:	10c00117 	ldw	r3,4(r2)
   103f0:	00a00034 	movhi	r2,32768
   103f4:	10bfffc4 	addi	r2,r2,-1
   103f8:	18802126 	beq	r3,r2,10480 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   103fc:	e0bfff17 	ldw	r2,-4(fp)
   10400:	10800017 	ldw	r2,0(r2)
   10404:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10408:	e0bffc17 	ldw	r2,-16(fp)
   1040c:	10800090 	cmplti	r2,r2,2
   10410:	1000061e 	bne	r2,zero,1042c <altera_avalon_jtag_uart_ioctl+0x7c>
   10414:	e0fffc17 	ldw	r3,-16(fp)
   10418:	00a00034 	movhi	r2,32768
   1041c:	10bfffc4 	addi	r2,r2,-1
   10420:	18800226 	beq	r3,r2,1042c <altera_avalon_jtag_uart_ioctl+0x7c>
   10424:	e0bffc17 	ldw	r2,-16(fp)
   10428:	00000206 	br	10434 <altera_avalon_jtag_uart_ioctl+0x84>
   1042c:	00a00034 	movhi	r2,32768
   10430:	10bfff84 	addi	r2,r2,-2
   10434:	e0fffd17 	ldw	r3,-12(fp)
   10438:	18800115 	stw	r2,4(r3)
      rc = 0;
   1043c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10440:	00000f06 	br	10480 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10444:	e0bffd17 	ldw	r2,-12(fp)
   10448:	10c00117 	ldw	r3,4(r2)
   1044c:	00a00034 	movhi	r2,32768
   10450:	10bfffc4 	addi	r2,r2,-1
   10454:	18800c26 	beq	r3,r2,10488 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10458:	e0bffd17 	ldw	r2,-12(fp)
   1045c:	10c00917 	ldw	r3,36(r2)
   10460:	e0bffd17 	ldw	r2,-12(fp)
   10464:	10800117 	ldw	r2,4(r2)
   10468:	1885803a 	cmpltu	r2,r3,r2
   1046c:	10c03fcc 	andi	r3,r2,255
   10470:	e0bfff17 	ldw	r2,-4(fp)
   10474:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10478:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1047c:	00000206 	br	10488 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10480:	0001883a 	nop
   10484:	00000106 	br	1048c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   10488:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1048c:	e0bffb17 	ldw	r2,-20(fp)
}
   10490:	e037883a 	mov	sp,fp
   10494:	df000017 	ldw	fp,0(sp)
   10498:	dec00104 	addi	sp,sp,4
   1049c:	f800283a 	ret

000104a0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   104a0:	defff304 	addi	sp,sp,-52
   104a4:	dfc00c15 	stw	ra,48(sp)
   104a8:	df000b15 	stw	fp,44(sp)
   104ac:	df000b04 	addi	fp,sp,44
   104b0:	e13ffc15 	stw	r4,-16(fp)
   104b4:	e17ffd15 	stw	r5,-12(fp)
   104b8:	e1bffe15 	stw	r6,-8(fp)
   104bc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   104c0:	e0bffd17 	ldw	r2,-12(fp)
   104c4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   104c8:	00004706 	br	105e8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   104cc:	e0bffc17 	ldw	r2,-16(fp)
   104d0:	10800a17 	ldw	r2,40(r2)
   104d4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   104d8:	e0bffc17 	ldw	r2,-16(fp)
   104dc:	10800b17 	ldw	r2,44(r2)
   104e0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   104e4:	e0fff717 	ldw	r3,-36(fp)
   104e8:	e0bff817 	ldw	r2,-32(fp)
   104ec:	18800536 	bltu	r3,r2,10504 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   104f0:	e0fff717 	ldw	r3,-36(fp)
   104f4:	e0bff817 	ldw	r2,-32(fp)
   104f8:	1885c83a 	sub	r2,r3,r2
   104fc:	e0bff615 	stw	r2,-40(fp)
   10500:	00000406 	br	10514 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10504:	00c20004 	movi	r3,2048
   10508:	e0bff817 	ldw	r2,-32(fp)
   1050c:	1885c83a 	sub	r2,r3,r2
   10510:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10514:	e0bff617 	ldw	r2,-40(fp)
   10518:	10001e26 	beq	r2,zero,10594 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   1051c:	e0fffe17 	ldw	r3,-8(fp)
   10520:	e0bff617 	ldw	r2,-40(fp)
   10524:	1880022e 	bgeu	r3,r2,10530 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   10528:	e0bffe17 	ldw	r2,-8(fp)
   1052c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10530:	e0bffc17 	ldw	r2,-16(fp)
   10534:	10c00e04 	addi	r3,r2,56
   10538:	e0bff817 	ldw	r2,-32(fp)
   1053c:	1885883a 	add	r2,r3,r2
   10540:	e1bff617 	ldw	r6,-40(fp)
   10544:	100b883a 	mov	r5,r2
   10548:	e13ff517 	ldw	r4,-44(fp)
   1054c:	00080b00 	call	80b0 <memcpy>
      ptr   += n;
   10550:	e0fff517 	ldw	r3,-44(fp)
   10554:	e0bff617 	ldw	r2,-40(fp)
   10558:	1885883a 	add	r2,r3,r2
   1055c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10560:	e0fffe17 	ldw	r3,-8(fp)
   10564:	e0bff617 	ldw	r2,-40(fp)
   10568:	1885c83a 	sub	r2,r3,r2
   1056c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10570:	e0fff817 	ldw	r3,-32(fp)
   10574:	e0bff617 	ldw	r2,-40(fp)
   10578:	1885883a 	add	r2,r3,r2
   1057c:	10c1ffcc 	andi	r3,r2,2047
   10580:	e0bffc17 	ldw	r2,-16(fp)
   10584:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10588:	e0bffe17 	ldw	r2,-8(fp)
   1058c:	00bfcf16 	blt	zero,r2,104cc <_gp+0xffff4370>
   10590:	00000106 	br	10598 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   10594:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   10598:	e0fff517 	ldw	r3,-44(fp)
   1059c:	e0bffd17 	ldw	r2,-12(fp)
   105a0:	1880141e 	bne	r3,r2,105f4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   105a4:	e0bfff17 	ldw	r2,-4(fp)
   105a8:	1090000c 	andi	r2,r2,16384
   105ac:	1000131e 	bne	r2,zero,105fc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   105b0:	0001883a 	nop
   105b4:	e0bffc17 	ldw	r2,-16(fp)
   105b8:	10c00a17 	ldw	r3,40(r2)
   105bc:	e0bff717 	ldw	r2,-36(fp)
   105c0:	1880051e 	bne	r3,r2,105d8 <altera_avalon_jtag_uart_read+0x138>
   105c4:	e0bffc17 	ldw	r2,-16(fp)
   105c8:	10c00917 	ldw	r3,36(r2)
   105cc:	e0bffc17 	ldw	r2,-16(fp)
   105d0:	10800117 	ldw	r2,4(r2)
   105d4:	18bff736 	bltu	r3,r2,105b4 <_gp+0xffff4458>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   105d8:	e0bffc17 	ldw	r2,-16(fp)
   105dc:	10c00a17 	ldw	r3,40(r2)
   105e0:	e0bff717 	ldw	r2,-36(fp)
   105e4:	18800726 	beq	r3,r2,10604 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   105e8:	e0bffe17 	ldw	r2,-8(fp)
   105ec:	00bfb716 	blt	zero,r2,104cc <_gp+0xffff4370>
   105f0:	00000506 	br	10608 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   105f4:	0001883a 	nop
   105f8:	00000306 	br	10608 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   105fc:	0001883a 	nop
   10600:	00000106 	br	10608 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   10604:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   10608:	e0fff517 	ldw	r3,-44(fp)
   1060c:	e0bffd17 	ldw	r2,-12(fp)
   10610:	18801826 	beq	r3,r2,10674 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10614:	0005303a 	rdctl	r2,status
   10618:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1061c:	e0fffb17 	ldw	r3,-20(fp)
   10620:	00bfff84 	movi	r2,-2
   10624:	1884703a 	and	r2,r3,r2
   10628:	1001703a 	wrctl	status,r2
  
  return context;
   1062c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10630:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10634:	e0bffc17 	ldw	r2,-16(fp)
   10638:	10800817 	ldw	r2,32(r2)
   1063c:	10c00054 	ori	r3,r2,1
   10640:	e0bffc17 	ldw	r2,-16(fp)
   10644:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10648:	e0bffc17 	ldw	r2,-16(fp)
   1064c:	10800017 	ldw	r2,0(r2)
   10650:	10800104 	addi	r2,r2,4
   10654:	1007883a 	mov	r3,r2
   10658:	e0bffc17 	ldw	r2,-16(fp)
   1065c:	10800817 	ldw	r2,32(r2)
   10660:	18800035 	stwio	r2,0(r3)
   10664:	e0bffa17 	ldw	r2,-24(fp)
   10668:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1066c:	e0bff917 	ldw	r2,-28(fp)
   10670:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10674:	e0fff517 	ldw	r3,-44(fp)
   10678:	e0bffd17 	ldw	r2,-12(fp)
   1067c:	18800426 	beq	r3,r2,10690 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   10680:	e0fff517 	ldw	r3,-44(fp)
   10684:	e0bffd17 	ldw	r2,-12(fp)
   10688:	1885c83a 	sub	r2,r3,r2
   1068c:	00000606 	br	106a8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   10690:	e0bfff17 	ldw	r2,-4(fp)
   10694:	1090000c 	andi	r2,r2,16384
   10698:	10000226 	beq	r2,zero,106a4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1069c:	00bffd44 	movi	r2,-11
   106a0:	00000106 	br	106a8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   106a4:	00bffec4 	movi	r2,-5
}
   106a8:	e037883a 	mov	sp,fp
   106ac:	dfc00117 	ldw	ra,4(sp)
   106b0:	df000017 	ldw	fp,0(sp)
   106b4:	dec00204 	addi	sp,sp,8
   106b8:	f800283a 	ret

000106bc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   106bc:	defff304 	addi	sp,sp,-52
   106c0:	dfc00c15 	stw	ra,48(sp)
   106c4:	df000b15 	stw	fp,44(sp)
   106c8:	df000b04 	addi	fp,sp,44
   106cc:	e13ffc15 	stw	r4,-16(fp)
   106d0:	e17ffd15 	stw	r5,-12(fp)
   106d4:	e1bffe15 	stw	r6,-8(fp)
   106d8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   106dc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   106e0:	e0bffd17 	ldw	r2,-12(fp)
   106e4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   106e8:	00003706 	br	107c8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   106ec:	e0bffc17 	ldw	r2,-16(fp)
   106f0:	10800c17 	ldw	r2,48(r2)
   106f4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   106f8:	e0bffc17 	ldw	r2,-16(fp)
   106fc:	10800d17 	ldw	r2,52(r2)
   10700:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10704:	e0fff917 	ldw	r3,-28(fp)
   10708:	e0bff517 	ldw	r2,-44(fp)
   1070c:	1880062e 	bgeu	r3,r2,10728 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10710:	e0fff517 	ldw	r3,-44(fp)
   10714:	e0bff917 	ldw	r2,-28(fp)
   10718:	1885c83a 	sub	r2,r3,r2
   1071c:	10bfffc4 	addi	r2,r2,-1
   10720:	e0bff615 	stw	r2,-40(fp)
   10724:	00000b06 	br	10754 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   10728:	e0bff517 	ldw	r2,-44(fp)
   1072c:	10000526 	beq	r2,zero,10744 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10730:	00c20004 	movi	r3,2048
   10734:	e0bff917 	ldw	r2,-28(fp)
   10738:	1885c83a 	sub	r2,r3,r2
   1073c:	e0bff615 	stw	r2,-40(fp)
   10740:	00000406 	br	10754 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10744:	00c1ffc4 	movi	r3,2047
   10748:	e0bff917 	ldw	r2,-28(fp)
   1074c:	1885c83a 	sub	r2,r3,r2
   10750:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10754:	e0bff617 	ldw	r2,-40(fp)
   10758:	10001e26 	beq	r2,zero,107d4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1075c:	e0fffe17 	ldw	r3,-8(fp)
   10760:	e0bff617 	ldw	r2,-40(fp)
   10764:	1880022e 	bgeu	r3,r2,10770 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10768:	e0bffe17 	ldw	r2,-8(fp)
   1076c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10770:	e0bffc17 	ldw	r2,-16(fp)
   10774:	10c20e04 	addi	r3,r2,2104
   10778:	e0bff917 	ldw	r2,-28(fp)
   1077c:	1885883a 	add	r2,r3,r2
   10780:	e1bff617 	ldw	r6,-40(fp)
   10784:	e17ffd17 	ldw	r5,-12(fp)
   10788:	1009883a 	mov	r4,r2
   1078c:	00080b00 	call	80b0 <memcpy>
      ptr   += n;
   10790:	e0fffd17 	ldw	r3,-12(fp)
   10794:	e0bff617 	ldw	r2,-40(fp)
   10798:	1885883a 	add	r2,r3,r2
   1079c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   107a0:	e0fffe17 	ldw	r3,-8(fp)
   107a4:	e0bff617 	ldw	r2,-40(fp)
   107a8:	1885c83a 	sub	r2,r3,r2
   107ac:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   107b0:	e0fff917 	ldw	r3,-28(fp)
   107b4:	e0bff617 	ldw	r2,-40(fp)
   107b8:	1885883a 	add	r2,r3,r2
   107bc:	10c1ffcc 	andi	r3,r2,2047
   107c0:	e0bffc17 	ldw	r2,-16(fp)
   107c4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   107c8:	e0bffe17 	ldw	r2,-8(fp)
   107cc:	00bfc716 	blt	zero,r2,106ec <_gp+0xffff4590>
   107d0:	00000106 	br	107d8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   107d4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107d8:	0005303a 	rdctl	r2,status
   107dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107e0:	e0fffb17 	ldw	r3,-20(fp)
   107e4:	00bfff84 	movi	r2,-2
   107e8:	1884703a 	and	r2,r3,r2
   107ec:	1001703a 	wrctl	status,r2
  
  return context;
   107f0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   107f4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   107f8:	e0bffc17 	ldw	r2,-16(fp)
   107fc:	10800817 	ldw	r2,32(r2)
   10800:	10c00094 	ori	r3,r2,2
   10804:	e0bffc17 	ldw	r2,-16(fp)
   10808:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1080c:	e0bffc17 	ldw	r2,-16(fp)
   10810:	10800017 	ldw	r2,0(r2)
   10814:	10800104 	addi	r2,r2,4
   10818:	1007883a 	mov	r3,r2
   1081c:	e0bffc17 	ldw	r2,-16(fp)
   10820:	10800817 	ldw	r2,32(r2)
   10824:	18800035 	stwio	r2,0(r3)
   10828:	e0bffa17 	ldw	r2,-24(fp)
   1082c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10830:	e0bff817 	ldw	r2,-32(fp)
   10834:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10838:	e0bffe17 	ldw	r2,-8(fp)
   1083c:	0080100e 	bge	zero,r2,10880 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   10840:	e0bfff17 	ldw	r2,-4(fp)
   10844:	1090000c 	andi	r2,r2,16384
   10848:	1000101e 	bne	r2,zero,1088c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1084c:	0001883a 	nop
   10850:	e0bffc17 	ldw	r2,-16(fp)
   10854:	10c00d17 	ldw	r3,52(r2)
   10858:	e0bff517 	ldw	r2,-44(fp)
   1085c:	1880051e 	bne	r3,r2,10874 <altera_avalon_jtag_uart_write+0x1b8>
   10860:	e0bffc17 	ldw	r2,-16(fp)
   10864:	10c00917 	ldw	r3,36(r2)
   10868:	e0bffc17 	ldw	r2,-16(fp)
   1086c:	10800117 	ldw	r2,4(r2)
   10870:	18bff736 	bltu	r3,r2,10850 <_gp+0xffff46f4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10874:	e0bffc17 	ldw	r2,-16(fp)
   10878:	10800917 	ldw	r2,36(r2)
   1087c:	1000051e 	bne	r2,zero,10894 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   10880:	e0bffe17 	ldw	r2,-8(fp)
   10884:	00bfd016 	blt	zero,r2,107c8 <_gp+0xffff466c>
   10888:	00000306 	br	10898 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1088c:	0001883a 	nop
   10890:	00000106 	br	10898 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   10894:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10898:	e0fffd17 	ldw	r3,-12(fp)
   1089c:	e0bff717 	ldw	r2,-36(fp)
   108a0:	18800426 	beq	r3,r2,108b4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   108a4:	e0fffd17 	ldw	r3,-12(fp)
   108a8:	e0bff717 	ldw	r2,-36(fp)
   108ac:	1885c83a 	sub	r2,r3,r2
   108b0:	00000606 	br	108cc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   108b4:	e0bfff17 	ldw	r2,-4(fp)
   108b8:	1090000c 	andi	r2,r2,16384
   108bc:	10000226 	beq	r2,zero,108c8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   108c0:	00bffd44 	movi	r2,-11
   108c4:	00000106 	br	108cc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   108c8:	00bffec4 	movi	r2,-5
}
   108cc:	e037883a 	mov	sp,fp
   108d0:	dfc00117 	ldw	ra,4(sp)
   108d4:	df000017 	ldw	fp,0(sp)
   108d8:	dec00204 	addi	sp,sp,8
   108dc:	f800283a 	ret

000108e0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   108e0:	defff504 	addi	sp,sp,-44
   108e4:	df000a15 	stw	fp,40(sp)
   108e8:	df000a04 	addi	fp,sp,40
   108ec:	e13ffc15 	stw	r4,-16(fp)
   108f0:	e17ffd15 	stw	r5,-12(fp)
   108f4:	e1bffe15 	stw	r6,-8(fp)
   108f8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   108fc:	e03ff615 	stw	zero,-40(fp)
   10900:	d0a6d717 	ldw	r2,-25764(gp)
  
  if (alt_ticks_per_second ())
   10904:	10003c26 	beq	r2,zero,109f8 <alt_alarm_start+0x118>
  {
    if (alarm)
   10908:	e0bffc17 	ldw	r2,-16(fp)
   1090c:	10003826 	beq	r2,zero,109f0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10910:	e0bffc17 	ldw	r2,-16(fp)
   10914:	e0fffe17 	ldw	r3,-8(fp)
   10918:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1091c:	e0bffc17 	ldw	r2,-16(fp)
   10920:	e0ffff17 	ldw	r3,-4(fp)
   10924:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10928:	0005303a 	rdctl	r2,status
   1092c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10930:	e0fff917 	ldw	r3,-28(fp)
   10934:	00bfff84 	movi	r2,-2
   10938:	1884703a 	and	r2,r3,r2
   1093c:	1001703a 	wrctl	status,r2
  
  return context;
   10940:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   10944:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10948:	d0a6d817 	ldw	r2,-25760(gp)
      
      current_nticks = alt_nticks();
   1094c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10950:	e0fffd17 	ldw	r3,-12(fp)
   10954:	e0bff617 	ldw	r2,-40(fp)
   10958:	1885883a 	add	r2,r3,r2
   1095c:	10c00044 	addi	r3,r2,1
   10960:	e0bffc17 	ldw	r2,-16(fp)
   10964:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10968:	e0bffc17 	ldw	r2,-16(fp)
   1096c:	10c00217 	ldw	r3,8(r2)
   10970:	e0bff617 	ldw	r2,-40(fp)
   10974:	1880042e 	bgeu	r3,r2,10988 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10978:	e0bffc17 	ldw	r2,-16(fp)
   1097c:	00c00044 	movi	r3,1
   10980:	10c00405 	stb	r3,16(r2)
   10984:	00000206 	br	10990 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10988:	e0bffc17 	ldw	r2,-16(fp)
   1098c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10990:	e0bffc17 	ldw	r2,-16(fp)
   10994:	d0e00e04 	addi	r3,gp,-32712
   10998:	e0fffa15 	stw	r3,-24(fp)
   1099c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   109a0:	e0bffb17 	ldw	r2,-20(fp)
   109a4:	e0fffa17 	ldw	r3,-24(fp)
   109a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   109ac:	e0bffa17 	ldw	r2,-24(fp)
   109b0:	10c00017 	ldw	r3,0(r2)
   109b4:	e0bffb17 	ldw	r2,-20(fp)
   109b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   109bc:	e0bffa17 	ldw	r2,-24(fp)
   109c0:	10800017 	ldw	r2,0(r2)
   109c4:	e0fffb17 	ldw	r3,-20(fp)
   109c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   109cc:	e0bffa17 	ldw	r2,-24(fp)
   109d0:	e0fffb17 	ldw	r3,-20(fp)
   109d4:	10c00015 	stw	r3,0(r2)
   109d8:	e0bff817 	ldw	r2,-32(fp)
   109dc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   109e0:	e0bff717 	ldw	r2,-36(fp)
   109e4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   109e8:	0005883a 	mov	r2,zero
   109ec:	00000306 	br	109fc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   109f0:	00bffa84 	movi	r2,-22
   109f4:	00000106 	br	109fc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   109f8:	00bfde84 	movi	r2,-134
  }
}
   109fc:	e037883a 	mov	sp,fp
   10a00:	df000017 	ldw	fp,0(sp)
   10a04:	dec00104 	addi	sp,sp,4
   10a08:	f800283a 	ret

00010a0c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10a0c:	defffa04 	addi	sp,sp,-24
   10a10:	dfc00515 	stw	ra,20(sp)
   10a14:	df000415 	stw	fp,16(sp)
   10a18:	df000404 	addi	fp,sp,16
   10a1c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   10a20:	00800244 	movi	r2,9
   10a24:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10a28:	014003f4 	movhi	r5,15
   10a2c:	29509004 	addi	r5,r5,16960
   10a30:	e13ffd17 	ldw	r4,-12(fp)
   10a34:	000cb300 	call	cb30 <__mulsi3>
   10a38:	100b883a 	mov	r5,r2
   10a3c:	0100bef4 	movhi	r4,763
   10a40:	213c2004 	addi	r4,r4,-3968
   10a44:	000ca740 	call	ca74 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10a48:	100b883a 	mov	r5,r2
   10a4c:	01200034 	movhi	r4,32768
   10a50:	213fffc4 	addi	r4,r4,-1
   10a54:	000ca740 	call	ca74 <__udivsi3>
   10a58:	100b883a 	mov	r5,r2
   10a5c:	e13fff17 	ldw	r4,-4(fp)
   10a60:	000ca740 	call	ca74 <__udivsi3>
   10a64:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10a68:	e0bffe17 	ldw	r2,-8(fp)
   10a6c:	10002a26 	beq	r2,zero,10b18 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10a70:	e03ffc15 	stw	zero,-16(fp)
   10a74:	00001706 	br	10ad4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10a78:	00a00034 	movhi	r2,32768
   10a7c:	10bfffc4 	addi	r2,r2,-1
   10a80:	10bfffc4 	addi	r2,r2,-1
   10a84:	103ffe1e 	bne	r2,zero,10a80 <_gp+0xffff4924>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10a88:	014003f4 	movhi	r5,15
   10a8c:	29509004 	addi	r5,r5,16960
   10a90:	e13ffd17 	ldw	r4,-12(fp)
   10a94:	000cb300 	call	cb30 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10a98:	100b883a 	mov	r5,r2
   10a9c:	0100bef4 	movhi	r4,763
   10aa0:	213c2004 	addi	r4,r4,-3968
   10aa4:	000ca740 	call	ca74 <__udivsi3>
   10aa8:	100b883a 	mov	r5,r2
   10aac:	01200034 	movhi	r4,32768
   10ab0:	213fffc4 	addi	r4,r4,-1
   10ab4:	000ca740 	call	ca74 <__udivsi3>
   10ab8:	1007883a 	mov	r3,r2
   10abc:	e0bfff17 	ldw	r2,-4(fp)
   10ac0:	10c5c83a 	sub	r2,r2,r3
   10ac4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10ac8:	e0bffc17 	ldw	r2,-16(fp)
   10acc:	10800044 	addi	r2,r2,1
   10ad0:	e0bffc15 	stw	r2,-16(fp)
   10ad4:	e0fffc17 	ldw	r3,-16(fp)
   10ad8:	e0bffe17 	ldw	r2,-8(fp)
   10adc:	18bfe616 	blt	r3,r2,10a78 <_gp+0xffff491c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10ae0:	014003f4 	movhi	r5,15
   10ae4:	29509004 	addi	r5,r5,16960
   10ae8:	e13ffd17 	ldw	r4,-12(fp)
   10aec:	000cb300 	call	cb30 <__mulsi3>
   10af0:	100b883a 	mov	r5,r2
   10af4:	0100bef4 	movhi	r4,763
   10af8:	213c2004 	addi	r4,r4,-3968
   10afc:	000ca740 	call	ca74 <__udivsi3>
   10b00:	e17fff17 	ldw	r5,-4(fp)
   10b04:	1009883a 	mov	r4,r2
   10b08:	000cb300 	call	cb30 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10b0c:	10bfffc4 	addi	r2,r2,-1
   10b10:	103ffe1e 	bne	r2,zero,10b0c <_gp+0xffff49b0>
   10b14:	00000d06 	br	10b4c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10b18:	014003f4 	movhi	r5,15
   10b1c:	29509004 	addi	r5,r5,16960
   10b20:	e13ffd17 	ldw	r4,-12(fp)
   10b24:	000cb300 	call	cb30 <__mulsi3>
   10b28:	100b883a 	mov	r5,r2
   10b2c:	0100bef4 	movhi	r4,763
   10b30:	213c2004 	addi	r4,r4,-3968
   10b34:	000ca740 	call	ca74 <__udivsi3>
   10b38:	e17fff17 	ldw	r5,-4(fp)
   10b3c:	1009883a 	mov	r4,r2
   10b40:	000cb300 	call	cb30 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10b44:	10bfffc4 	addi	r2,r2,-1
   10b48:	00bffe16 	blt	zero,r2,10b44 <_gp+0xffff49e8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10b4c:	0005883a 	mov	r2,zero
}
   10b50:	e037883a 	mov	sp,fp
   10b54:	dfc00117 	ldw	ra,4(sp)
   10b58:	df000017 	ldw	fp,0(sp)
   10b5c:	dec00204 	addi	sp,sp,8
   10b60:	f800283a 	ret

00010b64 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10b64:	deffff04 	addi	sp,sp,-4
   10b68:	df000015 	stw	fp,0(sp)
   10b6c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10b70:	0001883a 	nop
   10b74:	e037883a 	mov	sp,fp
   10b78:	df000017 	ldw	fp,0(sp)
   10b7c:	dec00104 	addi	sp,sp,4
   10b80:	f800283a 	ret

00010b84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10b84:	defffe04 	addi	sp,sp,-8
   10b88:	dfc00115 	stw	ra,4(sp)
   10b8c:	df000015 	stw	fp,0(sp)
   10b90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10b94:	d0a00b17 	ldw	r2,-32724(gp)
   10b98:	10000326 	beq	r2,zero,10ba8 <alt_get_errno+0x24>
   10b9c:	d0a00b17 	ldw	r2,-32724(gp)
   10ba0:	103ee83a 	callr	r2
   10ba4:	00000106 	br	10bac <alt_get_errno+0x28>
   10ba8:	d0a6d204 	addi	r2,gp,-25784
}
   10bac:	e037883a 	mov	sp,fp
   10bb0:	dfc00117 	ldw	ra,4(sp)
   10bb4:	df000017 	ldw	fp,0(sp)
   10bb8:	dec00204 	addi	sp,sp,8
   10bbc:	f800283a 	ret

00010bc0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10bc0:	defffa04 	addi	sp,sp,-24
   10bc4:	dfc00515 	stw	ra,20(sp)
   10bc8:	df000415 	stw	fp,16(sp)
   10bcc:	df000404 	addi	fp,sp,16
   10bd0:	e13ffe15 	stw	r4,-8(fp)
   10bd4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10bd8:	e0bffe17 	ldw	r2,-8(fp)
   10bdc:	10000326 	beq	r2,zero,10bec <alt_dev_llist_insert+0x2c>
   10be0:	e0bffe17 	ldw	r2,-8(fp)
   10be4:	10800217 	ldw	r2,8(r2)
   10be8:	1000061e 	bne	r2,zero,10c04 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10bec:	0010b840 	call	10b84 <alt_get_errno>
   10bf0:	1007883a 	mov	r3,r2
   10bf4:	00800584 	movi	r2,22
   10bf8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10bfc:	00bffa84 	movi	r2,-22
   10c00:	00001306 	br	10c50 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10c04:	e0bffe17 	ldw	r2,-8(fp)
   10c08:	e0ffff17 	ldw	r3,-4(fp)
   10c0c:	e0fffc15 	stw	r3,-16(fp)
   10c10:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10c14:	e0bffd17 	ldw	r2,-12(fp)
   10c18:	e0fffc17 	ldw	r3,-16(fp)
   10c1c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10c20:	e0bffc17 	ldw	r2,-16(fp)
   10c24:	10c00017 	ldw	r3,0(r2)
   10c28:	e0bffd17 	ldw	r2,-12(fp)
   10c2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10c30:	e0bffc17 	ldw	r2,-16(fp)
   10c34:	10800017 	ldw	r2,0(r2)
   10c38:	e0fffd17 	ldw	r3,-12(fp)
   10c3c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10c40:	e0bffc17 	ldw	r2,-16(fp)
   10c44:	e0fffd17 	ldw	r3,-12(fp)
   10c48:	10c00015 	stw	r3,0(r2)

  return 0;  
   10c4c:	0005883a 	mov	r2,zero
}
   10c50:	e037883a 	mov	sp,fp
   10c54:	dfc00117 	ldw	ra,4(sp)
   10c58:	df000017 	ldw	fp,0(sp)
   10c5c:	dec00204 	addi	sp,sp,8
   10c60:	f800283a 	ret

00010c64 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10c64:	defffd04 	addi	sp,sp,-12
   10c68:	dfc00215 	stw	ra,8(sp)
   10c6c:	df000115 	stw	fp,4(sp)
   10c70:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10c74:	00800074 	movhi	r2,1
   10c78:	10870604 	addi	r2,r2,7192
   10c7c:	e0bfff15 	stw	r2,-4(fp)
   10c80:	00000606 	br	10c9c <_do_ctors+0x38>
        (*ctor) (); 
   10c84:	e0bfff17 	ldw	r2,-4(fp)
   10c88:	10800017 	ldw	r2,0(r2)
   10c8c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10c90:	e0bfff17 	ldw	r2,-4(fp)
   10c94:	10bfff04 	addi	r2,r2,-4
   10c98:	e0bfff15 	stw	r2,-4(fp)
   10c9c:	e0ffff17 	ldw	r3,-4(fp)
   10ca0:	00800074 	movhi	r2,1
   10ca4:	10870704 	addi	r2,r2,7196
   10ca8:	18bff62e 	bgeu	r3,r2,10c84 <_gp+0xffff4b28>
        (*ctor) (); 
}
   10cac:	0001883a 	nop
   10cb0:	e037883a 	mov	sp,fp
   10cb4:	dfc00117 	ldw	ra,4(sp)
   10cb8:	df000017 	ldw	fp,0(sp)
   10cbc:	dec00204 	addi	sp,sp,8
   10cc0:	f800283a 	ret

00010cc4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10cc4:	defffd04 	addi	sp,sp,-12
   10cc8:	dfc00215 	stw	ra,8(sp)
   10ccc:	df000115 	stw	fp,4(sp)
   10cd0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10cd4:	00800074 	movhi	r2,1
   10cd8:	10870604 	addi	r2,r2,7192
   10cdc:	e0bfff15 	stw	r2,-4(fp)
   10ce0:	00000606 	br	10cfc <_do_dtors+0x38>
        (*dtor) (); 
   10ce4:	e0bfff17 	ldw	r2,-4(fp)
   10ce8:	10800017 	ldw	r2,0(r2)
   10cec:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10cf0:	e0bfff17 	ldw	r2,-4(fp)
   10cf4:	10bfff04 	addi	r2,r2,-4
   10cf8:	e0bfff15 	stw	r2,-4(fp)
   10cfc:	e0ffff17 	ldw	r3,-4(fp)
   10d00:	00800074 	movhi	r2,1
   10d04:	10870704 	addi	r2,r2,7196
   10d08:	18bff62e 	bgeu	r3,r2,10ce4 <_gp+0xffff4b88>
        (*dtor) (); 
}
   10d0c:	0001883a 	nop
   10d10:	e037883a 	mov	sp,fp
   10d14:	dfc00117 	ldw	ra,4(sp)
   10d18:	df000017 	ldw	fp,0(sp)
   10d1c:	dec00204 	addi	sp,sp,8
   10d20:	f800283a 	ret

00010d24 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10d24:	deffff04 	addi	sp,sp,-4
   10d28:	df000015 	stw	fp,0(sp)
   10d2c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   10d30:	0001883a 	nop
   10d34:	e037883a 	mov	sp,fp
   10d38:	df000017 	ldw	fp,0(sp)
   10d3c:	dec00104 	addi	sp,sp,4
   10d40:	f800283a 	ret

00010d44 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10d44:	defff904 	addi	sp,sp,-28
   10d48:	dfc00615 	stw	ra,24(sp)
   10d4c:	df000515 	stw	fp,20(sp)
   10d50:	df000504 	addi	fp,sp,20
   10d54:	e13ffc15 	stw	r4,-16(fp)
   10d58:	e17ffd15 	stw	r5,-12(fp)
   10d5c:	e1bffe15 	stw	r6,-8(fp)
   10d60:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10d64:	e0800217 	ldw	r2,8(fp)
   10d68:	d8800015 	stw	r2,0(sp)
   10d6c:	e1ffff17 	ldw	r7,-4(fp)
   10d70:	e1bffe17 	ldw	r6,-8(fp)
   10d74:	e17ffd17 	ldw	r5,-12(fp)
   10d78:	e13ffc17 	ldw	r4,-16(fp)
   10d7c:	0010ef40 	call	10ef4 <alt_iic_isr_register>
}  
   10d80:	e037883a 	mov	sp,fp
   10d84:	dfc00117 	ldw	ra,4(sp)
   10d88:	df000017 	ldw	fp,0(sp)
   10d8c:	dec00204 	addi	sp,sp,8
   10d90:	f800283a 	ret

00010d94 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10d94:	defff904 	addi	sp,sp,-28
   10d98:	df000615 	stw	fp,24(sp)
   10d9c:	df000604 	addi	fp,sp,24
   10da0:	e13ffe15 	stw	r4,-8(fp)
   10da4:	e17fff15 	stw	r5,-4(fp)
   10da8:	e0bfff17 	ldw	r2,-4(fp)
   10dac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10db0:	0005303a 	rdctl	r2,status
   10db4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10db8:	e0fffb17 	ldw	r3,-20(fp)
   10dbc:	00bfff84 	movi	r2,-2
   10dc0:	1884703a 	and	r2,r3,r2
   10dc4:	1001703a 	wrctl	status,r2
  
  return context;
   10dc8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10dcc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10dd0:	00c00044 	movi	r3,1
   10dd4:	e0bffa17 	ldw	r2,-24(fp)
   10dd8:	1884983a 	sll	r2,r3,r2
   10ddc:	1007883a 	mov	r3,r2
   10de0:	d0a6d617 	ldw	r2,-25768(gp)
   10de4:	1884b03a 	or	r2,r3,r2
   10de8:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10dec:	d0a6d617 	ldw	r2,-25768(gp)
   10df0:	100170fa 	wrctl	ienable,r2
   10df4:	e0bffc17 	ldw	r2,-16(fp)
   10df8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10dfc:	e0bffd17 	ldw	r2,-12(fp)
   10e00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10e04:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10e08:	0001883a 	nop
}
   10e0c:	e037883a 	mov	sp,fp
   10e10:	df000017 	ldw	fp,0(sp)
   10e14:	dec00104 	addi	sp,sp,4
   10e18:	f800283a 	ret

00010e1c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10e1c:	defff904 	addi	sp,sp,-28
   10e20:	df000615 	stw	fp,24(sp)
   10e24:	df000604 	addi	fp,sp,24
   10e28:	e13ffe15 	stw	r4,-8(fp)
   10e2c:	e17fff15 	stw	r5,-4(fp)
   10e30:	e0bfff17 	ldw	r2,-4(fp)
   10e34:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e38:	0005303a 	rdctl	r2,status
   10e3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e40:	e0fffb17 	ldw	r3,-20(fp)
   10e44:	00bfff84 	movi	r2,-2
   10e48:	1884703a 	and	r2,r3,r2
   10e4c:	1001703a 	wrctl	status,r2
  
  return context;
   10e50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10e54:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10e58:	00c00044 	movi	r3,1
   10e5c:	e0bffa17 	ldw	r2,-24(fp)
   10e60:	1884983a 	sll	r2,r3,r2
   10e64:	0084303a 	nor	r2,zero,r2
   10e68:	1007883a 	mov	r3,r2
   10e6c:	d0a6d617 	ldw	r2,-25768(gp)
   10e70:	1884703a 	and	r2,r3,r2
   10e74:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10e78:	d0a6d617 	ldw	r2,-25768(gp)
   10e7c:	100170fa 	wrctl	ienable,r2
   10e80:	e0bffc17 	ldw	r2,-16(fp)
   10e84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e88:	e0bffd17 	ldw	r2,-12(fp)
   10e8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10e90:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10e94:	0001883a 	nop
}
   10e98:	e037883a 	mov	sp,fp
   10e9c:	df000017 	ldw	fp,0(sp)
   10ea0:	dec00104 	addi	sp,sp,4
   10ea4:	f800283a 	ret

00010ea8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10ea8:	defffc04 	addi	sp,sp,-16
   10eac:	df000315 	stw	fp,12(sp)
   10eb0:	df000304 	addi	fp,sp,12
   10eb4:	e13ffe15 	stw	r4,-8(fp)
   10eb8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10ebc:	000530fa 	rdctl	r2,ienable
   10ec0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10ec4:	00c00044 	movi	r3,1
   10ec8:	e0bfff17 	ldw	r2,-4(fp)
   10ecc:	1884983a 	sll	r2,r3,r2
   10ed0:	1007883a 	mov	r3,r2
   10ed4:	e0bffd17 	ldw	r2,-12(fp)
   10ed8:	1884703a 	and	r2,r3,r2
   10edc:	1004c03a 	cmpne	r2,r2,zero
   10ee0:	10803fcc 	andi	r2,r2,255
}
   10ee4:	e037883a 	mov	sp,fp
   10ee8:	df000017 	ldw	fp,0(sp)
   10eec:	dec00104 	addi	sp,sp,4
   10ef0:	f800283a 	ret

00010ef4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10ef4:	defff504 	addi	sp,sp,-44
   10ef8:	dfc00a15 	stw	ra,40(sp)
   10efc:	df000915 	stw	fp,36(sp)
   10f00:	df000904 	addi	fp,sp,36
   10f04:	e13ffc15 	stw	r4,-16(fp)
   10f08:	e17ffd15 	stw	r5,-12(fp)
   10f0c:	e1bffe15 	stw	r6,-8(fp)
   10f10:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10f14:	00bffa84 	movi	r2,-22
   10f18:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10f1c:	e0bffd17 	ldw	r2,-12(fp)
   10f20:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10f24:	e0bff817 	ldw	r2,-32(fp)
   10f28:	10800808 	cmpgei	r2,r2,32
   10f2c:	1000271e 	bne	r2,zero,10fcc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f30:	0005303a 	rdctl	r2,status
   10f34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f38:	e0fffb17 	ldw	r3,-20(fp)
   10f3c:	00bfff84 	movi	r2,-2
   10f40:	1884703a 	and	r2,r3,r2
   10f44:	1001703a 	wrctl	status,r2
  
  return context;
   10f48:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10f4c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10f50:	00800074 	movhi	r2,1
   10f54:	10973b04 	addi	r2,r2,23788
   10f58:	e0fff817 	ldw	r3,-32(fp)
   10f5c:	180690fa 	slli	r3,r3,3
   10f60:	10c5883a 	add	r2,r2,r3
   10f64:	e0fffe17 	ldw	r3,-8(fp)
   10f68:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10f6c:	00800074 	movhi	r2,1
   10f70:	10973b04 	addi	r2,r2,23788
   10f74:	e0fff817 	ldw	r3,-32(fp)
   10f78:	180690fa 	slli	r3,r3,3
   10f7c:	10c5883a 	add	r2,r2,r3
   10f80:	10800104 	addi	r2,r2,4
   10f84:	e0ffff17 	ldw	r3,-4(fp)
   10f88:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10f8c:	e0bffe17 	ldw	r2,-8(fp)
   10f90:	10000526 	beq	r2,zero,10fa8 <alt_iic_isr_register+0xb4>
   10f94:	e0bff817 	ldw	r2,-32(fp)
   10f98:	100b883a 	mov	r5,r2
   10f9c:	e13ffc17 	ldw	r4,-16(fp)
   10fa0:	0010d940 	call	10d94 <alt_ic_irq_enable>
   10fa4:	00000406 	br	10fb8 <alt_iic_isr_register+0xc4>
   10fa8:	e0bff817 	ldw	r2,-32(fp)
   10fac:	100b883a 	mov	r5,r2
   10fb0:	e13ffc17 	ldw	r4,-16(fp)
   10fb4:	0010e1c0 	call	10e1c <alt_ic_irq_disable>
   10fb8:	e0bff715 	stw	r2,-36(fp)
   10fbc:	e0bffa17 	ldw	r2,-24(fp)
   10fc0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10fc4:	e0bff917 	ldw	r2,-28(fp)
   10fc8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10fcc:	e0bff717 	ldw	r2,-36(fp)
}
   10fd0:	e037883a 	mov	sp,fp
   10fd4:	dfc00117 	ldw	ra,4(sp)
   10fd8:	df000017 	ldw	fp,0(sp)
   10fdc:	dec00204 	addi	sp,sp,8
   10fe0:	f800283a 	ret

00010fe4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10fe4:	defff804 	addi	sp,sp,-32
   10fe8:	dfc00715 	stw	ra,28(sp)
   10fec:	df000615 	stw	fp,24(sp)
   10ff0:	dc000515 	stw	r16,20(sp)
   10ff4:	df000604 	addi	fp,sp,24
   10ff8:	e13ffb15 	stw	r4,-20(fp)
   10ffc:	e17ffc15 	stw	r5,-16(fp)
   11000:	e1bffd15 	stw	r6,-12(fp)
   11004:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   11008:	e1bffe17 	ldw	r6,-8(fp)
   1100c:	e17ffd17 	ldw	r5,-12(fp)
   11010:	e13ffc17 	ldw	r4,-16(fp)
   11014:	001126c0 	call	1126c <open>
   11018:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   1101c:	e0bffa17 	ldw	r2,-24(fp)
   11020:	10002216 	blt	r2,zero,110ac <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   11024:	04000074 	movhi	r16,1
   11028:	840bdf04 	addi	r16,r16,12156
   1102c:	e0bffa17 	ldw	r2,-24(fp)
   11030:	01400304 	movi	r5,12
   11034:	1009883a 	mov	r4,r2
   11038:	000cb300 	call	cb30 <__mulsi3>
   1103c:	8085883a 	add	r2,r16,r2
   11040:	10c00017 	ldw	r3,0(r2)
   11044:	e0bffb17 	ldw	r2,-20(fp)
   11048:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1104c:	04000074 	movhi	r16,1
   11050:	840bdf04 	addi	r16,r16,12156
   11054:	e0bffa17 	ldw	r2,-24(fp)
   11058:	01400304 	movi	r5,12
   1105c:	1009883a 	mov	r4,r2
   11060:	000cb300 	call	cb30 <__mulsi3>
   11064:	8085883a 	add	r2,r16,r2
   11068:	10800104 	addi	r2,r2,4
   1106c:	10c00017 	ldw	r3,0(r2)
   11070:	e0bffb17 	ldw	r2,-20(fp)
   11074:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11078:	04000074 	movhi	r16,1
   1107c:	840bdf04 	addi	r16,r16,12156
   11080:	e0bffa17 	ldw	r2,-24(fp)
   11084:	01400304 	movi	r5,12
   11088:	1009883a 	mov	r4,r2
   1108c:	000cb300 	call	cb30 <__mulsi3>
   11090:	8085883a 	add	r2,r16,r2
   11094:	10800204 	addi	r2,r2,8
   11098:	10c00017 	ldw	r3,0(r2)
   1109c:	e0bffb17 	ldw	r2,-20(fp)
   110a0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   110a4:	e13ffa17 	ldw	r4,-24(fp)
   110a8:	000fb200 	call	fb20 <alt_release_fd>
  }
} 
   110ac:	0001883a 	nop
   110b0:	e6ffff04 	addi	sp,fp,-4
   110b4:	dfc00217 	ldw	ra,8(sp)
   110b8:	df000117 	ldw	fp,4(sp)
   110bc:	dc000017 	ldw	r16,0(sp)
   110c0:	dec00304 	addi	sp,sp,12
   110c4:	f800283a 	ret

000110c8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   110c8:	defffb04 	addi	sp,sp,-20
   110cc:	dfc00415 	stw	ra,16(sp)
   110d0:	df000315 	stw	fp,12(sp)
   110d4:	df000304 	addi	fp,sp,12
   110d8:	e13ffd15 	stw	r4,-12(fp)
   110dc:	e17ffe15 	stw	r5,-8(fp)
   110e0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   110e4:	01c07fc4 	movi	r7,511
   110e8:	01800044 	movi	r6,1
   110ec:	e17ffd17 	ldw	r5,-12(fp)
   110f0:	01000074 	movhi	r4,1
   110f4:	210be204 	addi	r4,r4,12168
   110f8:	0010fe40 	call	10fe4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   110fc:	01c07fc4 	movi	r7,511
   11100:	000d883a 	mov	r6,zero
   11104:	e17ffe17 	ldw	r5,-8(fp)
   11108:	01000074 	movhi	r4,1
   1110c:	210bdf04 	addi	r4,r4,12156
   11110:	0010fe40 	call	10fe4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11114:	01c07fc4 	movi	r7,511
   11118:	01800044 	movi	r6,1
   1111c:	e17fff17 	ldw	r5,-4(fp)
   11120:	01000074 	movhi	r4,1
   11124:	210be504 	addi	r4,r4,12180
   11128:	0010fe40 	call	10fe4 <alt_open_fd>
}  
   1112c:	0001883a 	nop
   11130:	e037883a 	mov	sp,fp
   11134:	dfc00117 	ldw	ra,4(sp)
   11138:	df000017 	ldw	fp,0(sp)
   1113c:	dec00204 	addi	sp,sp,8
   11140:	f800283a 	ret

00011144 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11144:	defffe04 	addi	sp,sp,-8
   11148:	dfc00115 	stw	ra,4(sp)
   1114c:	df000015 	stw	fp,0(sp)
   11150:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11154:	d0a00b17 	ldw	r2,-32724(gp)
   11158:	10000326 	beq	r2,zero,11168 <alt_get_errno+0x24>
   1115c:	d0a00b17 	ldw	r2,-32724(gp)
   11160:	103ee83a 	callr	r2
   11164:	00000106 	br	1116c <alt_get_errno+0x28>
   11168:	d0a6d204 	addi	r2,gp,-25784
}
   1116c:	e037883a 	mov	sp,fp
   11170:	dfc00117 	ldw	ra,4(sp)
   11174:	df000017 	ldw	fp,0(sp)
   11178:	dec00204 	addi	sp,sp,8
   1117c:	f800283a 	ret

00011180 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11180:	defffb04 	addi	sp,sp,-20
   11184:	dfc00415 	stw	ra,16(sp)
   11188:	df000315 	stw	fp,12(sp)
   1118c:	dc000215 	stw	r16,8(sp)
   11190:	df000304 	addi	fp,sp,12
   11194:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11198:	e0bffe17 	ldw	r2,-8(fp)
   1119c:	10800217 	ldw	r2,8(r2)
   111a0:	10d00034 	orhi	r3,r2,16384
   111a4:	e0bffe17 	ldw	r2,-8(fp)
   111a8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   111ac:	e03ffd15 	stw	zero,-12(fp)
   111b0:	00002306 	br	11240 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   111b4:	04000074 	movhi	r16,1
   111b8:	840bdf04 	addi	r16,r16,12156
   111bc:	e0bffd17 	ldw	r2,-12(fp)
   111c0:	01400304 	movi	r5,12
   111c4:	1009883a 	mov	r4,r2
   111c8:	000cb300 	call	cb30 <__mulsi3>
   111cc:	8085883a 	add	r2,r16,r2
   111d0:	10c00017 	ldw	r3,0(r2)
   111d4:	e0bffe17 	ldw	r2,-8(fp)
   111d8:	10800017 	ldw	r2,0(r2)
   111dc:	1880151e 	bne	r3,r2,11234 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   111e0:	04000074 	movhi	r16,1
   111e4:	840bdf04 	addi	r16,r16,12156
   111e8:	e0bffd17 	ldw	r2,-12(fp)
   111ec:	01400304 	movi	r5,12
   111f0:	1009883a 	mov	r4,r2
   111f4:	000cb300 	call	cb30 <__mulsi3>
   111f8:	8085883a 	add	r2,r16,r2
   111fc:	10800204 	addi	r2,r2,8
   11200:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11204:	10000b0e 	bge	r2,zero,11234 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11208:	01400304 	movi	r5,12
   1120c:	e13ffd17 	ldw	r4,-12(fp)
   11210:	000cb300 	call	cb30 <__mulsi3>
   11214:	1007883a 	mov	r3,r2
   11218:	00800074 	movhi	r2,1
   1121c:	108bdf04 	addi	r2,r2,12156
   11220:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11224:	e0bffe17 	ldw	r2,-8(fp)
   11228:	18800226 	beq	r3,r2,11234 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1122c:	00bffcc4 	movi	r2,-13
   11230:	00000806 	br	11254 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11234:	e0bffd17 	ldw	r2,-12(fp)
   11238:	10800044 	addi	r2,r2,1
   1123c:	e0bffd15 	stw	r2,-12(fp)
   11240:	d0a00a17 	ldw	r2,-32728(gp)
   11244:	1007883a 	mov	r3,r2
   11248:	e0bffd17 	ldw	r2,-12(fp)
   1124c:	18bfd92e 	bgeu	r3,r2,111b4 <_gp+0xffff5058>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11250:	0005883a 	mov	r2,zero
}
   11254:	e6ffff04 	addi	sp,fp,-4
   11258:	dfc00217 	ldw	ra,8(sp)
   1125c:	df000117 	ldw	fp,4(sp)
   11260:	dc000017 	ldw	r16,0(sp)
   11264:	dec00304 	addi	sp,sp,12
   11268:	f800283a 	ret

0001126c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1126c:	defff604 	addi	sp,sp,-40
   11270:	dfc00915 	stw	ra,36(sp)
   11274:	df000815 	stw	fp,32(sp)
   11278:	df000804 	addi	fp,sp,32
   1127c:	e13ffd15 	stw	r4,-12(fp)
   11280:	e17ffe15 	stw	r5,-8(fp)
   11284:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11288:	00bfffc4 	movi	r2,-1
   1128c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11290:	00bffb44 	movi	r2,-19
   11294:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11298:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1129c:	d1600804 	addi	r5,gp,-32736
   112a0:	e13ffd17 	ldw	r4,-12(fp)
   112a4:	00115900 	call	11590 <alt_find_dev>
   112a8:	e0bff815 	stw	r2,-32(fp)
   112ac:	e0bff817 	ldw	r2,-32(fp)
   112b0:	1000051e 	bne	r2,zero,112c8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   112b4:	e13ffd17 	ldw	r4,-12(fp)
   112b8:	00116200 	call	11620 <alt_find_file>
   112bc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   112c0:	00800044 	movi	r2,1
   112c4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   112c8:	e0bff817 	ldw	r2,-32(fp)
   112cc:	10002b26 	beq	r2,zero,1137c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   112d0:	e13ff817 	ldw	r4,-32(fp)
   112d4:	00117280 	call	11728 <alt_get_fd>
   112d8:	e0bff915 	stw	r2,-28(fp)
   112dc:	e0bff917 	ldw	r2,-28(fp)
   112e0:	1000030e 	bge	r2,zero,112f0 <open+0x84>
    {
      status = index;
   112e4:	e0bff917 	ldw	r2,-28(fp)
   112e8:	e0bffa15 	stw	r2,-24(fp)
   112ec:	00002506 	br	11384 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   112f0:	01400304 	movi	r5,12
   112f4:	e13ff917 	ldw	r4,-28(fp)
   112f8:	000cb300 	call	cb30 <__mulsi3>
   112fc:	1007883a 	mov	r3,r2
   11300:	00800074 	movhi	r2,1
   11304:	108bdf04 	addi	r2,r2,12156
   11308:	1885883a 	add	r2,r3,r2
   1130c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11310:	e0fffe17 	ldw	r3,-8(fp)
   11314:	00900034 	movhi	r2,16384
   11318:	10bfffc4 	addi	r2,r2,-1
   1131c:	1886703a 	and	r3,r3,r2
   11320:	e0bffc17 	ldw	r2,-16(fp)
   11324:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11328:	e0bffb17 	ldw	r2,-20(fp)
   1132c:	1000051e 	bne	r2,zero,11344 <open+0xd8>
   11330:	e13ffc17 	ldw	r4,-16(fp)
   11334:	00111800 	call	11180 <alt_file_locked>
   11338:	e0bffa15 	stw	r2,-24(fp)
   1133c:	e0bffa17 	ldw	r2,-24(fp)
   11340:	10001016 	blt	r2,zero,11384 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11344:	e0bff817 	ldw	r2,-32(fp)
   11348:	10800317 	ldw	r2,12(r2)
   1134c:	10000826 	beq	r2,zero,11370 <open+0x104>
   11350:	e0bff817 	ldw	r2,-32(fp)
   11354:	10800317 	ldw	r2,12(r2)
   11358:	e1ffff17 	ldw	r7,-4(fp)
   1135c:	e1bffe17 	ldw	r6,-8(fp)
   11360:	e17ffd17 	ldw	r5,-12(fp)
   11364:	e13ffc17 	ldw	r4,-16(fp)
   11368:	103ee83a 	callr	r2
   1136c:	00000106 	br	11374 <open+0x108>
   11370:	0005883a 	mov	r2,zero
   11374:	e0bffa15 	stw	r2,-24(fp)
   11378:	00000206 	br	11384 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1137c:	00bffb44 	movi	r2,-19
   11380:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11384:	e0bffa17 	ldw	r2,-24(fp)
   11388:	1000090e 	bge	r2,zero,113b0 <open+0x144>
  {
    alt_release_fd (index);  
   1138c:	e13ff917 	ldw	r4,-28(fp)
   11390:	000fb200 	call	fb20 <alt_release_fd>
    ALT_ERRNO = -status;
   11394:	00111440 	call	11144 <alt_get_errno>
   11398:	1007883a 	mov	r3,r2
   1139c:	e0bffa17 	ldw	r2,-24(fp)
   113a0:	0085c83a 	sub	r2,zero,r2
   113a4:	18800015 	stw	r2,0(r3)
    return -1;
   113a8:	00bfffc4 	movi	r2,-1
   113ac:	00000106 	br	113b4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   113b0:	e0bff917 	ldw	r2,-28(fp)
}
   113b4:	e037883a 	mov	sp,fp
   113b8:	dfc00117 	ldw	ra,4(sp)
   113bc:	df000017 	ldw	fp,0(sp)
   113c0:	dec00204 	addi	sp,sp,8
   113c4:	f800283a 	ret

000113c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   113c8:	defffa04 	addi	sp,sp,-24
   113cc:	df000515 	stw	fp,20(sp)
   113d0:	df000504 	addi	fp,sp,20
   113d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   113d8:	0005303a 	rdctl	r2,status
   113dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   113e0:	e0fffc17 	ldw	r3,-16(fp)
   113e4:	00bfff84 	movi	r2,-2
   113e8:	1884703a 	and	r2,r3,r2
   113ec:	1001703a 	wrctl	status,r2
  
  return context;
   113f0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   113f4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   113f8:	e0bfff17 	ldw	r2,-4(fp)
   113fc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11400:	e0bffd17 	ldw	r2,-12(fp)
   11404:	10800017 	ldw	r2,0(r2)
   11408:	e0fffd17 	ldw	r3,-12(fp)
   1140c:	18c00117 	ldw	r3,4(r3)
   11410:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11414:	e0bffd17 	ldw	r2,-12(fp)
   11418:	10800117 	ldw	r2,4(r2)
   1141c:	e0fffd17 	ldw	r3,-12(fp)
   11420:	18c00017 	ldw	r3,0(r3)
   11424:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11428:	e0bffd17 	ldw	r2,-12(fp)
   1142c:	e0fffd17 	ldw	r3,-12(fp)
   11430:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11434:	e0bffd17 	ldw	r2,-12(fp)
   11438:	e0fffd17 	ldw	r3,-12(fp)
   1143c:	10c00015 	stw	r3,0(r2)
   11440:	e0bffb17 	ldw	r2,-20(fp)
   11444:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11448:	e0bffe17 	ldw	r2,-8(fp)
   1144c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11450:	0001883a 	nop
   11454:	e037883a 	mov	sp,fp
   11458:	df000017 	ldw	fp,0(sp)
   1145c:	dec00104 	addi	sp,sp,4
   11460:	f800283a 	ret

00011464 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11464:	defffb04 	addi	sp,sp,-20
   11468:	dfc00415 	stw	ra,16(sp)
   1146c:	df000315 	stw	fp,12(sp)
   11470:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11474:	d0a00e17 	ldw	r2,-32712(gp)
   11478:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1147c:	d0a6d817 	ldw	r2,-25760(gp)
   11480:	10800044 	addi	r2,r2,1
   11484:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11488:	00002e06 	br	11544 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1148c:	e0bffd17 	ldw	r2,-12(fp)
   11490:	10800017 	ldw	r2,0(r2)
   11494:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11498:	e0bffd17 	ldw	r2,-12(fp)
   1149c:	10800403 	ldbu	r2,16(r2)
   114a0:	10803fcc 	andi	r2,r2,255
   114a4:	10000426 	beq	r2,zero,114b8 <alt_tick+0x54>
   114a8:	d0a6d817 	ldw	r2,-25760(gp)
   114ac:	1000021e 	bne	r2,zero,114b8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   114b0:	e0bffd17 	ldw	r2,-12(fp)
   114b4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   114b8:	e0bffd17 	ldw	r2,-12(fp)
   114bc:	10800217 	ldw	r2,8(r2)
   114c0:	d0e6d817 	ldw	r3,-25760(gp)
   114c4:	18801d36 	bltu	r3,r2,1153c <alt_tick+0xd8>
   114c8:	e0bffd17 	ldw	r2,-12(fp)
   114cc:	10800403 	ldbu	r2,16(r2)
   114d0:	10803fcc 	andi	r2,r2,255
   114d4:	1000191e 	bne	r2,zero,1153c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   114d8:	e0bffd17 	ldw	r2,-12(fp)
   114dc:	10800317 	ldw	r2,12(r2)
   114e0:	e0fffd17 	ldw	r3,-12(fp)
   114e4:	18c00517 	ldw	r3,20(r3)
   114e8:	1809883a 	mov	r4,r3
   114ec:	103ee83a 	callr	r2
   114f0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   114f4:	e0bfff17 	ldw	r2,-4(fp)
   114f8:	1000031e 	bne	r2,zero,11508 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   114fc:	e13ffd17 	ldw	r4,-12(fp)
   11500:	00113c80 	call	113c8 <alt_alarm_stop>
   11504:	00000d06 	br	1153c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   11508:	e0bffd17 	ldw	r2,-12(fp)
   1150c:	10c00217 	ldw	r3,8(r2)
   11510:	e0bfff17 	ldw	r2,-4(fp)
   11514:	1887883a 	add	r3,r3,r2
   11518:	e0bffd17 	ldw	r2,-12(fp)
   1151c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11520:	e0bffd17 	ldw	r2,-12(fp)
   11524:	10c00217 	ldw	r3,8(r2)
   11528:	d0a6d817 	ldw	r2,-25760(gp)
   1152c:	1880032e 	bgeu	r3,r2,1153c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11530:	e0bffd17 	ldw	r2,-12(fp)
   11534:	00c00044 	movi	r3,1
   11538:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1153c:	e0bffe17 	ldw	r2,-8(fp)
   11540:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11544:	e0fffd17 	ldw	r3,-12(fp)
   11548:	d0a00e04 	addi	r2,gp,-32712
   1154c:	18bfcf1e 	bne	r3,r2,1148c <_gp+0xffff5330>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11550:	0001883a 	nop
}
   11554:	0001883a 	nop
   11558:	e037883a 	mov	sp,fp
   1155c:	dfc00117 	ldw	ra,4(sp)
   11560:	df000017 	ldw	fp,0(sp)
   11564:	dec00204 	addi	sp,sp,8
   11568:	f800283a 	ret

0001156c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1156c:	deffff04 	addi	sp,sp,-4
   11570:	df000015 	stw	fp,0(sp)
   11574:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11578:	000170fa 	wrctl	ienable,zero
}
   1157c:	0001883a 	nop
   11580:	e037883a 	mov	sp,fp
   11584:	df000017 	ldw	fp,0(sp)
   11588:	dec00104 	addi	sp,sp,4
   1158c:	f800283a 	ret

00011590 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11590:	defffa04 	addi	sp,sp,-24
   11594:	dfc00515 	stw	ra,20(sp)
   11598:	df000415 	stw	fp,16(sp)
   1159c:	df000404 	addi	fp,sp,16
   115a0:	e13ffe15 	stw	r4,-8(fp)
   115a4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   115a8:	e0bfff17 	ldw	r2,-4(fp)
   115ac:	10800017 	ldw	r2,0(r2)
   115b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   115b4:	e13ffe17 	ldw	r4,-8(fp)
   115b8:	00025fc0 	call	25fc <strlen>
   115bc:	10800044 	addi	r2,r2,1
   115c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   115c4:	00000d06 	br	115fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   115c8:	e0bffc17 	ldw	r2,-16(fp)
   115cc:	10800217 	ldw	r2,8(r2)
   115d0:	e0fffd17 	ldw	r3,-12(fp)
   115d4:	180d883a 	mov	r6,r3
   115d8:	e17ffe17 	ldw	r5,-8(fp)
   115dc:	1009883a 	mov	r4,r2
   115e0:	00118d40 	call	118d4 <memcmp>
   115e4:	1000021e 	bne	r2,zero,115f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   115e8:	e0bffc17 	ldw	r2,-16(fp)
   115ec:	00000706 	br	1160c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   115f0:	e0bffc17 	ldw	r2,-16(fp)
   115f4:	10800017 	ldw	r2,0(r2)
   115f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   115fc:	e0fffc17 	ldw	r3,-16(fp)
   11600:	e0bfff17 	ldw	r2,-4(fp)
   11604:	18bff01e 	bne	r3,r2,115c8 <_gp+0xffff546c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11608:	0005883a 	mov	r2,zero
}
   1160c:	e037883a 	mov	sp,fp
   11610:	dfc00117 	ldw	ra,4(sp)
   11614:	df000017 	ldw	fp,0(sp)
   11618:	dec00204 	addi	sp,sp,8
   1161c:	f800283a 	ret

00011620 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11620:	defffb04 	addi	sp,sp,-20
   11624:	dfc00415 	stw	ra,16(sp)
   11628:	df000315 	stw	fp,12(sp)
   1162c:	df000304 	addi	fp,sp,12
   11630:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11634:	d0a00617 	ldw	r2,-32744(gp)
   11638:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1163c:	00003106 	br	11704 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   11640:	e0bffd17 	ldw	r2,-12(fp)
   11644:	10800217 	ldw	r2,8(r2)
   11648:	1009883a 	mov	r4,r2
   1164c:	00025fc0 	call	25fc <strlen>
   11650:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11654:	e0bffd17 	ldw	r2,-12(fp)
   11658:	10c00217 	ldw	r3,8(r2)
   1165c:	e0bffe17 	ldw	r2,-8(fp)
   11660:	10bfffc4 	addi	r2,r2,-1
   11664:	1885883a 	add	r2,r3,r2
   11668:	10800003 	ldbu	r2,0(r2)
   1166c:	10803fcc 	andi	r2,r2,255
   11670:	1080201c 	xori	r2,r2,128
   11674:	10bfe004 	addi	r2,r2,-128
   11678:	10800bd8 	cmpnei	r2,r2,47
   1167c:	1000031e 	bne	r2,zero,1168c <alt_find_file+0x6c>
    {
      len -= 1;
   11680:	e0bffe17 	ldw	r2,-8(fp)
   11684:	10bfffc4 	addi	r2,r2,-1
   11688:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1168c:	e0bffe17 	ldw	r2,-8(fp)
   11690:	e0ffff17 	ldw	r3,-4(fp)
   11694:	1885883a 	add	r2,r3,r2
   11698:	10800003 	ldbu	r2,0(r2)
   1169c:	10803fcc 	andi	r2,r2,255
   116a0:	1080201c 	xori	r2,r2,128
   116a4:	10bfe004 	addi	r2,r2,-128
   116a8:	10800be0 	cmpeqi	r2,r2,47
   116ac:	1000081e 	bne	r2,zero,116d0 <alt_find_file+0xb0>
   116b0:	e0bffe17 	ldw	r2,-8(fp)
   116b4:	e0ffff17 	ldw	r3,-4(fp)
   116b8:	1885883a 	add	r2,r3,r2
   116bc:	10800003 	ldbu	r2,0(r2)
   116c0:	10803fcc 	andi	r2,r2,255
   116c4:	1080201c 	xori	r2,r2,128
   116c8:	10bfe004 	addi	r2,r2,-128
   116cc:	10000a1e 	bne	r2,zero,116f8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   116d0:	e0bffd17 	ldw	r2,-12(fp)
   116d4:	10800217 	ldw	r2,8(r2)
   116d8:	e0fffe17 	ldw	r3,-8(fp)
   116dc:	180d883a 	mov	r6,r3
   116e0:	e17fff17 	ldw	r5,-4(fp)
   116e4:	1009883a 	mov	r4,r2
   116e8:	00118d40 	call	118d4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   116ec:	1000021e 	bne	r2,zero,116f8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   116f0:	e0bffd17 	ldw	r2,-12(fp)
   116f4:	00000706 	br	11714 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   116f8:	e0bffd17 	ldw	r2,-12(fp)
   116fc:	10800017 	ldw	r2,0(r2)
   11700:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11704:	e0fffd17 	ldw	r3,-12(fp)
   11708:	d0a00604 	addi	r2,gp,-32744
   1170c:	18bfcc1e 	bne	r3,r2,11640 <_gp+0xffff54e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11710:	0005883a 	mov	r2,zero
}
   11714:	e037883a 	mov	sp,fp
   11718:	dfc00117 	ldw	ra,4(sp)
   1171c:	df000017 	ldw	fp,0(sp)
   11720:	dec00204 	addi	sp,sp,8
   11724:	f800283a 	ret

00011728 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11728:	defffa04 	addi	sp,sp,-24
   1172c:	dfc00515 	stw	ra,20(sp)
   11730:	df000415 	stw	fp,16(sp)
   11734:	dc000315 	stw	r16,12(sp)
   11738:	df000404 	addi	fp,sp,16
   1173c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   11740:	00bffa04 	movi	r2,-24
   11744:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11748:	e03ffc15 	stw	zero,-16(fp)
   1174c:	00001d06 	br	117c4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   11750:	04000074 	movhi	r16,1
   11754:	840bdf04 	addi	r16,r16,12156
   11758:	e0bffc17 	ldw	r2,-16(fp)
   1175c:	01400304 	movi	r5,12
   11760:	1009883a 	mov	r4,r2
   11764:	000cb300 	call	cb30 <__mulsi3>
   11768:	8085883a 	add	r2,r16,r2
   1176c:	10800017 	ldw	r2,0(r2)
   11770:	1000111e 	bne	r2,zero,117b8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   11774:	04000074 	movhi	r16,1
   11778:	840bdf04 	addi	r16,r16,12156
   1177c:	e0bffc17 	ldw	r2,-16(fp)
   11780:	01400304 	movi	r5,12
   11784:	1009883a 	mov	r4,r2
   11788:	000cb300 	call	cb30 <__mulsi3>
   1178c:	8085883a 	add	r2,r16,r2
   11790:	e0fffe17 	ldw	r3,-8(fp)
   11794:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11798:	d0e00a17 	ldw	r3,-32728(gp)
   1179c:	e0bffc17 	ldw	r2,-16(fp)
   117a0:	1880020e 	bge	r3,r2,117ac <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   117a4:	e0bffc17 	ldw	r2,-16(fp)
   117a8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   117ac:	e0bffc17 	ldw	r2,-16(fp)
   117b0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   117b4:	00000606 	br	117d0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   117b8:	e0bffc17 	ldw	r2,-16(fp)
   117bc:	10800044 	addi	r2,r2,1
   117c0:	e0bffc15 	stw	r2,-16(fp)
   117c4:	e0bffc17 	ldw	r2,-16(fp)
   117c8:	10800810 	cmplti	r2,r2,32
   117cc:	103fe01e 	bne	r2,zero,11750 <_gp+0xffff55f4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   117d0:	e0bffd17 	ldw	r2,-12(fp)
}
   117d4:	e6ffff04 	addi	sp,fp,-4
   117d8:	dfc00217 	ldw	ra,8(sp)
   117dc:	df000117 	ldw	fp,4(sp)
   117e0:	dc000017 	ldw	r16,0(sp)
   117e4:	dec00304 	addi	sp,sp,12
   117e8:	f800283a 	ret

000117ec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   117ec:	defffe04 	addi	sp,sp,-8
   117f0:	df000115 	stw	fp,4(sp)
   117f4:	df000104 	addi	fp,sp,4
   117f8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   117fc:	e0bfff17 	ldw	r2,-4(fp)
   11800:	10bffe84 	addi	r2,r2,-6
   11804:	10c00428 	cmpgeui	r3,r2,16
   11808:	18001a1e 	bne	r3,zero,11874 <alt_exception_cause_generated_bad_addr+0x88>
   1180c:	100690ba 	slli	r3,r2,2
   11810:	00800074 	movhi	r2,1
   11814:	10860904 	addi	r2,r2,6180
   11818:	1885883a 	add	r2,r3,r2
   1181c:	10800017 	ldw	r2,0(r2)
   11820:	1000683a 	jmp	r2
   11824:	00011864 	muli	zero,zero,1121
   11828:	00011864 	muli	zero,zero,1121
   1182c:	00011874 	movhi	zero,1121
   11830:	00011874 	movhi	zero,1121
   11834:	00011874 	movhi	zero,1121
   11838:	00011864 	muli	zero,zero,1121
   1183c:	0001186c 	andhi	zero,zero,1121
   11840:	00011874 	movhi	zero,1121
   11844:	00011864 	muli	zero,zero,1121
   11848:	00011864 	muli	zero,zero,1121
   1184c:	00011874 	movhi	zero,1121
   11850:	00011864 	muli	zero,zero,1121
   11854:	0001186c 	andhi	zero,zero,1121
   11858:	00011874 	movhi	zero,1121
   1185c:	00011874 	movhi	zero,1121
   11860:	00011864 	muli	zero,zero,1121
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11864:	00800044 	movi	r2,1
   11868:	00000306 	br	11878 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1186c:	0005883a 	mov	r2,zero
   11870:	00000106 	br	11878 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11874:	0005883a 	mov	r2,zero
  }
}
   11878:	e037883a 	mov	sp,fp
   1187c:	df000017 	ldw	fp,0(sp)
   11880:	dec00104 	addi	sp,sp,4
   11884:	f800283a 	ret

00011888 <atexit>:
   11888:	200b883a 	mov	r5,r4
   1188c:	000f883a 	mov	r7,zero
   11890:	000d883a 	mov	r6,zero
   11894:	0009883a 	mov	r4,zero
   11898:	00119501 	jmpi	11950 <__register_exitproc>

0001189c <exit>:
   1189c:	defffe04 	addi	sp,sp,-8
   118a0:	000b883a 	mov	r5,zero
   118a4:	dc000015 	stw	r16,0(sp)
   118a8:	dfc00115 	stw	ra,4(sp)
   118ac:	2021883a 	mov	r16,r4
   118b0:	0011a680 	call	11a68 <__call_exitprocs>
   118b4:	00800074 	movhi	r2,1
   118b8:	10905704 	addi	r2,r2,16732
   118bc:	11000017 	ldw	r4,0(r2)
   118c0:	20800f17 	ldw	r2,60(r4)
   118c4:	10000126 	beq	r2,zero,118cc <exit+0x30>
   118c8:	103ee83a 	callr	r2
   118cc:	8009883a 	mov	r4,r16
   118d0:	0011be80 	call	11be8 <_exit>

000118d4 <memcmp>:
   118d4:	01c000c4 	movi	r7,3
   118d8:	3980192e 	bgeu	r7,r6,11940 <memcmp+0x6c>
   118dc:	2144b03a 	or	r2,r4,r5
   118e0:	11c4703a 	and	r2,r2,r7
   118e4:	10000f26 	beq	r2,zero,11924 <memcmp+0x50>
   118e8:	20800003 	ldbu	r2,0(r4)
   118ec:	28c00003 	ldbu	r3,0(r5)
   118f0:	10c0151e 	bne	r2,r3,11948 <memcmp+0x74>
   118f4:	31bfff84 	addi	r6,r6,-2
   118f8:	01ffffc4 	movi	r7,-1
   118fc:	00000406 	br	11910 <memcmp+0x3c>
   11900:	20800003 	ldbu	r2,0(r4)
   11904:	28c00003 	ldbu	r3,0(r5)
   11908:	31bfffc4 	addi	r6,r6,-1
   1190c:	10c00e1e 	bne	r2,r3,11948 <memcmp+0x74>
   11910:	21000044 	addi	r4,r4,1
   11914:	29400044 	addi	r5,r5,1
   11918:	31fff91e 	bne	r6,r7,11900 <_gp+0xffff57a4>
   1191c:	0005883a 	mov	r2,zero
   11920:	f800283a 	ret
   11924:	20c00017 	ldw	r3,0(r4)
   11928:	28800017 	ldw	r2,0(r5)
   1192c:	18bfee1e 	bne	r3,r2,118e8 <_gp+0xffff578c>
   11930:	31bfff04 	addi	r6,r6,-4
   11934:	21000104 	addi	r4,r4,4
   11938:	29400104 	addi	r5,r5,4
   1193c:	39bff936 	bltu	r7,r6,11924 <_gp+0xffff57c8>
   11940:	303fe91e 	bne	r6,zero,118e8 <_gp+0xffff578c>
   11944:	003ff506 	br	1191c <_gp+0xffff57c0>
   11948:	10c5c83a 	sub	r2,r2,r3
   1194c:	f800283a 	ret

00011950 <__register_exitproc>:
   11950:	defffa04 	addi	sp,sp,-24
   11954:	dc000315 	stw	r16,12(sp)
   11958:	04000074 	movhi	r16,1
   1195c:	84105704 	addi	r16,r16,16732
   11960:	80c00017 	ldw	r3,0(r16)
   11964:	dc400415 	stw	r17,16(sp)
   11968:	dfc00515 	stw	ra,20(sp)
   1196c:	18805217 	ldw	r2,328(r3)
   11970:	2023883a 	mov	r17,r4
   11974:	10003726 	beq	r2,zero,11a54 <__register_exitproc+0x104>
   11978:	10c00117 	ldw	r3,4(r2)
   1197c:	010007c4 	movi	r4,31
   11980:	20c00e16 	blt	r4,r3,119bc <__register_exitproc+0x6c>
   11984:	1a000044 	addi	r8,r3,1
   11988:	8800221e 	bne	r17,zero,11a14 <__register_exitproc+0xc4>
   1198c:	18c00084 	addi	r3,r3,2
   11990:	18c7883a 	add	r3,r3,r3
   11994:	18c7883a 	add	r3,r3,r3
   11998:	12000115 	stw	r8,4(r2)
   1199c:	10c7883a 	add	r3,r2,r3
   119a0:	19400015 	stw	r5,0(r3)
   119a4:	0005883a 	mov	r2,zero
   119a8:	dfc00517 	ldw	ra,20(sp)
   119ac:	dc400417 	ldw	r17,16(sp)
   119b0:	dc000317 	ldw	r16,12(sp)
   119b4:	dec00604 	addi	sp,sp,24
   119b8:	f800283a 	ret
   119bc:	00800034 	movhi	r2,0
   119c0:	10800004 	addi	r2,r2,0
   119c4:	10002626 	beq	r2,zero,11a60 <__register_exitproc+0x110>
   119c8:	01006404 	movi	r4,400
   119cc:	d9400015 	stw	r5,0(sp)
   119d0:	d9800115 	stw	r6,4(sp)
   119d4:	d9c00215 	stw	r7,8(sp)
   119d8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
   119dc:	d9400017 	ldw	r5,0(sp)
   119e0:	d9800117 	ldw	r6,4(sp)
   119e4:	d9c00217 	ldw	r7,8(sp)
   119e8:	10001d26 	beq	r2,zero,11a60 <__register_exitproc+0x110>
   119ec:	81000017 	ldw	r4,0(r16)
   119f0:	10000115 	stw	zero,4(r2)
   119f4:	02000044 	movi	r8,1
   119f8:	22405217 	ldw	r9,328(r4)
   119fc:	0007883a 	mov	r3,zero
   11a00:	12400015 	stw	r9,0(r2)
   11a04:	20805215 	stw	r2,328(r4)
   11a08:	10006215 	stw	zero,392(r2)
   11a0c:	10006315 	stw	zero,396(r2)
   11a10:	883fde26 	beq	r17,zero,1198c <_gp+0xffff5830>
   11a14:	18c9883a 	add	r4,r3,r3
   11a18:	2109883a 	add	r4,r4,r4
   11a1c:	1109883a 	add	r4,r2,r4
   11a20:	21802215 	stw	r6,136(r4)
   11a24:	01800044 	movi	r6,1
   11a28:	12406217 	ldw	r9,392(r2)
   11a2c:	30cc983a 	sll	r6,r6,r3
   11a30:	4992b03a 	or	r9,r9,r6
   11a34:	12406215 	stw	r9,392(r2)
   11a38:	21c04215 	stw	r7,264(r4)
   11a3c:	01000084 	movi	r4,2
   11a40:	893fd21e 	bne	r17,r4,1198c <_gp+0xffff5830>
   11a44:	11006317 	ldw	r4,396(r2)
   11a48:	218cb03a 	or	r6,r4,r6
   11a4c:	11806315 	stw	r6,396(r2)
   11a50:	003fce06 	br	1198c <_gp+0xffff5830>
   11a54:	18805304 	addi	r2,r3,332
   11a58:	18805215 	stw	r2,328(r3)
   11a5c:	003fc606 	br	11978 <_gp+0xffff581c>
   11a60:	00bfffc4 	movi	r2,-1
   11a64:	003fd006 	br	119a8 <_gp+0xffff584c>

00011a68 <__call_exitprocs>:
   11a68:	defff504 	addi	sp,sp,-44
   11a6c:	df000915 	stw	fp,36(sp)
   11a70:	dd400615 	stw	r21,24(sp)
   11a74:	dc800315 	stw	r18,12(sp)
   11a78:	dfc00a15 	stw	ra,40(sp)
   11a7c:	ddc00815 	stw	r23,32(sp)
   11a80:	dd800715 	stw	r22,28(sp)
   11a84:	dd000515 	stw	r20,20(sp)
   11a88:	dcc00415 	stw	r19,16(sp)
   11a8c:	dc400215 	stw	r17,8(sp)
   11a90:	dc000115 	stw	r16,4(sp)
   11a94:	d9000015 	stw	r4,0(sp)
   11a98:	2839883a 	mov	fp,r5
   11a9c:	04800044 	movi	r18,1
   11aa0:	057fffc4 	movi	r21,-1
   11aa4:	00800074 	movhi	r2,1
   11aa8:	10905704 	addi	r2,r2,16732
   11aac:	12000017 	ldw	r8,0(r2)
   11ab0:	45005217 	ldw	r20,328(r8)
   11ab4:	44c05204 	addi	r19,r8,328
   11ab8:	a0001c26 	beq	r20,zero,11b2c <__call_exitprocs+0xc4>
   11abc:	a0800117 	ldw	r2,4(r20)
   11ac0:	15ffffc4 	addi	r23,r2,-1
   11ac4:	b8000d16 	blt	r23,zero,11afc <__call_exitprocs+0x94>
   11ac8:	14000044 	addi	r16,r2,1
   11acc:	8421883a 	add	r16,r16,r16
   11ad0:	8421883a 	add	r16,r16,r16
   11ad4:	84402004 	addi	r17,r16,128
   11ad8:	a463883a 	add	r17,r20,r17
   11adc:	a421883a 	add	r16,r20,r16
   11ae0:	e0001e26 	beq	fp,zero,11b5c <__call_exitprocs+0xf4>
   11ae4:	80804017 	ldw	r2,256(r16)
   11ae8:	e0801c26 	beq	fp,r2,11b5c <__call_exitprocs+0xf4>
   11aec:	bdffffc4 	addi	r23,r23,-1
   11af0:	843fff04 	addi	r16,r16,-4
   11af4:	8c7fff04 	addi	r17,r17,-4
   11af8:	bd7ff91e 	bne	r23,r21,11ae0 <_gp+0xffff5984>
   11afc:	00800034 	movhi	r2,0
   11b00:	10800004 	addi	r2,r2,0
   11b04:	10000926 	beq	r2,zero,11b2c <__call_exitprocs+0xc4>
   11b08:	a0800117 	ldw	r2,4(r20)
   11b0c:	1000301e 	bne	r2,zero,11bd0 <__call_exitprocs+0x168>
   11b10:	a0800017 	ldw	r2,0(r20)
   11b14:	10003226 	beq	r2,zero,11be0 <__call_exitprocs+0x178>
   11b18:	a009883a 	mov	r4,r20
   11b1c:	98800015 	stw	r2,0(r19)
   11b20:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
   11b24:	9d000017 	ldw	r20,0(r19)
   11b28:	a03fe41e 	bne	r20,zero,11abc <_gp+0xffff5960>
   11b2c:	dfc00a17 	ldw	ra,40(sp)
   11b30:	df000917 	ldw	fp,36(sp)
   11b34:	ddc00817 	ldw	r23,32(sp)
   11b38:	dd800717 	ldw	r22,28(sp)
   11b3c:	dd400617 	ldw	r21,24(sp)
   11b40:	dd000517 	ldw	r20,20(sp)
   11b44:	dcc00417 	ldw	r19,16(sp)
   11b48:	dc800317 	ldw	r18,12(sp)
   11b4c:	dc400217 	ldw	r17,8(sp)
   11b50:	dc000117 	ldw	r16,4(sp)
   11b54:	dec00b04 	addi	sp,sp,44
   11b58:	f800283a 	ret
   11b5c:	a0800117 	ldw	r2,4(r20)
   11b60:	80c00017 	ldw	r3,0(r16)
   11b64:	10bfffc4 	addi	r2,r2,-1
   11b68:	15c01426 	beq	r2,r23,11bbc <__call_exitprocs+0x154>
   11b6c:	80000015 	stw	zero,0(r16)
   11b70:	183fde26 	beq	r3,zero,11aec <_gp+0xffff5990>
   11b74:	95c8983a 	sll	r4,r18,r23
   11b78:	a0806217 	ldw	r2,392(r20)
   11b7c:	a5800117 	ldw	r22,4(r20)
   11b80:	2084703a 	and	r2,r4,r2
   11b84:	10000b26 	beq	r2,zero,11bb4 <__call_exitprocs+0x14c>
   11b88:	a0806317 	ldw	r2,396(r20)
   11b8c:	2088703a 	and	r4,r4,r2
   11b90:	20000c1e 	bne	r4,zero,11bc4 <__call_exitprocs+0x15c>
   11b94:	89400017 	ldw	r5,0(r17)
   11b98:	d9000017 	ldw	r4,0(sp)
   11b9c:	183ee83a 	callr	r3
   11ba0:	a0800117 	ldw	r2,4(r20)
   11ba4:	15bfbf1e 	bne	r2,r22,11aa4 <_gp+0xffff5948>
   11ba8:	98800017 	ldw	r2,0(r19)
   11bac:	153fcf26 	beq	r2,r20,11aec <_gp+0xffff5990>
   11bb0:	003fbc06 	br	11aa4 <_gp+0xffff5948>
   11bb4:	183ee83a 	callr	r3
   11bb8:	003ff906 	br	11ba0 <_gp+0xffff5a44>
   11bbc:	a5c00115 	stw	r23,4(r20)
   11bc0:	003feb06 	br	11b70 <_gp+0xffff5a14>
   11bc4:	89000017 	ldw	r4,0(r17)
   11bc8:	183ee83a 	callr	r3
   11bcc:	003ff406 	br	11ba0 <_gp+0xffff5a44>
   11bd0:	a0800017 	ldw	r2,0(r20)
   11bd4:	a027883a 	mov	r19,r20
   11bd8:	1029883a 	mov	r20,r2
   11bdc:	003fb606 	br	11ab8 <_gp+0xffff595c>
   11be0:	0005883a 	mov	r2,zero
   11be4:	003ffb06 	br	11bd4 <_gp+0xffff5a78>

00011be8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11be8:	defffd04 	addi	sp,sp,-12
   11bec:	df000215 	stw	fp,8(sp)
   11bf0:	df000204 	addi	fp,sp,8
   11bf4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11bf8:	0001883a 	nop
   11bfc:	e0bfff17 	ldw	r2,-4(fp)
   11c00:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11c04:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11c08:	10000226 	beq	r2,zero,11c14 <_exit+0x2c>
    ALT_SIM_FAIL();
   11c0c:	002af070 	cmpltui	zero,zero,43969
   11c10:	00000106 	br	11c18 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11c14:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11c18:	003fff06 	br	11c18 <_gp+0xffff5abc>
