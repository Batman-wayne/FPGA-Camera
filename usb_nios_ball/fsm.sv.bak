module fsm
(
	input	 logic CLK,
	input  logic RESET,
	input  logic CAL_START,
//	input  logic [11:0] MOUSE_X, MOUSE_Y,
	input  logic CLICK,
	output logic SHOW_BALL, SHOW_BOX,
//	output logic [11:0] tlx, trx, blx, brx, tly, try, bly, bry
	output logic Tlxw, Trxw, Blxw, Brxw, Tlyw, Tryw, Blyw, Bryw
);

//	//MOUSE COORD REGES
//	register12 topLeftX (.CLK, .RESET, .write(tlxw), .dataIn(MOUSE_X), .dataOut(tlx));
//	register12 topRightX (.CLK, .RESET, .write(trxw), .dataIn(MOUSE_X), .dataOut(trx));
//	register12 bottomLeftX (.CLK, .RESET, .write(blxw), .dataIn(MOUSE_X), .dataOut(blx));
//	register12 bottomRightX (.CLK, .RESET, .write(brxw), .dataIn(MOUSE_X), .dataOut(brx));
//
//	register12 topLeftY (.CLK, .RESET, .write(tlyw), .dataIn(MOUSE_Y), .dataOut(tly));
//	register12 topRightY (.CLK, .RESET, .write(tryw), .dataIn(MOUSE_Y), .dataOut(try));
//	register12 bottomLeftY (.CLK, .RESET, .write(blyw), .dataIn(MOUSE_Y), .dataOut(bly));
//	register12 bottomRightY (.CLK, .RESET, .write(bryw), .dataIn(MOUSE_Y), .dataOut(bry));
	
	logic tlxw, trxw, blxw, brxw, tlyw, tryw, blyw, bryw;
	
	assign Tlxw = tlxw; 
	assign Trxw = trxw;
	assign Blxw = blxw; 
	assign Brxw = brxw;
	assign Tlyw = tlyw;
	assign Tryw = tryw;
	assign Blyw = blyw;
	assign Bryw = bryw;

	enum logic [3:0] {SetCam, Cal, Click1, Click2, Click3, Click4, Track} State, Next_State;

	always_ff @ (posedge CLK)
	begin
		if (RESET)
			State <= SetCam;
		else
			State <= Next_State;
	end
	
	always_comb
	begin
		Next_State = State;
		
		//DEFAULT OUTPUT SIGNALS
		SHOW_BALL = 1'b0;
		SHOW_BOX = 1'b0;
		tlxw = 1'b0;
		trxw = 1'b0;
		blxw = 1'b0;
		brxw = 1'b0;
		tlyw = 1'b0;
		tryw = 1'b0;
		blyw = 1'b0;
		bryw = 1'b0;
		
		
		//Assign next state
		unique case (State)
			SetCam :
				if (CAL_START)
					Next_State = Cal;
			Cal :
				if (CLICK)
					Next_State = Click1;
			Click1 :
				if (CLICK)
					Next_State = Click2;
			Click2 :
				if (CLICK)
					Next_State = Click3;
			Click3 :
				if (CLICK)
					Next_State = Click4;
			Click4 :
				Next_State = Track;
			Track :
				Next_State = Track;
			default : ;
		endcase
		
		case (State)
			SetCam : ;
			
			Cal :
			begin
				SHOW_BALL = 1'b1;
			end
			
			Click1 :
			begin
				SHOW_BALL = 1'b1;
				tlxw = 1'b1;
				tlyw = 1'b1;
			end
			
			Click2 :
			begin
				SHOW_BALL = 1'b1;
				trxw = 1'b1;
				tryw = 1'b1;
			end
			
			Click3 :
			begin
				SHOW_BALL = 1'b1;
				brxw = 1'b1;
				bryw = 1'b1;
			end
			
			Click4 :
			begin
				SHOW_BALL = 1'b1;
				blxw = 1'b1;
				blyw = 1'b1;
			end
			
			Track :
			begin
				SHOW_BOX = 1'b1;
			end
		
			default : ;
		endcase
	end

endmodule


module register12
(
	input logic CLK,
	input logic RESET,
	input logic write,
	input logic [11:0] dataIn,
	output logic [11:0] dataOut
);

	logic [11:0] data;
	
	always_ff @ (posedge CLK)
	begin
		if (RESET)
			data <= 12'b0;
		else if (write)
			data <= dataIn;
	end
	
	assign dataOut = data;

endmodule
